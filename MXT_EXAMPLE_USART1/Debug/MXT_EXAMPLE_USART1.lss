
MXT_EXAMPLE_USART1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a9ec  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040a9ec  0040a9ec  0001a9ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c8  20400000  0040a9f4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000bed4  204009c8  0040b3bc  000209c8  2**2
                  ALLOC
  4 .stack        00002004  2040c89c  00417290  000209c8  2**0
                  ALLOC
  5 .heap         00000200  2040e8a0  00419294  000209c8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209c8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209f6  2**0
                  CONTENTS, READONLY
  8 .debug_info   00029f16  00000000  00000000  00020a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000595b  00000000  00000000  0004a965  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000dceb  00000000  00000000  000502c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000012a8  00000000  00000000  0005dfab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001558  00000000  00000000  0005f253  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000dc10  00000000  00000000  000607ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000167f5  00000000  00000000  0006e3bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009cc77  00000000  00000000  00084bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004284  00000000  00000000  00121828  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	a0 e8 40 20 19 38 40 00 17 38 40 00 17 38 40 00     ..@ .8@..8@..8@.
  400010:	17 38 40 00 17 38 40 00 17 38 40 00 00 00 00 00     .8@..8@..8@.....
	...
  40002c:	ad 03 40 00 17 38 40 00 00 00 00 00 4d 04 40 00     ..@..8@.....M.@.
  40003c:	b5 04 40 00 17 38 40 00 17 38 40 00 17 38 40 00     ..@..8@..8@..8@.
  40004c:	17 38 40 00 17 38 40 00 17 38 40 00 17 38 40 00     .8@..8@..8@..8@.
  40005c:	17 38 40 00 17 38 40 00 00 00 00 00 91 31 40 00     .8@..8@......1@.
  40006c:	a5 31 40 00 b9 31 40 00 17 38 40 00 17 38 40 00     .1@..1@..8@..8@.
  40007c:	17 38 40 00 cd 31 40 00 e1 31 40 00 17 38 40 00     .8@..1@..1@..8@.
  40008c:	17 38 40 00 17 38 40 00 17 38 40 00 17 38 40 00     .8@..8@..8@..8@.
  40009c:	17 38 40 00 17 38 40 00 17 38 40 00 17 38 40 00     .8@..8@..8@..8@.
  4000ac:	17 38 40 00 17 38 40 00 5d 02 40 00 17 38 40 00     .8@..8@.].@..8@.
  4000bc:	17 38 40 00 17 38 40 00 17 38 40 00 17 38 40 00     .8@..8@..8@..8@.
  4000cc:	17 38 40 00 17 38 40 00 17 38 40 00 17 38 40 00     .8@..8@..8@..8@.
  4000dc:	17 38 40 00 71 02 40 00 17 38 40 00 17 38 40 00     .8@.q.@..8@..8@.
  4000ec:	17 38 40 00 17 38 40 00 17 38 40 00 17 38 40 00     .8@..8@..8@..8@.
  4000fc:	17 38 40 00 17 38 40 00 17 38 40 00 17 38 40 00     .8@..8@..8@..8@.
  40010c:	17 38 40 00 17 38 40 00 00 00 00 00 00 00 00 00     .8@..8@.........
  40011c:	00 00 00 00 17 38 40 00 17 38 40 00 17 38 40 00     .....8@..8@..8@.
  40012c:	17 38 40 00 17 38 40 00 17 38 40 00 17 38 40 00     .8@..8@..8@..8@.
  40013c:	17 38 40 00 17 38 40 00 17 38 40 00 17 38 40 00     .8@..8@..8@..8@.
  40014c:	17 38 40 00 17 38 40 00 00 00 00 00 00 00 00 00     .8@..8@.........
	...

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009c8 	.word	0x204009c8
  400184:	00000000 	.word	0x00000000
  400188:	0040a9f4 	.word	0x0040a9f4

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	0040a9f4 	.word	0x0040a9f4
  4001c8:	204009cc 	.word	0x204009cc
  4001cc:	0040a9f4 	.word	0x0040a9f4
  4001d0:	00000000 	.word	0x00000000

004001d4 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  4001d4:	b570      	push	{r4, r5, r6, lr}
  4001d6:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  4001d8:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  4001da:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  4001dc:	4013      	ands	r3, r2
  4001de:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4001e0:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  4001e2:	4e1c      	ldr	r6, [pc, #112]	; (400254 <afec_process_callback+0x80>)
  4001e4:	4d1c      	ldr	r5, [pc, #112]	; (400258 <afec_process_callback+0x84>)
  4001e6:	42a8      	cmp	r0, r5
  4001e8:	bf14      	ite	ne
  4001ea:	2000      	movne	r0, #0
  4001ec:	2001      	moveq	r0, #1
  4001ee:	0105      	lsls	r5, r0, #4
  4001f0:	e00b      	b.n	40020a <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  4001f2:	2c0e      	cmp	r4, #14
  4001f4:	d81e      	bhi.n	400234 <afec_process_callback+0x60>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  4001f6:	9a01      	ldr	r2, [sp, #4]
  4001f8:	f104 010c 	add.w	r1, r4, #12
  4001fc:	2301      	movs	r3, #1
  4001fe:	408b      	lsls	r3, r1
  400200:	4213      	tst	r3, r2
  400202:	d110      	bne.n	400226 <afec_process_callback+0x52>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400204:	3401      	adds	r4, #1
  400206:	2c10      	cmp	r4, #16
  400208:	d022      	beq.n	400250 <afec_process_callback+0x7c>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  40020a:	2c0b      	cmp	r4, #11
  40020c:	d8f1      	bhi.n	4001f2 <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  40020e:	9a01      	ldr	r2, [sp, #4]
  400210:	2301      	movs	r3, #1
  400212:	40a3      	lsls	r3, r4
  400214:	4213      	tst	r3, r2
  400216:	d0f5      	beq.n	400204 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400218:	192b      	adds	r3, r5, r4
  40021a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  40021e:	2b00      	cmp	r3, #0
  400220:	d0f0      	beq.n	400204 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400222:	4798      	blx	r3
  400224:	e7ee      	b.n	400204 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400226:	192b      	adds	r3, r5, r4
  400228:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  40022c:	2b00      	cmp	r3, #0
  40022e:	d0e9      	beq.n	400204 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400230:	4798      	blx	r3
  400232:	e7e7      	b.n	400204 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  400234:	9a01      	ldr	r2, [sp, #4]
  400236:	f104 010f 	add.w	r1, r4, #15
  40023a:	2301      	movs	r3, #1
  40023c:	408b      	lsls	r3, r1
  40023e:	4213      	tst	r3, r2
  400240:	d0e0      	beq.n	400204 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400242:	192b      	adds	r3, r5, r4
  400244:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400248:	2b00      	cmp	r3, #0
  40024a:	d0db      	beq.n	400204 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  40024c:	4798      	blx	r3
  40024e:	e7d9      	b.n	400204 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400250:	b002      	add	sp, #8
  400252:	bd70      	pop	{r4, r5, r6, pc}
  400254:	2040c798 	.word	0x2040c798
  400258:	40064000 	.word	0x40064000

0040025c <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  40025c:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  40025e:	4802      	ldr	r0, [pc, #8]	; (400268 <AFEC0_Handler+0xc>)
  400260:	4b02      	ldr	r3, [pc, #8]	; (40026c <AFEC0_Handler+0x10>)
  400262:	4798      	blx	r3
  400264:	bd08      	pop	{r3, pc}
  400266:	bf00      	nop
  400268:	4003c000 	.word	0x4003c000
  40026c:	004001d5 	.word	0x004001d5

00400270 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  400270:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  400272:	4802      	ldr	r0, [pc, #8]	; (40027c <AFEC1_Handler+0xc>)
  400274:	4b02      	ldr	r3, [pc, #8]	; (400280 <AFEC1_Handler+0x10>)
  400276:	4798      	blx	r3
  400278:	bd08      	pop	{r3, pc}
  40027a:	bf00      	nop
  40027c:	40064000 	.word	0x40064000
  400280:	004001d5 	.word	0x004001d5

00400284 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400284:	f100 0308 	add.w	r3, r0, #8
  400288:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  40028a:	f04f 32ff 	mov.w	r2, #4294967295
  40028e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400290:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400292:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400294:	2300      	movs	r3, #0
  400296:	6003      	str	r3, [r0, #0]
  400298:	4770      	bx	lr

0040029a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  40029a:	2300      	movs	r3, #0
  40029c:	6103      	str	r3, [r0, #16]
  40029e:	4770      	bx	lr

004002a0 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  4002a0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  4002a2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  4002a4:	689a      	ldr	r2, [r3, #8]
  4002a6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  4002a8:	689a      	ldr	r2, [r3, #8]
  4002aa:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  4002ac:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4002ae:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4002b0:	6803      	ldr	r3, [r0, #0]
  4002b2:	3301      	adds	r3, #1
  4002b4:	6003      	str	r3, [r0, #0]
  4002b6:	4770      	bx	lr

004002b8 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  4002b8:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  4002ba:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  4002bc:	f1b5 3fff 	cmp.w	r5, #4294967295
  4002c0:	d002      	beq.n	4002c8 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4002c2:	f100 0208 	add.w	r2, r0, #8
  4002c6:	e002      	b.n	4002ce <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  4002c8:	6902      	ldr	r2, [r0, #16]
  4002ca:	e004      	b.n	4002d6 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4002cc:	461a      	mov	r2, r3
  4002ce:	6853      	ldr	r3, [r2, #4]
  4002d0:	681c      	ldr	r4, [r3, #0]
  4002d2:	42a5      	cmp	r5, r4
  4002d4:	d2fa      	bcs.n	4002cc <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  4002d6:	6853      	ldr	r3, [r2, #4]
  4002d8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  4002da:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  4002dc:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  4002de:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4002e0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4002e2:	6803      	ldr	r3, [r0, #0]
  4002e4:	3301      	adds	r3, #1
  4002e6:	6003      	str	r3, [r0, #0]
}
  4002e8:	bc30      	pop	{r4, r5}
  4002ea:	4770      	bx	lr

004002ec <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  4002ec:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4002ee:	6842      	ldr	r2, [r0, #4]
  4002f0:	6881      	ldr	r1, [r0, #8]
  4002f2:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4002f4:	6882      	ldr	r2, [r0, #8]
  4002f6:	6841      	ldr	r1, [r0, #4]
  4002f8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  4002fa:	685a      	ldr	r2, [r3, #4]
  4002fc:	4290      	cmp	r0, r2
  4002fe:	d005      	beq.n	40030c <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  400300:	2200      	movs	r2, #0
  400302:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  400304:	6818      	ldr	r0, [r3, #0]
  400306:	3801      	subs	r0, #1
  400308:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  40030a:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  40030c:	6882      	ldr	r2, [r0, #8]
  40030e:	605a      	str	r2, [r3, #4]
  400310:	e7f6      	b.n	400300 <uxListRemove+0x14>
	...

00400314 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  400314:	4b0d      	ldr	r3, [pc, #52]	; (40034c <prvTaskExitError+0x38>)
  400316:	681b      	ldr	r3, [r3, #0]
  400318:	f1b3 3fff 	cmp.w	r3, #4294967295
  40031c:	d00a      	beq.n	400334 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  40031e:	f04f 0380 	mov.w	r3, #128	; 0x80
  400322:	b672      	cpsid	i
  400324:	f383 8811 	msr	BASEPRI, r3
  400328:	f3bf 8f6f 	isb	sy
  40032c:	f3bf 8f4f 	dsb	sy
  400330:	b662      	cpsie	i
  400332:	e7fe      	b.n	400332 <prvTaskExitError+0x1e>
  400334:	f04f 0380 	mov.w	r3, #128	; 0x80
  400338:	b672      	cpsid	i
  40033a:	f383 8811 	msr	BASEPRI, r3
  40033e:	f3bf 8f6f 	isb	sy
  400342:	f3bf 8f4f 	dsb	sy
  400346:	b662      	cpsie	i
  400348:	e7fe      	b.n	400348 <prvTaskExitError+0x34>
  40034a:	bf00      	nop
  40034c:	2040000c 	.word	0x2040000c

00400350 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  400350:	4806      	ldr	r0, [pc, #24]	; (40036c <prvPortStartFirstTask+0x1c>)
  400352:	6800      	ldr	r0, [r0, #0]
  400354:	6800      	ldr	r0, [r0, #0]
  400356:	f380 8808 	msr	MSP, r0
  40035a:	b662      	cpsie	i
  40035c:	b661      	cpsie	f
  40035e:	f3bf 8f4f 	dsb	sy
  400362:	f3bf 8f6f 	isb	sy
  400366:	df00      	svc	0
  400368:	bf00      	nop
  40036a:	0000      	.short	0x0000
  40036c:	e000ed08 	.word	0xe000ed08

00400370 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  400370:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400380 <vPortEnableVFP+0x10>
  400374:	6801      	ldr	r1, [r0, #0]
  400376:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40037a:	6001      	str	r1, [r0, #0]
  40037c:	4770      	bx	lr
  40037e:	0000      	.short	0x0000
  400380:	e000ed88 	.word	0xe000ed88

00400384 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  400384:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400388:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  40038c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  400390:	4b05      	ldr	r3, [pc, #20]	; (4003a8 <pxPortInitialiseStack+0x24>)
  400392:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  400396:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  40039a:	f06f 0302 	mvn.w	r3, #2
  40039e:	f840 3c24 	str.w	r3, [r0, #-36]
}
  4003a2:	3844      	subs	r0, #68	; 0x44
  4003a4:	4770      	bx	lr
  4003a6:	bf00      	nop
  4003a8:	00400315 	.word	0x00400315

004003ac <SVC_Handler>:
	__asm volatile (
  4003ac:	4b06      	ldr	r3, [pc, #24]	; (4003c8 <pxCurrentTCBConst2>)
  4003ae:	6819      	ldr	r1, [r3, #0]
  4003b0:	6808      	ldr	r0, [r1, #0]
  4003b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4003b6:	f380 8809 	msr	PSP, r0
  4003ba:	f3bf 8f6f 	isb	sy
  4003be:	f04f 0000 	mov.w	r0, #0
  4003c2:	f380 8811 	msr	BASEPRI, r0
  4003c6:	4770      	bx	lr

004003c8 <pxCurrentTCBConst2>:
  4003c8:	2040c1f4 	.word	0x2040c1f4
  4003cc:	4770      	bx	lr
  4003ce:	bf00      	nop

004003d0 <vPortEnterCritical>:
  4003d0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4003d4:	b672      	cpsid	i
  4003d6:	f383 8811 	msr	BASEPRI, r3
  4003da:	f3bf 8f6f 	isb	sy
  4003de:	f3bf 8f4f 	dsb	sy
  4003e2:	b662      	cpsie	i
	uxCriticalNesting++;
  4003e4:	4a0b      	ldr	r2, [pc, #44]	; (400414 <vPortEnterCritical+0x44>)
  4003e6:	6813      	ldr	r3, [r2, #0]
  4003e8:	3301      	adds	r3, #1
  4003ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  4003ec:	2b01      	cmp	r3, #1
  4003ee:	d10f      	bne.n	400410 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  4003f0:	4b09      	ldr	r3, [pc, #36]	; (400418 <vPortEnterCritical+0x48>)
  4003f2:	681b      	ldr	r3, [r3, #0]
  4003f4:	f013 0fff 	tst.w	r3, #255	; 0xff
  4003f8:	d00a      	beq.n	400410 <vPortEnterCritical+0x40>
  4003fa:	f04f 0380 	mov.w	r3, #128	; 0x80
  4003fe:	b672      	cpsid	i
  400400:	f383 8811 	msr	BASEPRI, r3
  400404:	f3bf 8f6f 	isb	sy
  400408:	f3bf 8f4f 	dsb	sy
  40040c:	b662      	cpsie	i
  40040e:	e7fe      	b.n	40040e <vPortEnterCritical+0x3e>
  400410:	4770      	bx	lr
  400412:	bf00      	nop
  400414:	2040000c 	.word	0x2040000c
  400418:	e000ed04 	.word	0xe000ed04

0040041c <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  40041c:	4b0a      	ldr	r3, [pc, #40]	; (400448 <vPortExitCritical+0x2c>)
  40041e:	681b      	ldr	r3, [r3, #0]
  400420:	b953      	cbnz	r3, 400438 <vPortExitCritical+0x1c>
  400422:	f04f 0380 	mov.w	r3, #128	; 0x80
  400426:	b672      	cpsid	i
  400428:	f383 8811 	msr	BASEPRI, r3
  40042c:	f3bf 8f6f 	isb	sy
  400430:	f3bf 8f4f 	dsb	sy
  400434:	b662      	cpsie	i
  400436:	e7fe      	b.n	400436 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  400438:	3b01      	subs	r3, #1
  40043a:	4a03      	ldr	r2, [pc, #12]	; (400448 <vPortExitCritical+0x2c>)
  40043c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  40043e:	b90b      	cbnz	r3, 400444 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400440:	f383 8811 	msr	BASEPRI, r3
  400444:	4770      	bx	lr
  400446:	bf00      	nop
  400448:	2040000c 	.word	0x2040000c

0040044c <PendSV_Handler>:
	__asm volatile
  40044c:	f3ef 8009 	mrs	r0, PSP
  400450:	f3bf 8f6f 	isb	sy
  400454:	4b15      	ldr	r3, [pc, #84]	; (4004ac <pxCurrentTCBConst>)
  400456:	681a      	ldr	r2, [r3, #0]
  400458:	f01e 0f10 	tst.w	lr, #16
  40045c:	bf08      	it	eq
  40045e:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  400462:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400466:	6010      	str	r0, [r2, #0]
  400468:	f84d 3d04 	str.w	r3, [sp, #-4]!
  40046c:	f04f 0080 	mov.w	r0, #128	; 0x80
  400470:	b672      	cpsid	i
  400472:	f380 8811 	msr	BASEPRI, r0
  400476:	f3bf 8f4f 	dsb	sy
  40047a:	f3bf 8f6f 	isb	sy
  40047e:	b662      	cpsie	i
  400480:	f001 f862 	bl	401548 <vTaskSwitchContext>
  400484:	f04f 0000 	mov.w	r0, #0
  400488:	f380 8811 	msr	BASEPRI, r0
  40048c:	bc08      	pop	{r3}
  40048e:	6819      	ldr	r1, [r3, #0]
  400490:	6808      	ldr	r0, [r1, #0]
  400492:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400496:	f01e 0f10 	tst.w	lr, #16
  40049a:	bf08      	it	eq
  40049c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  4004a0:	f380 8809 	msr	PSP, r0
  4004a4:	f3bf 8f6f 	isb	sy
  4004a8:	4770      	bx	lr
  4004aa:	bf00      	nop

004004ac <pxCurrentTCBConst>:
  4004ac:	2040c1f4 	.word	0x2040c1f4
  4004b0:	4770      	bx	lr
  4004b2:	bf00      	nop

004004b4 <SysTick_Handler>:
{
  4004b4:	b508      	push	{r3, lr}
	__asm volatile
  4004b6:	f3ef 8311 	mrs	r3, BASEPRI
  4004ba:	f04f 0280 	mov.w	r2, #128	; 0x80
  4004be:	b672      	cpsid	i
  4004c0:	f382 8811 	msr	BASEPRI, r2
  4004c4:	f3bf 8f6f 	isb	sy
  4004c8:	f3bf 8f4f 	dsb	sy
  4004cc:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  4004ce:	4b05      	ldr	r3, [pc, #20]	; (4004e4 <SysTick_Handler+0x30>)
  4004d0:	4798      	blx	r3
  4004d2:	b118      	cbz	r0, 4004dc <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4004d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4004d8:	4b03      	ldr	r3, [pc, #12]	; (4004e8 <SysTick_Handler+0x34>)
  4004da:	601a      	str	r2, [r3, #0]
	__asm volatile
  4004dc:	2300      	movs	r3, #0
  4004de:	f383 8811 	msr	BASEPRI, r3
  4004e2:	bd08      	pop	{r3, pc}
  4004e4:	00401245 	.word	0x00401245
  4004e8:	e000ed04 	.word	0xe000ed04

004004ec <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  4004ec:	4a03      	ldr	r2, [pc, #12]	; (4004fc <vPortSetupTimerInterrupt+0x10>)
  4004ee:	4b04      	ldr	r3, [pc, #16]	; (400500 <vPortSetupTimerInterrupt+0x14>)
  4004f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  4004f2:	2207      	movs	r2, #7
  4004f4:	3b04      	subs	r3, #4
  4004f6:	601a      	str	r2, [r3, #0]
  4004f8:	4770      	bx	lr
  4004fa:	bf00      	nop
  4004fc:	0003a97f 	.word	0x0003a97f
  400500:	e000e014 	.word	0xe000e014

00400504 <xPortStartScheduler>:
{
  400504:	b500      	push	{lr}
  400506:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  400508:	4b25      	ldr	r3, [pc, #148]	; (4005a0 <xPortStartScheduler+0x9c>)
  40050a:	781a      	ldrb	r2, [r3, #0]
  40050c:	b2d2      	uxtb	r2, r2
  40050e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  400510:	22ff      	movs	r2, #255	; 0xff
  400512:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  400514:	781b      	ldrb	r3, [r3, #0]
  400516:	b2db      	uxtb	r3, r3
  400518:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  40051c:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400520:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400524:	4a1f      	ldr	r2, [pc, #124]	; (4005a4 <xPortStartScheduler+0xa0>)
  400526:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  400528:	2207      	movs	r2, #7
  40052a:	4b1f      	ldr	r3, [pc, #124]	; (4005a8 <xPortStartScheduler+0xa4>)
  40052c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40052e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400532:	f013 0f80 	tst.w	r3, #128	; 0x80
  400536:	d010      	beq.n	40055a <xPortStartScheduler+0x56>
  400538:	2206      	movs	r2, #6
  40053a:	e000      	b.n	40053e <xPortStartScheduler+0x3a>
  40053c:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  40053e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400542:	005b      	lsls	r3, r3, #1
  400544:	b2db      	uxtb	r3, r3
  400546:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40054a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40054e:	1e51      	subs	r1, r2, #1
  400550:	f013 0f80 	tst.w	r3, #128	; 0x80
  400554:	d1f2      	bne.n	40053c <xPortStartScheduler+0x38>
  400556:	4b14      	ldr	r3, [pc, #80]	; (4005a8 <xPortStartScheduler+0xa4>)
  400558:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  40055a:	4a13      	ldr	r2, [pc, #76]	; (4005a8 <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  40055c:	6813      	ldr	r3, [r2, #0]
  40055e:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400560:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400564:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  400566:	9b01      	ldr	r3, [sp, #4]
  400568:	b2db      	uxtb	r3, r3
  40056a:	4a0d      	ldr	r2, [pc, #52]	; (4005a0 <xPortStartScheduler+0x9c>)
  40056c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  40056e:	4b0f      	ldr	r3, [pc, #60]	; (4005ac <xPortStartScheduler+0xa8>)
  400570:	681a      	ldr	r2, [r3, #0]
  400572:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  400576:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  400578:	681a      	ldr	r2, [r3, #0]
  40057a:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  40057e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  400580:	4b0b      	ldr	r3, [pc, #44]	; (4005b0 <xPortStartScheduler+0xac>)
  400582:	4798      	blx	r3
	uxCriticalNesting = 0;
  400584:	2200      	movs	r2, #0
  400586:	4b0b      	ldr	r3, [pc, #44]	; (4005b4 <xPortStartScheduler+0xb0>)
  400588:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  40058a:	4b0b      	ldr	r3, [pc, #44]	; (4005b8 <xPortStartScheduler+0xb4>)
  40058c:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  40058e:	4a0b      	ldr	r2, [pc, #44]	; (4005bc <xPortStartScheduler+0xb8>)
  400590:	6813      	ldr	r3, [r2, #0]
  400592:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  400596:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  400598:	4b09      	ldr	r3, [pc, #36]	; (4005c0 <xPortStartScheduler+0xbc>)
  40059a:	4798      	blx	r3
	prvTaskExitError();
  40059c:	4b09      	ldr	r3, [pc, #36]	; (4005c4 <xPortStartScheduler+0xc0>)
  40059e:	4798      	blx	r3
  4005a0:	e000e400 	.word	0xe000e400
  4005a4:	204009e4 	.word	0x204009e4
  4005a8:	204009e8 	.word	0x204009e8
  4005ac:	e000ed20 	.word	0xe000ed20
  4005b0:	004004ed 	.word	0x004004ed
  4005b4:	2040000c 	.word	0x2040000c
  4005b8:	00400371 	.word	0x00400371
  4005bc:	e000ef34 	.word	0xe000ef34
  4005c0:	00400351 	.word	0x00400351
  4005c4:	00400315 	.word	0x00400315

004005c8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  4005c8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  4005cc:	2b0f      	cmp	r3, #15
  4005ce:	d911      	bls.n	4005f4 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  4005d0:	4a12      	ldr	r2, [pc, #72]	; (40061c <vPortValidateInterruptPriority+0x54>)
  4005d2:	5c9b      	ldrb	r3, [r3, r2]
  4005d4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  4005d6:	4a12      	ldr	r2, [pc, #72]	; (400620 <vPortValidateInterruptPriority+0x58>)
  4005d8:	7812      	ldrb	r2, [r2, #0]
  4005da:	429a      	cmp	r2, r3
  4005dc:	d90a      	bls.n	4005f4 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  4005de:	f04f 0380 	mov.w	r3, #128	; 0x80
  4005e2:	b672      	cpsid	i
  4005e4:	f383 8811 	msr	BASEPRI, r3
  4005e8:	f3bf 8f6f 	isb	sy
  4005ec:	f3bf 8f4f 	dsb	sy
  4005f0:	b662      	cpsie	i
  4005f2:	e7fe      	b.n	4005f2 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  4005f4:	4b0b      	ldr	r3, [pc, #44]	; (400624 <vPortValidateInterruptPriority+0x5c>)
  4005f6:	681b      	ldr	r3, [r3, #0]
  4005f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4005fc:	4a0a      	ldr	r2, [pc, #40]	; (400628 <vPortValidateInterruptPriority+0x60>)
  4005fe:	6812      	ldr	r2, [r2, #0]
  400600:	4293      	cmp	r3, r2
  400602:	d90a      	bls.n	40061a <vPortValidateInterruptPriority+0x52>
  400604:	f04f 0380 	mov.w	r3, #128	; 0x80
  400608:	b672      	cpsid	i
  40060a:	f383 8811 	msr	BASEPRI, r3
  40060e:	f3bf 8f6f 	isb	sy
  400612:	f3bf 8f4f 	dsb	sy
  400616:	b662      	cpsie	i
  400618:	e7fe      	b.n	400618 <vPortValidateInterruptPriority+0x50>
  40061a:	4770      	bx	lr
  40061c:	e000e3f0 	.word	0xe000e3f0
  400620:	204009e4 	.word	0x204009e4
  400624:	e000ed0c 	.word	0xe000ed0c
  400628:	204009e8 	.word	0x204009e8

0040062c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  40062c:	b538      	push	{r3, r4, r5, lr}
  40062e:	4604      	mov	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  400630:	f010 0f07 	tst.w	r0, #7
  400634:	d002      	beq.n	40063c <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  400636:	f020 0407 	bic.w	r4, r0, #7
  40063a:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
  40063c:	4b11      	ldr	r3, [pc, #68]	; (400684 <pvPortMalloc+0x58>)
  40063e:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  400640:	4b11      	ldr	r3, [pc, #68]	; (400688 <pvPortMalloc+0x5c>)
  400642:	681b      	ldr	r3, [r3, #0]
  400644:	b193      	cbz	r3, 40066c <pvPortMalloc+0x40>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  400646:	4b11      	ldr	r3, [pc, #68]	; (40068c <pvPortMalloc+0x60>)
  400648:	681b      	ldr	r3, [r3, #0]
  40064a:	441c      	add	r4, r3
  40064c:	42a3      	cmp	r3, r4
  40064e:	d213      	bcs.n	400678 <pvPortMalloc+0x4c>
  400650:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  400654:	4294      	cmp	r4, r2
  400656:	d80f      	bhi.n	400678 <pvPortMalloc+0x4c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  400658:	4a0b      	ldr	r2, [pc, #44]	; (400688 <pvPortMalloc+0x5c>)
  40065a:	6815      	ldr	r5, [r2, #0]
  40065c:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
  40065e:	4b0b      	ldr	r3, [pc, #44]	; (40068c <pvPortMalloc+0x60>)
  400660:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  400662:	4b0b      	ldr	r3, [pc, #44]	; (400690 <pvPortMalloc+0x64>)
  400664:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  400666:	b14d      	cbz	r5, 40067c <pvPortMalloc+0x50>
		}
	}
	#endif

	return pvReturn;
}
  400668:	4628      	mov	r0, r5
  40066a:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  40066c:	4b09      	ldr	r3, [pc, #36]	; (400694 <pvPortMalloc+0x68>)
  40066e:	f023 0307 	bic.w	r3, r3, #7
  400672:	4a05      	ldr	r2, [pc, #20]	; (400688 <pvPortMalloc+0x5c>)
  400674:	6013      	str	r3, [r2, #0]
  400676:	e7e6      	b.n	400646 <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
  400678:	4b05      	ldr	r3, [pc, #20]	; (400690 <pvPortMalloc+0x64>)
  40067a:	4798      	blx	r3
			vApplicationMallocFailedHook();
  40067c:	4b06      	ldr	r3, [pc, #24]	; (400698 <pvPortMalloc+0x6c>)
  40067e:	4798      	blx	r3
  400680:	2500      	movs	r5, #0
	return pvReturn;
  400682:	e7f1      	b.n	400668 <pvPortMalloc+0x3c>
  400684:	00401229 	.word	0x00401229
  400688:	204009ec 	.word	0x204009ec
  40068c:	2040c1f0 	.word	0x2040c1f0
  400690:	00401391 	.word	0x00401391
  400694:	204009f8 	.word	0x204009f8
  400698:	00403c93 	.word	0x00403c93

0040069c <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
  40069c:	b150      	cbz	r0, 4006b4 <vPortFree+0x18>
  40069e:	f04f 0380 	mov.w	r3, #128	; 0x80
  4006a2:	b672      	cpsid	i
  4006a4:	f383 8811 	msr	BASEPRI, r3
  4006a8:	f3bf 8f6f 	isb	sy
  4006ac:	f3bf 8f4f 	dsb	sy
  4006b0:	b662      	cpsie	i
  4006b2:	e7fe      	b.n	4006b2 <vPortFree+0x16>
  4006b4:	4770      	bx	lr
	...

004006b8 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  4006b8:	b538      	push	{r3, r4, r5, lr}
  4006ba:	4604      	mov	r4, r0
  4006bc:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  4006be:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4006c0:	b95a      	cbnz	r2, 4006da <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4006c2:	6803      	ldr	r3, [r0, #0]
  4006c4:	2b00      	cmp	r3, #0
  4006c6:	d12e      	bne.n	400726 <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  4006c8:	6840      	ldr	r0, [r0, #4]
  4006ca:	4b1b      	ldr	r3, [pc, #108]	; (400738 <prvCopyDataToQueue+0x80>)
  4006cc:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  4006ce:	2300      	movs	r3, #0
  4006d0:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  4006d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4006d4:	3301      	adds	r3, #1
  4006d6:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  4006d8:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  4006da:	b96d      	cbnz	r5, 4006f8 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  4006dc:	6880      	ldr	r0, [r0, #8]
  4006de:	4b17      	ldr	r3, [pc, #92]	; (40073c <prvCopyDataToQueue+0x84>)
  4006e0:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  4006e2:	68a3      	ldr	r3, [r4, #8]
  4006e4:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4006e6:	4413      	add	r3, r2
  4006e8:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4006ea:	6862      	ldr	r2, [r4, #4]
  4006ec:	4293      	cmp	r3, r2
  4006ee:	d31c      	bcc.n	40072a <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  4006f0:	6823      	ldr	r3, [r4, #0]
  4006f2:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  4006f4:	2000      	movs	r0, #0
  4006f6:	e7ec      	b.n	4006d2 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4006f8:	68c0      	ldr	r0, [r0, #12]
  4006fa:	4b10      	ldr	r3, [pc, #64]	; (40073c <prvCopyDataToQueue+0x84>)
  4006fc:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  4006fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400700:	425b      	negs	r3, r3
  400702:	68e2      	ldr	r2, [r4, #12]
  400704:	441a      	add	r2, r3
  400706:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400708:	6821      	ldr	r1, [r4, #0]
  40070a:	428a      	cmp	r2, r1
  40070c:	d202      	bcs.n	400714 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  40070e:	6862      	ldr	r2, [r4, #4]
  400710:	4413      	add	r3, r2
  400712:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  400714:	2d02      	cmp	r5, #2
  400716:	d10a      	bne.n	40072e <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  400718:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40071a:	b153      	cbz	r3, 400732 <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  40071c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40071e:	3b01      	subs	r3, #1
  400720:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  400722:	2000      	movs	r0, #0
  400724:	e7d5      	b.n	4006d2 <prvCopyDataToQueue+0x1a>
  400726:	2000      	movs	r0, #0
  400728:	e7d3      	b.n	4006d2 <prvCopyDataToQueue+0x1a>
  40072a:	2000      	movs	r0, #0
  40072c:	e7d1      	b.n	4006d2 <prvCopyDataToQueue+0x1a>
  40072e:	2000      	movs	r0, #0
  400730:	e7cf      	b.n	4006d2 <prvCopyDataToQueue+0x1a>
  400732:	2000      	movs	r0, #0
  400734:	e7cd      	b.n	4006d2 <prvCopyDataToQueue+0x1a>
  400736:	bf00      	nop
  400738:	00401949 	.word	0x00401949
  40073c:	00404699 	.word	0x00404699

00400740 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  400740:	b530      	push	{r4, r5, lr}
  400742:	b083      	sub	sp, #12
  400744:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  400746:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  400748:	b174      	cbz	r4, 400768 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  40074a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40074c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40074e:	429a      	cmp	r2, r3
  400750:	d315      	bcc.n	40077e <prvNotifyQueueSetContainer+0x3e>
  400752:	f04f 0380 	mov.w	r3, #128	; 0x80
  400756:	b672      	cpsid	i
  400758:	f383 8811 	msr	BASEPRI, r3
  40075c:	f3bf 8f6f 	isb	sy
  400760:	f3bf 8f4f 	dsb	sy
  400764:	b662      	cpsie	i
  400766:	e7fe      	b.n	400766 <prvNotifyQueueSetContainer+0x26>
  400768:	f04f 0380 	mov.w	r3, #128	; 0x80
  40076c:	b672      	cpsid	i
  40076e:	f383 8811 	msr	BASEPRI, r3
  400772:	f3bf 8f6f 	isb	sy
  400776:	f3bf 8f4f 	dsb	sy
  40077a:	b662      	cpsie	i
  40077c:	e7fe      	b.n	40077c <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  40077e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400780:	4293      	cmp	r3, r2
  400782:	d803      	bhi.n	40078c <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  400784:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  400786:	4628      	mov	r0, r5
  400788:	b003      	add	sp, #12
  40078a:	bd30      	pop	{r4, r5, pc}
  40078c:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  40078e:	a901      	add	r1, sp, #4
  400790:	4620      	mov	r0, r4
  400792:	4b0b      	ldr	r3, [pc, #44]	; (4007c0 <prvNotifyQueueSetContainer+0x80>)
  400794:	4798      	blx	r3
  400796:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  400798:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40079a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40079e:	d10a      	bne.n	4007b6 <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  4007a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4007a2:	2b00      	cmp	r3, #0
  4007a4:	d0ef      	beq.n	400786 <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  4007a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4007aa:	4b06      	ldr	r3, [pc, #24]	; (4007c4 <prvNotifyQueueSetContainer+0x84>)
  4007ac:	4798      	blx	r3
  4007ae:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  4007b0:	bf18      	it	ne
  4007b2:	2501      	movne	r5, #1
  4007b4:	e7e7      	b.n	400786 <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  4007b6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4007b8:	3301      	adds	r3, #1
  4007ba:	64a3      	str	r3, [r4, #72]	; 0x48
  4007bc:	e7e3      	b.n	400786 <prvNotifyQueueSetContainer+0x46>
  4007be:	bf00      	nop
  4007c0:	004006b9 	.word	0x004006b9
  4007c4:	0040171d 	.word	0x0040171d

004007c8 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  4007c8:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4007ca:	b172      	cbz	r2, 4007ea <prvCopyDataFromQueue+0x22>
{
  4007cc:	b510      	push	{r4, lr}
  4007ce:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  4007d0:	68c4      	ldr	r4, [r0, #12]
  4007d2:	4414      	add	r4, r2
  4007d4:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  4007d6:	6840      	ldr	r0, [r0, #4]
  4007d8:	4284      	cmp	r4, r0
  4007da:	d301      	bcc.n	4007e0 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  4007dc:	6818      	ldr	r0, [r3, #0]
  4007de:	60d8      	str	r0, [r3, #12]
  4007e0:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  4007e2:	68d9      	ldr	r1, [r3, #12]
  4007e4:	4b01      	ldr	r3, [pc, #4]	; (4007ec <prvCopyDataFromQueue+0x24>)
  4007e6:	4798      	blx	r3
  4007e8:	bd10      	pop	{r4, pc}
  4007ea:	4770      	bx	lr
  4007ec:	00404699 	.word	0x00404699

004007f0 <prvUnlockQueue>:
{
  4007f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4007f2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  4007f4:	4b22      	ldr	r3, [pc, #136]	; (400880 <prvUnlockQueue+0x90>)
  4007f6:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4007f8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4007fa:	2b00      	cmp	r3, #0
  4007fc:	dd1b      	ble.n	400836 <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4007fe:	4d21      	ldr	r5, [pc, #132]	; (400884 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  400800:	4f21      	ldr	r7, [pc, #132]	; (400888 <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400802:	4e22      	ldr	r6, [pc, #136]	; (40088c <prvUnlockQueue+0x9c>)
  400804:	e00b      	b.n	40081e <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400806:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400808:	b1ab      	cbz	r3, 400836 <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40080a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40080e:	47b0      	blx	r6
  400810:	b978      	cbnz	r0, 400832 <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  400812:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400814:	3b01      	subs	r3, #1
  400816:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400818:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40081a:	2b00      	cmp	r3, #0
  40081c:	dd0b      	ble.n	400836 <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  40081e:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400820:	2b00      	cmp	r3, #0
  400822:	d0f0      	beq.n	400806 <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  400824:	2100      	movs	r1, #0
  400826:	4620      	mov	r0, r4
  400828:	47a8      	blx	r5
  40082a:	2801      	cmp	r0, #1
  40082c:	d1f1      	bne.n	400812 <prvUnlockQueue+0x22>
						vTaskMissedYield();
  40082e:	47b8      	blx	r7
  400830:	e7ef      	b.n	400812 <prvUnlockQueue+0x22>
							vTaskMissedYield();
  400832:	47b8      	blx	r7
  400834:	e7ed      	b.n	400812 <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  400836:	f04f 33ff 	mov.w	r3, #4294967295
  40083a:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  40083c:	4b14      	ldr	r3, [pc, #80]	; (400890 <prvUnlockQueue+0xa0>)
  40083e:	4798      	blx	r3
	taskENTER_CRITICAL();
  400840:	4b0f      	ldr	r3, [pc, #60]	; (400880 <prvUnlockQueue+0x90>)
  400842:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400844:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400846:	2b00      	cmp	r3, #0
  400848:	dd14      	ble.n	400874 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40084a:	6923      	ldr	r3, [r4, #16]
  40084c:	b193      	cbz	r3, 400874 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40084e:	f104 0610 	add.w	r6, r4, #16
  400852:	4d0e      	ldr	r5, [pc, #56]	; (40088c <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  400854:	4f0c      	ldr	r7, [pc, #48]	; (400888 <prvUnlockQueue+0x98>)
  400856:	e007      	b.n	400868 <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  400858:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40085a:	3b01      	subs	r3, #1
  40085c:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  40085e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400860:	2b00      	cmp	r3, #0
  400862:	dd07      	ble.n	400874 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400864:	6923      	ldr	r3, [r4, #16]
  400866:	b12b      	cbz	r3, 400874 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400868:	4630      	mov	r0, r6
  40086a:	47a8      	blx	r5
  40086c:	2800      	cmp	r0, #0
  40086e:	d0f3      	beq.n	400858 <prvUnlockQueue+0x68>
					vTaskMissedYield();
  400870:	47b8      	blx	r7
  400872:	e7f1      	b.n	400858 <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  400874:	f04f 33ff 	mov.w	r3, #4294967295
  400878:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  40087a:	4b05      	ldr	r3, [pc, #20]	; (400890 <prvUnlockQueue+0xa0>)
  40087c:	4798      	blx	r3
  40087e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400880:	004003d1 	.word	0x004003d1
  400884:	00400741 	.word	0x00400741
  400888:	00401879 	.word	0x00401879
  40088c:	0040171d 	.word	0x0040171d
  400890:	0040041d 	.word	0x0040041d

00400894 <xQueueGenericReset>:
{
  400894:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  400896:	b308      	cbz	r0, 4008dc <xQueueGenericReset+0x48>
  400898:	4604      	mov	r4, r0
  40089a:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  40089c:	4b1d      	ldr	r3, [pc, #116]	; (400914 <xQueueGenericReset+0x80>)
  40089e:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  4008a0:	6822      	ldr	r2, [r4, #0]
  4008a2:	6c21      	ldr	r1, [r4, #64]	; 0x40
  4008a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4008a6:	fb03 f301 	mul.w	r3, r3, r1
  4008aa:	18d0      	adds	r0, r2, r3
  4008ac:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  4008ae:	2000      	movs	r0, #0
  4008b0:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  4008b2:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  4008b4:	1a5b      	subs	r3, r3, r1
  4008b6:	4413      	add	r3, r2
  4008b8:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  4008ba:	f04f 33ff 	mov.w	r3, #4294967295
  4008be:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  4008c0:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  4008c2:	b9fd      	cbnz	r5, 400904 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4008c4:	6923      	ldr	r3, [r4, #16]
  4008c6:	b12b      	cbz	r3, 4008d4 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4008c8:	f104 0010 	add.w	r0, r4, #16
  4008cc:	4b12      	ldr	r3, [pc, #72]	; (400918 <xQueueGenericReset+0x84>)
  4008ce:	4798      	blx	r3
  4008d0:	2801      	cmp	r0, #1
  4008d2:	d00e      	beq.n	4008f2 <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  4008d4:	4b11      	ldr	r3, [pc, #68]	; (40091c <xQueueGenericReset+0x88>)
  4008d6:	4798      	blx	r3
}
  4008d8:	2001      	movs	r0, #1
  4008da:	bd38      	pop	{r3, r4, r5, pc}
  4008dc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4008e0:	b672      	cpsid	i
  4008e2:	f383 8811 	msr	BASEPRI, r3
  4008e6:	f3bf 8f6f 	isb	sy
  4008ea:	f3bf 8f4f 	dsb	sy
  4008ee:	b662      	cpsie	i
  4008f0:	e7fe      	b.n	4008f0 <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  4008f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4008f6:	4b0a      	ldr	r3, [pc, #40]	; (400920 <xQueueGenericReset+0x8c>)
  4008f8:	601a      	str	r2, [r3, #0]
  4008fa:	f3bf 8f4f 	dsb	sy
  4008fe:	f3bf 8f6f 	isb	sy
  400902:	e7e7      	b.n	4008d4 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  400904:	f104 0010 	add.w	r0, r4, #16
  400908:	4d06      	ldr	r5, [pc, #24]	; (400924 <xQueueGenericReset+0x90>)
  40090a:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  40090c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400910:	47a8      	blx	r5
  400912:	e7df      	b.n	4008d4 <xQueueGenericReset+0x40>
  400914:	004003d1 	.word	0x004003d1
  400918:	0040171d 	.word	0x0040171d
  40091c:	0040041d 	.word	0x0040041d
  400920:	e000ed04 	.word	0xe000ed04
  400924:	00400285 	.word	0x00400285

00400928 <xQueueGenericCreate>:
{
  400928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  40092a:	b950      	cbnz	r0, 400942 <xQueueGenericCreate+0x1a>
  40092c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400930:	b672      	cpsid	i
  400932:	f383 8811 	msr	BASEPRI, r3
  400936:	f3bf 8f6f 	isb	sy
  40093a:	f3bf 8f4f 	dsb	sy
  40093e:	b662      	cpsie	i
  400940:	e7fe      	b.n	400940 <xQueueGenericCreate+0x18>
  400942:	4606      	mov	r6, r0
  400944:	4617      	mov	r7, r2
  400946:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  400948:	b189      	cbz	r1, 40096e <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40094a:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  40094e:	3059      	adds	r0, #89	; 0x59
  400950:	4b12      	ldr	r3, [pc, #72]	; (40099c <xQueueGenericCreate+0x74>)
  400952:	4798      	blx	r3
	if( pxNewQueue != NULL )
  400954:	4604      	mov	r4, r0
  400956:	b9e8      	cbnz	r0, 400994 <xQueueGenericCreate+0x6c>
  400958:	f04f 0380 	mov.w	r3, #128	; 0x80
  40095c:	b672      	cpsid	i
  40095e:	f383 8811 	msr	BASEPRI, r3
  400962:	f3bf 8f6f 	isb	sy
  400966:	f3bf 8f4f 	dsb	sy
  40096a:	b662      	cpsie	i
  40096c:	e7fe      	b.n	40096c <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  40096e:	2058      	movs	r0, #88	; 0x58
  400970:	4b0a      	ldr	r3, [pc, #40]	; (40099c <xQueueGenericCreate+0x74>)
  400972:	4798      	blx	r3
	if( pxNewQueue != NULL )
  400974:	4604      	mov	r4, r0
  400976:	2800      	cmp	r0, #0
  400978:	d0ee      	beq.n	400958 <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  40097a:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  40097c:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  40097e:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  400980:	2101      	movs	r1, #1
  400982:	4620      	mov	r0, r4
  400984:	4b06      	ldr	r3, [pc, #24]	; (4009a0 <xQueueGenericCreate+0x78>)
  400986:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  400988:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  40098c:	2300      	movs	r3, #0
  40098e:	6563      	str	r3, [r4, #84]	; 0x54
}
  400990:	4620      	mov	r0, r4
  400992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  400994:	f100 0358 	add.w	r3, r0, #88	; 0x58
  400998:	6003      	str	r3, [r0, #0]
  40099a:	e7ef      	b.n	40097c <xQueueGenericCreate+0x54>
  40099c:	0040062d 	.word	0x0040062d
  4009a0:	00400895 	.word	0x00400895

004009a4 <xQueueGenericSend>:
{
  4009a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4009a8:	b085      	sub	sp, #20
  4009aa:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  4009ac:	b1b8      	cbz	r0, 4009de <xQueueGenericSend+0x3a>
  4009ae:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4009b0:	b301      	cbz	r1, 4009f4 <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4009b2:	2b02      	cmp	r3, #2
  4009b4:	d02c      	beq.n	400a10 <xQueueGenericSend+0x6c>
  4009b6:	461d      	mov	r5, r3
  4009b8:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  4009ba:	4b66      	ldr	r3, [pc, #408]	; (400b54 <xQueueGenericSend+0x1b0>)
  4009bc:	4798      	blx	r3
  4009be:	2800      	cmp	r0, #0
  4009c0:	d134      	bne.n	400a2c <xQueueGenericSend+0x88>
  4009c2:	9b01      	ldr	r3, [sp, #4]
  4009c4:	2b00      	cmp	r3, #0
  4009c6:	d038      	beq.n	400a3a <xQueueGenericSend+0x96>
  4009c8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4009cc:	b672      	cpsid	i
  4009ce:	f383 8811 	msr	BASEPRI, r3
  4009d2:	f3bf 8f6f 	isb	sy
  4009d6:	f3bf 8f4f 	dsb	sy
  4009da:	b662      	cpsie	i
  4009dc:	e7fe      	b.n	4009dc <xQueueGenericSend+0x38>
  4009de:	f04f 0380 	mov.w	r3, #128	; 0x80
  4009e2:	b672      	cpsid	i
  4009e4:	f383 8811 	msr	BASEPRI, r3
  4009e8:	f3bf 8f6f 	isb	sy
  4009ec:	f3bf 8f4f 	dsb	sy
  4009f0:	b662      	cpsie	i
  4009f2:	e7fe      	b.n	4009f2 <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4009f4:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4009f6:	2a00      	cmp	r2, #0
  4009f8:	d0db      	beq.n	4009b2 <xQueueGenericSend+0xe>
  4009fa:	f04f 0380 	mov.w	r3, #128	; 0x80
  4009fe:	b672      	cpsid	i
  400a00:	f383 8811 	msr	BASEPRI, r3
  400a04:	f3bf 8f6f 	isb	sy
  400a08:	f3bf 8f4f 	dsb	sy
  400a0c:	b662      	cpsie	i
  400a0e:	e7fe      	b.n	400a0e <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400a10:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  400a12:	2a01      	cmp	r2, #1
  400a14:	d0cf      	beq.n	4009b6 <xQueueGenericSend+0x12>
  400a16:	f04f 0380 	mov.w	r3, #128	; 0x80
  400a1a:	b672      	cpsid	i
  400a1c:	f383 8811 	msr	BASEPRI, r3
  400a20:	f3bf 8f6f 	isb	sy
  400a24:	f3bf 8f4f 	dsb	sy
  400a28:	b662      	cpsie	i
  400a2a:	e7fe      	b.n	400a2a <xQueueGenericSend+0x86>
  400a2c:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  400a2e:	4e4a      	ldr	r6, [pc, #296]	; (400b58 <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  400a30:	f8df a150 	ldr.w	sl, [pc, #336]	; 400b84 <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  400a34:	f8df 912c 	ldr.w	r9, [pc, #300]	; 400b64 <xQueueGenericSend+0x1c0>
  400a38:	e042      	b.n	400ac0 <xQueueGenericSend+0x11c>
  400a3a:	2700      	movs	r7, #0
  400a3c:	e7f7      	b.n	400a2e <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400a3e:	462a      	mov	r2, r5
  400a40:	4641      	mov	r1, r8
  400a42:	4620      	mov	r0, r4
  400a44:	4b45      	ldr	r3, [pc, #276]	; (400b5c <xQueueGenericSend+0x1b8>)
  400a46:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  400a48:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400a4a:	b19b      	cbz	r3, 400a74 <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  400a4c:	4629      	mov	r1, r5
  400a4e:	4620      	mov	r0, r4
  400a50:	4b43      	ldr	r3, [pc, #268]	; (400b60 <xQueueGenericSend+0x1bc>)
  400a52:	4798      	blx	r3
  400a54:	2801      	cmp	r0, #1
  400a56:	d107      	bne.n	400a68 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  400a58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400a5c:	4b41      	ldr	r3, [pc, #260]	; (400b64 <xQueueGenericSend+0x1c0>)
  400a5e:	601a      	str	r2, [r3, #0]
  400a60:	f3bf 8f4f 	dsb	sy
  400a64:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  400a68:	4b3f      	ldr	r3, [pc, #252]	; (400b68 <xQueueGenericSend+0x1c4>)
  400a6a:	4798      	blx	r3
				return pdPASS;
  400a6c:	2001      	movs	r0, #1
}
  400a6e:	b005      	add	sp, #20
  400a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400a74:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400a76:	b173      	cbz	r3, 400a96 <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  400a78:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400a7c:	4b3b      	ldr	r3, [pc, #236]	; (400b6c <xQueueGenericSend+0x1c8>)
  400a7e:	4798      	blx	r3
  400a80:	2801      	cmp	r0, #1
  400a82:	d1f1      	bne.n	400a68 <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  400a84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400a88:	4b36      	ldr	r3, [pc, #216]	; (400b64 <xQueueGenericSend+0x1c0>)
  400a8a:	601a      	str	r2, [r3, #0]
  400a8c:	f3bf 8f4f 	dsb	sy
  400a90:	f3bf 8f6f 	isb	sy
  400a94:	e7e8      	b.n	400a68 <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  400a96:	2800      	cmp	r0, #0
  400a98:	d0e6      	beq.n	400a68 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  400a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400a9e:	4b31      	ldr	r3, [pc, #196]	; (400b64 <xQueueGenericSend+0x1c0>)
  400aa0:	601a      	str	r2, [r3, #0]
  400aa2:	f3bf 8f4f 	dsb	sy
  400aa6:	f3bf 8f6f 	isb	sy
  400aaa:	e7dd      	b.n	400a68 <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  400aac:	4b2e      	ldr	r3, [pc, #184]	; (400b68 <xQueueGenericSend+0x1c4>)
  400aae:	4798      	blx	r3
					return errQUEUE_FULL;
  400ab0:	2000      	movs	r0, #0
  400ab2:	e7dc      	b.n	400a6e <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  400ab4:	4620      	mov	r0, r4
  400ab6:	4b2e      	ldr	r3, [pc, #184]	; (400b70 <xQueueGenericSend+0x1cc>)
  400ab8:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400aba:	4b2e      	ldr	r3, [pc, #184]	; (400b74 <xQueueGenericSend+0x1d0>)
  400abc:	4798      	blx	r3
  400abe:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  400ac0:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400ac2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400ac4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400ac6:	429a      	cmp	r2, r3
  400ac8:	d3b9      	bcc.n	400a3e <xQueueGenericSend+0x9a>
  400aca:	2d02      	cmp	r5, #2
  400acc:	d0b7      	beq.n	400a3e <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  400ace:	9b01      	ldr	r3, [sp, #4]
  400ad0:	2b00      	cmp	r3, #0
  400ad2:	d0eb      	beq.n	400aac <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  400ad4:	b90f      	cbnz	r7, 400ada <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  400ad6:	a802      	add	r0, sp, #8
  400ad8:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  400ada:	4b23      	ldr	r3, [pc, #140]	; (400b68 <xQueueGenericSend+0x1c4>)
  400adc:	4798      	blx	r3
		vTaskSuspendAll();
  400ade:	4b26      	ldr	r3, [pc, #152]	; (400b78 <xQueueGenericSend+0x1d4>)
  400ae0:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400ae2:	47b0      	blx	r6
  400ae4:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
  400aea:	d101      	bne.n	400af0 <xQueueGenericSend+0x14c>
  400aec:	2300      	movs	r3, #0
  400aee:	6463      	str	r3, [r4, #68]	; 0x44
  400af0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400af2:	f1b3 3fff 	cmp.w	r3, #4294967295
  400af6:	d101      	bne.n	400afc <xQueueGenericSend+0x158>
  400af8:	2300      	movs	r3, #0
  400afa:	64a3      	str	r3, [r4, #72]	; 0x48
  400afc:	4b1a      	ldr	r3, [pc, #104]	; (400b68 <xQueueGenericSend+0x1c4>)
  400afe:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400b00:	a901      	add	r1, sp, #4
  400b02:	a802      	add	r0, sp, #8
  400b04:	4b1d      	ldr	r3, [pc, #116]	; (400b7c <xQueueGenericSend+0x1d8>)
  400b06:	4798      	blx	r3
  400b08:	b9e0      	cbnz	r0, 400b44 <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  400b0a:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  400b0c:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  400b10:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  400b12:	4b15      	ldr	r3, [pc, #84]	; (400b68 <xQueueGenericSend+0x1c4>)
  400b14:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  400b16:	45bb      	cmp	fp, r7
  400b18:	d1cc      	bne.n	400ab4 <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  400b1a:	9901      	ldr	r1, [sp, #4]
  400b1c:	f104 0010 	add.w	r0, r4, #16
  400b20:	4b17      	ldr	r3, [pc, #92]	; (400b80 <xQueueGenericSend+0x1dc>)
  400b22:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  400b24:	4620      	mov	r0, r4
  400b26:	4b12      	ldr	r3, [pc, #72]	; (400b70 <xQueueGenericSend+0x1cc>)
  400b28:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  400b2a:	4b12      	ldr	r3, [pc, #72]	; (400b74 <xQueueGenericSend+0x1d0>)
  400b2c:	4798      	blx	r3
  400b2e:	2800      	cmp	r0, #0
  400b30:	d1c5      	bne.n	400abe <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  400b32:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  400b36:	f8c9 3000 	str.w	r3, [r9]
  400b3a:	f3bf 8f4f 	dsb	sy
  400b3e:	f3bf 8f6f 	isb	sy
  400b42:	e7bc      	b.n	400abe <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  400b44:	4620      	mov	r0, r4
  400b46:	4b0a      	ldr	r3, [pc, #40]	; (400b70 <xQueueGenericSend+0x1cc>)
  400b48:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400b4a:	4b0a      	ldr	r3, [pc, #40]	; (400b74 <xQueueGenericSend+0x1d0>)
  400b4c:	4798      	blx	r3
			return errQUEUE_FULL;
  400b4e:	2000      	movs	r0, #0
  400b50:	e78d      	b.n	400a6e <xQueueGenericSend+0xca>
  400b52:	bf00      	nop
  400b54:	00401885 	.word	0x00401885
  400b58:	004003d1 	.word	0x004003d1
  400b5c:	004006b9 	.word	0x004006b9
  400b60:	00400741 	.word	0x00400741
  400b64:	e000ed04 	.word	0xe000ed04
  400b68:	0040041d 	.word	0x0040041d
  400b6c:	0040171d 	.word	0x0040171d
  400b70:	004007f1 	.word	0x004007f1
  400b74:	00401391 	.word	0x00401391
  400b78:	00401229 	.word	0x00401229
  400b7c:	004017e5 	.word	0x004017e5
  400b80:	00401619 	.word	0x00401619
  400b84:	004017b5 	.word	0x004017b5

00400b88 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  400b88:	2800      	cmp	r0, #0
  400b8a:	d036      	beq.n	400bfa <xQueueGenericSendFromISR+0x72>
{
  400b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400b90:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400b92:	2900      	cmp	r1, #0
  400b94:	d03c      	beq.n	400c10 <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400b96:	2b02      	cmp	r3, #2
  400b98:	d048      	beq.n	400c2c <xQueueGenericSendFromISR+0xa4>
  400b9a:	461e      	mov	r6, r3
  400b9c:	4615      	mov	r5, r2
  400b9e:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  400ba0:	4b35      	ldr	r3, [pc, #212]	; (400c78 <xQueueGenericSendFromISR+0xf0>)
  400ba2:	4798      	blx	r3
	__asm volatile
  400ba4:	f3ef 8711 	mrs	r7, BASEPRI
  400ba8:	f04f 0380 	mov.w	r3, #128	; 0x80
  400bac:	b672      	cpsid	i
  400bae:	f383 8811 	msr	BASEPRI, r3
  400bb2:	f3bf 8f6f 	isb	sy
  400bb6:	f3bf 8f4f 	dsb	sy
  400bba:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400bbc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400bbe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400bc0:	429a      	cmp	r2, r3
  400bc2:	d301      	bcc.n	400bc8 <xQueueGenericSendFromISR+0x40>
  400bc4:	2e02      	cmp	r6, #2
  400bc6:	d14f      	bne.n	400c68 <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400bc8:	4632      	mov	r2, r6
  400bca:	4641      	mov	r1, r8
  400bcc:	4620      	mov	r0, r4
  400bce:	4b2b      	ldr	r3, [pc, #172]	; (400c7c <xQueueGenericSendFromISR+0xf4>)
  400bd0:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  400bd2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
  400bd8:	d141      	bne.n	400c5e <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  400bda:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400bdc:	2b00      	cmp	r3, #0
  400bde:	d033      	beq.n	400c48 <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  400be0:	4631      	mov	r1, r6
  400be2:	4620      	mov	r0, r4
  400be4:	4b26      	ldr	r3, [pc, #152]	; (400c80 <xQueueGenericSendFromISR+0xf8>)
  400be6:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  400be8:	2d00      	cmp	r5, #0
  400bea:	d03f      	beq.n	400c6c <xQueueGenericSendFromISR+0xe4>
  400bec:	2801      	cmp	r0, #1
  400bee:	d13d      	bne.n	400c6c <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  400bf0:	6028      	str	r0, [r5, #0]
	__asm volatile
  400bf2:	f387 8811 	msr	BASEPRI, r7
}
  400bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  400bfa:	f04f 0380 	mov.w	r3, #128	; 0x80
  400bfe:	b672      	cpsid	i
  400c00:	f383 8811 	msr	BASEPRI, r3
  400c04:	f3bf 8f6f 	isb	sy
  400c08:	f3bf 8f4f 	dsb	sy
  400c0c:	b662      	cpsie	i
  400c0e:	e7fe      	b.n	400c0e <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400c10:	6c00      	ldr	r0, [r0, #64]	; 0x40
  400c12:	2800      	cmp	r0, #0
  400c14:	d0bf      	beq.n	400b96 <xQueueGenericSendFromISR+0xe>
  400c16:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c1a:	b672      	cpsid	i
  400c1c:	f383 8811 	msr	BASEPRI, r3
  400c20:	f3bf 8f6f 	isb	sy
  400c24:	f3bf 8f4f 	dsb	sy
  400c28:	b662      	cpsie	i
  400c2a:	e7fe      	b.n	400c2a <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400c2c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  400c2e:	2801      	cmp	r0, #1
  400c30:	d0b3      	beq.n	400b9a <xQueueGenericSendFromISR+0x12>
  400c32:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c36:	b672      	cpsid	i
  400c38:	f383 8811 	msr	BASEPRI, r3
  400c3c:	f3bf 8f6f 	isb	sy
  400c40:	f3bf 8f4f 	dsb	sy
  400c44:	b662      	cpsie	i
  400c46:	e7fe      	b.n	400c46 <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400c48:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400c4a:	b18b      	cbz	r3, 400c70 <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400c4c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400c50:	4b0c      	ldr	r3, [pc, #48]	; (400c84 <xQueueGenericSendFromISR+0xfc>)
  400c52:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  400c54:	b175      	cbz	r5, 400c74 <xQueueGenericSendFromISR+0xec>
  400c56:	b168      	cbz	r0, 400c74 <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  400c58:	2001      	movs	r0, #1
  400c5a:	6028      	str	r0, [r5, #0]
  400c5c:	e7c9      	b.n	400bf2 <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  400c5e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400c60:	3301      	adds	r3, #1
  400c62:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  400c64:	2001      	movs	r0, #1
  400c66:	e7c4      	b.n	400bf2 <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  400c68:	2000      	movs	r0, #0
  400c6a:	e7c2      	b.n	400bf2 <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  400c6c:	2001      	movs	r0, #1
  400c6e:	e7c0      	b.n	400bf2 <xQueueGenericSendFromISR+0x6a>
  400c70:	2001      	movs	r0, #1
  400c72:	e7be      	b.n	400bf2 <xQueueGenericSendFromISR+0x6a>
  400c74:	2001      	movs	r0, #1
  400c76:	e7bc      	b.n	400bf2 <xQueueGenericSendFromISR+0x6a>
  400c78:	004005c9 	.word	0x004005c9
  400c7c:	004006b9 	.word	0x004006b9
  400c80:	00400741 	.word	0x00400741
  400c84:	0040171d 	.word	0x0040171d

00400c88 <xQueueGenericReceive>:
{
  400c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400c8c:	b084      	sub	sp, #16
  400c8e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  400c90:	b198      	cbz	r0, 400cba <xQueueGenericReceive+0x32>
  400c92:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400c94:	b1e1      	cbz	r1, 400cd0 <xQueueGenericReceive+0x48>
  400c96:	4698      	mov	r8, r3
  400c98:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  400c9a:	4b61      	ldr	r3, [pc, #388]	; (400e20 <xQueueGenericReceive+0x198>)
  400c9c:	4798      	blx	r3
  400c9e:	bb28      	cbnz	r0, 400cec <xQueueGenericReceive+0x64>
  400ca0:	9b01      	ldr	r3, [sp, #4]
  400ca2:	b353      	cbz	r3, 400cfa <xQueueGenericReceive+0x72>
  400ca4:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ca8:	b672      	cpsid	i
  400caa:	f383 8811 	msr	BASEPRI, r3
  400cae:	f3bf 8f6f 	isb	sy
  400cb2:	f3bf 8f4f 	dsb	sy
  400cb6:	b662      	cpsie	i
  400cb8:	e7fe      	b.n	400cb8 <xQueueGenericReceive+0x30>
  400cba:	f04f 0380 	mov.w	r3, #128	; 0x80
  400cbe:	b672      	cpsid	i
  400cc0:	f383 8811 	msr	BASEPRI, r3
  400cc4:	f3bf 8f6f 	isb	sy
  400cc8:	f3bf 8f4f 	dsb	sy
  400ccc:	b662      	cpsie	i
  400cce:	e7fe      	b.n	400cce <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400cd0:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400cd2:	2a00      	cmp	r2, #0
  400cd4:	d0df      	beq.n	400c96 <xQueueGenericReceive+0xe>
  400cd6:	f04f 0380 	mov.w	r3, #128	; 0x80
  400cda:	b672      	cpsid	i
  400cdc:	f383 8811 	msr	BASEPRI, r3
  400ce0:	f3bf 8f6f 	isb	sy
  400ce4:	f3bf 8f4f 	dsb	sy
  400ce8:	b662      	cpsie	i
  400cea:	e7fe      	b.n	400cea <xQueueGenericReceive+0x62>
  400cec:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  400cee:	4d4d      	ldr	r5, [pc, #308]	; (400e24 <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  400cf0:	f8df a160 	ldr.w	sl, [pc, #352]	; 400e54 <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  400cf4:	f8df 913c 	ldr.w	r9, [pc, #316]	; 400e34 <xQueueGenericReceive+0x1ac>
  400cf8:	e04b      	b.n	400d92 <xQueueGenericReceive+0x10a>
  400cfa:	2600      	movs	r6, #0
  400cfc:	e7f7      	b.n	400cee <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  400cfe:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  400d00:	4639      	mov	r1, r7
  400d02:	4620      	mov	r0, r4
  400d04:	4b48      	ldr	r3, [pc, #288]	; (400e28 <xQueueGenericReceive+0x1a0>)
  400d06:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  400d08:	f1b8 0f00 	cmp.w	r8, #0
  400d0c:	d11d      	bne.n	400d4a <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  400d0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400d10:	3b01      	subs	r3, #1
  400d12:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400d14:	6823      	ldr	r3, [r4, #0]
  400d16:	b913      	cbnz	r3, 400d1e <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  400d18:	4b44      	ldr	r3, [pc, #272]	; (400e2c <xQueueGenericReceive+0x1a4>)
  400d1a:	4798      	blx	r3
  400d1c:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400d1e:	6923      	ldr	r3, [r4, #16]
  400d20:	b16b      	cbz	r3, 400d3e <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  400d22:	f104 0010 	add.w	r0, r4, #16
  400d26:	4b42      	ldr	r3, [pc, #264]	; (400e30 <xQueueGenericReceive+0x1a8>)
  400d28:	4798      	blx	r3
  400d2a:	2801      	cmp	r0, #1
  400d2c:	d107      	bne.n	400d3e <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  400d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400d32:	4b40      	ldr	r3, [pc, #256]	; (400e34 <xQueueGenericReceive+0x1ac>)
  400d34:	601a      	str	r2, [r3, #0]
  400d36:	f3bf 8f4f 	dsb	sy
  400d3a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  400d3e:	4b3e      	ldr	r3, [pc, #248]	; (400e38 <xQueueGenericReceive+0x1b0>)
  400d40:	4798      	blx	r3
				return pdPASS;
  400d42:	2001      	movs	r0, #1
}
  400d44:	b004      	add	sp, #16
  400d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  400d4a:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400d4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400d4e:	2b00      	cmp	r3, #0
  400d50:	d0f5      	beq.n	400d3e <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400d52:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400d56:	4b36      	ldr	r3, [pc, #216]	; (400e30 <xQueueGenericReceive+0x1a8>)
  400d58:	4798      	blx	r3
  400d5a:	2800      	cmp	r0, #0
  400d5c:	d0ef      	beq.n	400d3e <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  400d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400d62:	4b34      	ldr	r3, [pc, #208]	; (400e34 <xQueueGenericReceive+0x1ac>)
  400d64:	601a      	str	r2, [r3, #0]
  400d66:	f3bf 8f4f 	dsb	sy
  400d6a:	f3bf 8f6f 	isb	sy
  400d6e:	e7e6      	b.n	400d3e <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  400d70:	4b31      	ldr	r3, [pc, #196]	; (400e38 <xQueueGenericReceive+0x1b0>)
  400d72:	4798      	blx	r3
					return errQUEUE_EMPTY;
  400d74:	2000      	movs	r0, #0
  400d76:	e7e5      	b.n	400d44 <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  400d78:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  400d7a:	6860      	ldr	r0, [r4, #4]
  400d7c:	4b2f      	ldr	r3, [pc, #188]	; (400e3c <xQueueGenericReceive+0x1b4>)
  400d7e:	4798      	blx	r3
						taskEXIT_CRITICAL();
  400d80:	4b2d      	ldr	r3, [pc, #180]	; (400e38 <xQueueGenericReceive+0x1b0>)
  400d82:	4798      	blx	r3
  400d84:	e030      	b.n	400de8 <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  400d86:	4620      	mov	r0, r4
  400d88:	4b2d      	ldr	r3, [pc, #180]	; (400e40 <xQueueGenericReceive+0x1b8>)
  400d8a:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400d8c:	4b2d      	ldr	r3, [pc, #180]	; (400e44 <xQueueGenericReceive+0x1bc>)
  400d8e:	4798      	blx	r3
  400d90:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  400d92:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  400d94:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400d96:	2b00      	cmp	r3, #0
  400d98:	d1b1      	bne.n	400cfe <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  400d9a:	9b01      	ldr	r3, [sp, #4]
  400d9c:	2b00      	cmp	r3, #0
  400d9e:	d0e7      	beq.n	400d70 <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  400da0:	b90e      	cbnz	r6, 400da6 <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  400da2:	a802      	add	r0, sp, #8
  400da4:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  400da6:	4b24      	ldr	r3, [pc, #144]	; (400e38 <xQueueGenericReceive+0x1b0>)
  400da8:	4798      	blx	r3
		vTaskSuspendAll();
  400daa:	4b27      	ldr	r3, [pc, #156]	; (400e48 <xQueueGenericReceive+0x1c0>)
  400dac:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400dae:	47a8      	blx	r5
  400db0:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400db2:	f1b3 3fff 	cmp.w	r3, #4294967295
  400db6:	d101      	bne.n	400dbc <xQueueGenericReceive+0x134>
  400db8:	2300      	movs	r3, #0
  400dba:	6463      	str	r3, [r4, #68]	; 0x44
  400dbc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
  400dc2:	d101      	bne.n	400dc8 <xQueueGenericReceive+0x140>
  400dc4:	2300      	movs	r3, #0
  400dc6:	64a3      	str	r3, [r4, #72]	; 0x48
  400dc8:	4b1b      	ldr	r3, [pc, #108]	; (400e38 <xQueueGenericReceive+0x1b0>)
  400dca:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400dcc:	a901      	add	r1, sp, #4
  400dce:	a802      	add	r0, sp, #8
  400dd0:	4b1e      	ldr	r3, [pc, #120]	; (400e4c <xQueueGenericReceive+0x1c4>)
  400dd2:	4798      	blx	r3
  400dd4:	b9e8      	cbnz	r0, 400e12 <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  400dd6:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  400dd8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  400dda:	4b17      	ldr	r3, [pc, #92]	; (400e38 <xQueueGenericReceive+0x1b0>)
  400ddc:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  400dde:	2e00      	cmp	r6, #0
  400de0:	d1d1      	bne.n	400d86 <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400de2:	6823      	ldr	r3, [r4, #0]
  400de4:	2b00      	cmp	r3, #0
  400de6:	d0c7      	beq.n	400d78 <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  400de8:	9901      	ldr	r1, [sp, #4]
  400dea:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400dee:	4b18      	ldr	r3, [pc, #96]	; (400e50 <xQueueGenericReceive+0x1c8>)
  400df0:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  400df2:	4620      	mov	r0, r4
  400df4:	4b12      	ldr	r3, [pc, #72]	; (400e40 <xQueueGenericReceive+0x1b8>)
  400df6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  400df8:	4b12      	ldr	r3, [pc, #72]	; (400e44 <xQueueGenericReceive+0x1bc>)
  400dfa:	4798      	blx	r3
  400dfc:	2800      	cmp	r0, #0
  400dfe:	d1c7      	bne.n	400d90 <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  400e00:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  400e04:	f8c9 3000 	str.w	r3, [r9]
  400e08:	f3bf 8f4f 	dsb	sy
  400e0c:	f3bf 8f6f 	isb	sy
  400e10:	e7be      	b.n	400d90 <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  400e12:	4620      	mov	r0, r4
  400e14:	4b0a      	ldr	r3, [pc, #40]	; (400e40 <xQueueGenericReceive+0x1b8>)
  400e16:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400e18:	4b0a      	ldr	r3, [pc, #40]	; (400e44 <xQueueGenericReceive+0x1bc>)
  400e1a:	4798      	blx	r3
			return errQUEUE_EMPTY;
  400e1c:	2000      	movs	r0, #0
  400e1e:	e791      	b.n	400d44 <xQueueGenericReceive+0xbc>
  400e20:	00401885 	.word	0x00401885
  400e24:	004003d1 	.word	0x004003d1
  400e28:	004007c9 	.word	0x004007c9
  400e2c:	00401a05 	.word	0x00401a05
  400e30:	0040171d 	.word	0x0040171d
  400e34:	e000ed04 	.word	0xe000ed04
  400e38:	0040041d 	.word	0x0040041d
  400e3c:	004018a5 	.word	0x004018a5
  400e40:	004007f1 	.word	0x004007f1
  400e44:	00401391 	.word	0x00401391
  400e48:	00401229 	.word	0x00401229
  400e4c:	004017e5 	.word	0x004017e5
  400e50:	00401619 	.word	0x00401619
  400e54:	004017b5 	.word	0x004017b5

00400e58 <vQueueAddToRegistry>:
	{
  400e58:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  400e5a:	4b0b      	ldr	r3, [pc, #44]	; (400e88 <vQueueAddToRegistry+0x30>)
  400e5c:	681b      	ldr	r3, [r3, #0]
  400e5e:	b153      	cbz	r3, 400e76 <vQueueAddToRegistry+0x1e>
  400e60:	2301      	movs	r3, #1
  400e62:	4c09      	ldr	r4, [pc, #36]	; (400e88 <vQueueAddToRegistry+0x30>)
  400e64:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  400e68:	b132      	cbz	r2, 400e78 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  400e6a:	3301      	adds	r3, #1
  400e6c:	2b08      	cmp	r3, #8
  400e6e:	d1f9      	bne.n	400e64 <vQueueAddToRegistry+0xc>
	}
  400e70:	f85d 4b04 	ldr.w	r4, [sp], #4
  400e74:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  400e76:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  400e78:	4a03      	ldr	r2, [pc, #12]	; (400e88 <vQueueAddToRegistry+0x30>)
  400e7a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  400e7e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  400e82:	6058      	str	r0, [r3, #4]
				break;
  400e84:	e7f4      	b.n	400e70 <vQueueAddToRegistry+0x18>
  400e86:	bf00      	nop
  400e88:	2040c818 	.word	0x2040c818

00400e8c <vQueueWaitForMessageRestricted>:
	{
  400e8c:	b570      	push	{r4, r5, r6, lr}
  400e8e:	4604      	mov	r4, r0
  400e90:	460d      	mov	r5, r1
  400e92:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  400e94:	4b0f      	ldr	r3, [pc, #60]	; (400ed4 <vQueueWaitForMessageRestricted+0x48>)
  400e96:	4798      	blx	r3
  400e98:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
  400e9e:	d00b      	beq.n	400eb8 <vQueueWaitForMessageRestricted+0x2c>
  400ea0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
  400ea6:	d00a      	beq.n	400ebe <vQueueWaitForMessageRestricted+0x32>
  400ea8:	4b0b      	ldr	r3, [pc, #44]	; (400ed8 <vQueueWaitForMessageRestricted+0x4c>)
  400eaa:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  400eac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400eae:	b14b      	cbz	r3, 400ec4 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  400eb0:	4620      	mov	r0, r4
  400eb2:	4b0a      	ldr	r3, [pc, #40]	; (400edc <vQueueWaitForMessageRestricted+0x50>)
  400eb4:	4798      	blx	r3
  400eb6:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  400eb8:	2300      	movs	r3, #0
  400eba:	6463      	str	r3, [r4, #68]	; 0x44
  400ebc:	e7f0      	b.n	400ea0 <vQueueWaitForMessageRestricted+0x14>
  400ebe:	2300      	movs	r3, #0
  400ec0:	64a3      	str	r3, [r4, #72]	; 0x48
  400ec2:	e7f1      	b.n	400ea8 <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  400ec4:	4632      	mov	r2, r6
  400ec6:	4629      	mov	r1, r5
  400ec8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400ecc:	4b04      	ldr	r3, [pc, #16]	; (400ee0 <vQueueWaitForMessageRestricted+0x54>)
  400ece:	4798      	blx	r3
  400ed0:	e7ee      	b.n	400eb0 <vQueueWaitForMessageRestricted+0x24>
  400ed2:	bf00      	nop
  400ed4:	004003d1 	.word	0x004003d1
  400ed8:	0040041d 	.word	0x0040041d
  400edc:	004007f1 	.word	0x004007f1
  400ee0:	0040169d 	.word	0x0040169d

00400ee4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  400ee4:	4b08      	ldr	r3, [pc, #32]	; (400f08 <prvResetNextTaskUnblockTime+0x24>)
  400ee6:	681b      	ldr	r3, [r3, #0]
  400ee8:	681b      	ldr	r3, [r3, #0]
  400eea:	b13b      	cbz	r3, 400efc <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  400eec:	4b06      	ldr	r3, [pc, #24]	; (400f08 <prvResetNextTaskUnblockTime+0x24>)
  400eee:	681b      	ldr	r3, [r3, #0]
  400ef0:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  400ef2:	68db      	ldr	r3, [r3, #12]
  400ef4:	685a      	ldr	r2, [r3, #4]
  400ef6:	4b05      	ldr	r3, [pc, #20]	; (400f0c <prvResetNextTaskUnblockTime+0x28>)
  400ef8:	601a      	str	r2, [r3, #0]
  400efa:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  400efc:	f04f 32ff 	mov.w	r2, #4294967295
  400f00:	4b02      	ldr	r3, [pc, #8]	; (400f0c <prvResetNextTaskUnblockTime+0x28>)
  400f02:	601a      	str	r2, [r3, #0]
  400f04:	4770      	bx	lr
  400f06:	bf00      	nop
  400f08:	2040c1f8 	.word	0x2040c1f8
  400f0c:	2040c2a4 	.word	0x2040c2a4

00400f10 <prvAddCurrentTaskToDelayedList>:
{
  400f10:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  400f12:	4b0f      	ldr	r3, [pc, #60]	; (400f50 <prvAddCurrentTaskToDelayedList+0x40>)
  400f14:	681b      	ldr	r3, [r3, #0]
  400f16:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  400f18:	4b0e      	ldr	r3, [pc, #56]	; (400f54 <prvAddCurrentTaskToDelayedList+0x44>)
  400f1a:	681b      	ldr	r3, [r3, #0]
  400f1c:	4298      	cmp	r0, r3
  400f1e:	d30e      	bcc.n	400f3e <prvAddCurrentTaskToDelayedList+0x2e>
  400f20:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  400f22:	4b0d      	ldr	r3, [pc, #52]	; (400f58 <prvAddCurrentTaskToDelayedList+0x48>)
  400f24:	6818      	ldr	r0, [r3, #0]
  400f26:	4b0a      	ldr	r3, [pc, #40]	; (400f50 <prvAddCurrentTaskToDelayedList+0x40>)
  400f28:	6819      	ldr	r1, [r3, #0]
  400f2a:	3104      	adds	r1, #4
  400f2c:	4b0b      	ldr	r3, [pc, #44]	; (400f5c <prvAddCurrentTaskToDelayedList+0x4c>)
  400f2e:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  400f30:	4b0b      	ldr	r3, [pc, #44]	; (400f60 <prvAddCurrentTaskToDelayedList+0x50>)
  400f32:	681b      	ldr	r3, [r3, #0]
  400f34:	429c      	cmp	r4, r3
  400f36:	d201      	bcs.n	400f3c <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  400f38:	4b09      	ldr	r3, [pc, #36]	; (400f60 <prvAddCurrentTaskToDelayedList+0x50>)
  400f3a:	601c      	str	r4, [r3, #0]
  400f3c:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  400f3e:	4b09      	ldr	r3, [pc, #36]	; (400f64 <prvAddCurrentTaskToDelayedList+0x54>)
  400f40:	6818      	ldr	r0, [r3, #0]
  400f42:	4b03      	ldr	r3, [pc, #12]	; (400f50 <prvAddCurrentTaskToDelayedList+0x40>)
  400f44:	6819      	ldr	r1, [r3, #0]
  400f46:	3104      	adds	r1, #4
  400f48:	4b04      	ldr	r3, [pc, #16]	; (400f5c <prvAddCurrentTaskToDelayedList+0x4c>)
  400f4a:	4798      	blx	r3
  400f4c:	bd10      	pop	{r4, pc}
  400f4e:	bf00      	nop
  400f50:	2040c1f4 	.word	0x2040c1f4
  400f54:	2040c2ec 	.word	0x2040c2ec
  400f58:	2040c1f8 	.word	0x2040c1f8
  400f5c:	004002b9 	.word	0x004002b9
  400f60:	2040c2a4 	.word	0x2040c2a4
  400f64:	2040c1fc 	.word	0x2040c1fc

00400f68 <xTaskGenericCreate>:
{
  400f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400f6c:	b083      	sub	sp, #12
  400f6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  400f70:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  400f74:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  400f76:	b160      	cbz	r0, 400f92 <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  400f78:	2d04      	cmp	r5, #4
  400f7a:	d915      	bls.n	400fa8 <xTaskGenericCreate+0x40>
  400f7c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f80:	b672      	cpsid	i
  400f82:	f383 8811 	msr	BASEPRI, r3
  400f86:	f3bf 8f6f 	isb	sy
  400f8a:	f3bf 8f4f 	dsb	sy
  400f8e:	b662      	cpsie	i
  400f90:	e7fe      	b.n	400f90 <xTaskGenericCreate+0x28>
  400f92:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f96:	b672      	cpsid	i
  400f98:	f383 8811 	msr	BASEPRI, r3
  400f9c:	f3bf 8f6f 	isb	sy
  400fa0:	f3bf 8f4f 	dsb	sy
  400fa4:	b662      	cpsie	i
  400fa6:	e7fe      	b.n	400fa6 <xTaskGenericCreate+0x3e>
  400fa8:	9001      	str	r0, [sp, #4]
  400faa:	4698      	mov	r8, r3
  400fac:	4691      	mov	r9, r2
  400fae:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400fb0:	b936      	cbnz	r6, 400fc0 <xTaskGenericCreate+0x58>
  400fb2:	0090      	lsls	r0, r2, #2
  400fb4:	4b62      	ldr	r3, [pc, #392]	; (401140 <xTaskGenericCreate+0x1d8>)
  400fb6:	4798      	blx	r3
		if( pxStack != NULL )
  400fb8:	4606      	mov	r6, r0
  400fba:	2800      	cmp	r0, #0
  400fbc:	f000 809e 	beq.w	4010fc <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  400fc0:	2058      	movs	r0, #88	; 0x58
  400fc2:	4b5f      	ldr	r3, [pc, #380]	; (401140 <xTaskGenericCreate+0x1d8>)
  400fc4:	4798      	blx	r3
			if( pxNewTCB != NULL )
  400fc6:	4604      	mov	r4, r0
  400fc8:	2800      	cmp	r0, #0
  400fca:	f000 8094 	beq.w	4010f6 <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  400fce:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  400fd0:	ea4f 0289 	mov.w	r2, r9, lsl #2
  400fd4:	21a5      	movs	r1, #165	; 0xa5
  400fd6:	4630      	mov	r0, r6
  400fd8:	4b5a      	ldr	r3, [pc, #360]	; (401144 <xTaskGenericCreate+0x1dc>)
  400fda:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  400fdc:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  400fe0:	444e      	add	r6, r9
  400fe2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  400fe4:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  400fe8:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  400fec:	783b      	ldrb	r3, [r7, #0]
  400fee:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  400ff2:	783b      	ldrb	r3, [r7, #0]
  400ff4:	2b00      	cmp	r3, #0
  400ff6:	f040 8084 	bne.w	401102 <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  400ffa:	2700      	movs	r7, #0
  400ffc:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  401000:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  401002:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  401004:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  401006:	f104 0904 	add.w	r9, r4, #4
  40100a:	4648      	mov	r0, r9
  40100c:	f8df b184 	ldr.w	fp, [pc, #388]	; 401194 <xTaskGenericCreate+0x22c>
  401010:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  401012:	f104 0018 	add.w	r0, r4, #24
  401016:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  401018:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40101a:	f1c5 0305 	rsb	r3, r5, #5
  40101e:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  401020:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  401022:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  401024:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401028:	4642      	mov	r2, r8
  40102a:	9901      	ldr	r1, [sp, #4]
  40102c:	4630      	mov	r0, r6
  40102e:	4b46      	ldr	r3, [pc, #280]	; (401148 <xTaskGenericCreate+0x1e0>)
  401030:	4798      	blx	r3
  401032:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  401034:	f1ba 0f00 	cmp.w	sl, #0
  401038:	d001      	beq.n	40103e <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  40103a:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  40103e:	4b43      	ldr	r3, [pc, #268]	; (40114c <xTaskGenericCreate+0x1e4>)
  401040:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  401042:	4a43      	ldr	r2, [pc, #268]	; (401150 <xTaskGenericCreate+0x1e8>)
  401044:	6813      	ldr	r3, [r2, #0]
  401046:	3301      	adds	r3, #1
  401048:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  40104a:	4b42      	ldr	r3, [pc, #264]	; (401154 <xTaskGenericCreate+0x1ec>)
  40104c:	681b      	ldr	r3, [r3, #0]
  40104e:	2b00      	cmp	r3, #0
  401050:	d166      	bne.n	401120 <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  401052:	4b40      	ldr	r3, [pc, #256]	; (401154 <xTaskGenericCreate+0x1ec>)
  401054:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  401056:	6813      	ldr	r3, [r2, #0]
  401058:	2b01      	cmp	r3, #1
  40105a:	d121      	bne.n	4010a0 <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  40105c:	4f3e      	ldr	r7, [pc, #248]	; (401158 <xTaskGenericCreate+0x1f0>)
  40105e:	4638      	mov	r0, r7
  401060:	4e3e      	ldr	r6, [pc, #248]	; (40115c <xTaskGenericCreate+0x1f4>)
  401062:	47b0      	blx	r6
  401064:	f107 0014 	add.w	r0, r7, #20
  401068:	47b0      	blx	r6
  40106a:	f107 0028 	add.w	r0, r7, #40	; 0x28
  40106e:	47b0      	blx	r6
  401070:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  401074:	47b0      	blx	r6
  401076:	f107 0050 	add.w	r0, r7, #80	; 0x50
  40107a:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  40107c:	f8df 8118 	ldr.w	r8, [pc, #280]	; 401198 <xTaskGenericCreate+0x230>
  401080:	4640      	mov	r0, r8
  401082:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  401084:	4f36      	ldr	r7, [pc, #216]	; (401160 <xTaskGenericCreate+0x1f8>)
  401086:	4638      	mov	r0, r7
  401088:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  40108a:	4836      	ldr	r0, [pc, #216]	; (401164 <xTaskGenericCreate+0x1fc>)
  40108c:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  40108e:	4836      	ldr	r0, [pc, #216]	; (401168 <xTaskGenericCreate+0x200>)
  401090:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  401092:	4836      	ldr	r0, [pc, #216]	; (40116c <xTaskGenericCreate+0x204>)
  401094:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  401096:	4b36      	ldr	r3, [pc, #216]	; (401170 <xTaskGenericCreate+0x208>)
  401098:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  40109c:	4b35      	ldr	r3, [pc, #212]	; (401174 <xTaskGenericCreate+0x20c>)
  40109e:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  4010a0:	4a35      	ldr	r2, [pc, #212]	; (401178 <xTaskGenericCreate+0x210>)
  4010a2:	6813      	ldr	r3, [r2, #0]
  4010a4:	3301      	adds	r3, #1
  4010a6:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  4010a8:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  4010aa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4010ac:	4a33      	ldr	r2, [pc, #204]	; (40117c <xTaskGenericCreate+0x214>)
  4010ae:	6811      	ldr	r1, [r2, #0]
  4010b0:	2301      	movs	r3, #1
  4010b2:	4083      	lsls	r3, r0
  4010b4:	430b      	orrs	r3, r1
  4010b6:	6013      	str	r3, [r2, #0]
  4010b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4010bc:	4649      	mov	r1, r9
  4010be:	4b26      	ldr	r3, [pc, #152]	; (401158 <xTaskGenericCreate+0x1f0>)
  4010c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4010c4:	4b2e      	ldr	r3, [pc, #184]	; (401180 <xTaskGenericCreate+0x218>)
  4010c6:	4798      	blx	r3
		taskEXIT_CRITICAL();
  4010c8:	4b2e      	ldr	r3, [pc, #184]	; (401184 <xTaskGenericCreate+0x21c>)
  4010ca:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  4010cc:	4b2e      	ldr	r3, [pc, #184]	; (401188 <xTaskGenericCreate+0x220>)
  4010ce:	681b      	ldr	r3, [r3, #0]
  4010d0:	2b00      	cmp	r3, #0
  4010d2:	d031      	beq.n	401138 <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  4010d4:	4b1f      	ldr	r3, [pc, #124]	; (401154 <xTaskGenericCreate+0x1ec>)
  4010d6:	681b      	ldr	r3, [r3, #0]
  4010d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4010da:	429d      	cmp	r5, r3
  4010dc:	d92e      	bls.n	40113c <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  4010de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4010e2:	4b2a      	ldr	r3, [pc, #168]	; (40118c <xTaskGenericCreate+0x224>)
  4010e4:	601a      	str	r2, [r3, #0]
  4010e6:	f3bf 8f4f 	dsb	sy
  4010ea:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  4010ee:	2001      	movs	r0, #1
}
  4010f0:	b003      	add	sp, #12
  4010f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  4010f6:	4630      	mov	r0, r6
  4010f8:	4b25      	ldr	r3, [pc, #148]	; (401190 <xTaskGenericCreate+0x228>)
  4010fa:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  4010fc:	f04f 30ff 	mov.w	r0, #4294967295
  401100:	e7f6      	b.n	4010f0 <xTaskGenericCreate+0x188>
  401102:	463b      	mov	r3, r7
  401104:	f104 0234 	add.w	r2, r4, #52	; 0x34
  401108:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  40110a:	7859      	ldrb	r1, [r3, #1]
  40110c:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  401110:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  401114:	2900      	cmp	r1, #0
  401116:	f43f af70 	beq.w	400ffa <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  40111a:	42bb      	cmp	r3, r7
  40111c:	d1f5      	bne.n	40110a <xTaskGenericCreate+0x1a2>
  40111e:	e76c      	b.n	400ffa <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  401120:	4b19      	ldr	r3, [pc, #100]	; (401188 <xTaskGenericCreate+0x220>)
  401122:	681b      	ldr	r3, [r3, #0]
  401124:	2b00      	cmp	r3, #0
  401126:	d1bb      	bne.n	4010a0 <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  401128:	4b0a      	ldr	r3, [pc, #40]	; (401154 <xTaskGenericCreate+0x1ec>)
  40112a:	681b      	ldr	r3, [r3, #0]
  40112c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40112e:	429d      	cmp	r5, r3
  401130:	d3b6      	bcc.n	4010a0 <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  401132:	4b08      	ldr	r3, [pc, #32]	; (401154 <xTaskGenericCreate+0x1ec>)
  401134:	601c      	str	r4, [r3, #0]
  401136:	e7b3      	b.n	4010a0 <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  401138:	2001      	movs	r0, #1
  40113a:	e7d9      	b.n	4010f0 <xTaskGenericCreate+0x188>
  40113c:	2001      	movs	r0, #1
	return xReturn;
  40113e:	e7d7      	b.n	4010f0 <xTaskGenericCreate+0x188>
  401140:	0040062d 	.word	0x0040062d
  401144:	004047cd 	.word	0x004047cd
  401148:	00400385 	.word	0x00400385
  40114c:	004003d1 	.word	0x004003d1
  401150:	2040c264 	.word	0x2040c264
  401154:	2040c1f4 	.word	0x2040c1f4
  401158:	2040c200 	.word	0x2040c200
  40115c:	00400285 	.word	0x00400285
  401160:	2040c290 	.word	0x2040c290
  401164:	2040c2ac 	.word	0x2040c2ac
  401168:	2040c2d8 	.word	0x2040c2d8
  40116c:	2040c2c4 	.word	0x2040c2c4
  401170:	2040c1f8 	.word	0x2040c1f8
  401174:	2040c1fc 	.word	0x2040c1fc
  401178:	2040c270 	.word	0x2040c270
  40117c:	2040c278 	.word	0x2040c278
  401180:	004002a1 	.word	0x004002a1
  401184:	0040041d 	.word	0x0040041d
  401188:	2040c2c0 	.word	0x2040c2c0
  40118c:	e000ed04 	.word	0xe000ed04
  401190:	0040069d 	.word	0x0040069d
  401194:	0040029b 	.word	0x0040029b
  401198:	2040c27c 	.word	0x2040c27c

0040119c <vTaskStartScheduler>:
{
  40119c:	b510      	push	{r4, lr}
  40119e:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  4011a0:	2300      	movs	r3, #0
  4011a2:	9303      	str	r3, [sp, #12]
  4011a4:	9302      	str	r3, [sp, #8]
  4011a6:	9301      	str	r3, [sp, #4]
  4011a8:	9300      	str	r3, [sp, #0]
  4011aa:	2282      	movs	r2, #130	; 0x82
  4011ac:	4916      	ldr	r1, [pc, #88]	; (401208 <vTaskStartScheduler+0x6c>)
  4011ae:	4817      	ldr	r0, [pc, #92]	; (40120c <vTaskStartScheduler+0x70>)
  4011b0:	4c17      	ldr	r4, [pc, #92]	; (401210 <vTaskStartScheduler+0x74>)
  4011b2:	47a0      	blx	r4
		if( xReturn == pdPASS )
  4011b4:	2801      	cmp	r0, #1
  4011b6:	d00b      	beq.n	4011d0 <vTaskStartScheduler+0x34>
		configASSERT( xReturn );
  4011b8:	bb20      	cbnz	r0, 401204 <vTaskStartScheduler+0x68>
  4011ba:	f04f 0380 	mov.w	r3, #128	; 0x80
  4011be:	b672      	cpsid	i
  4011c0:	f383 8811 	msr	BASEPRI, r3
  4011c4:	f3bf 8f6f 	isb	sy
  4011c8:	f3bf 8f4f 	dsb	sy
  4011cc:	b662      	cpsie	i
  4011ce:	e7fe      	b.n	4011ce <vTaskStartScheduler+0x32>
			xReturn = xTimerCreateTimerTask();
  4011d0:	4b10      	ldr	r3, [pc, #64]	; (401214 <vTaskStartScheduler+0x78>)
  4011d2:	4798      	blx	r3
	if( xReturn == pdPASS )
  4011d4:	2801      	cmp	r0, #1
  4011d6:	d1ef      	bne.n	4011b8 <vTaskStartScheduler+0x1c>
  4011d8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4011dc:	b672      	cpsid	i
  4011de:	f383 8811 	msr	BASEPRI, r3
  4011e2:	f3bf 8f6f 	isb	sy
  4011e6:	f3bf 8f4f 	dsb	sy
  4011ea:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  4011ec:	f04f 32ff 	mov.w	r2, #4294967295
  4011f0:	4b09      	ldr	r3, [pc, #36]	; (401218 <vTaskStartScheduler+0x7c>)
  4011f2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  4011f4:	2201      	movs	r2, #1
  4011f6:	4b09      	ldr	r3, [pc, #36]	; (40121c <vTaskStartScheduler+0x80>)
  4011f8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  4011fa:	2200      	movs	r2, #0
  4011fc:	4b08      	ldr	r3, [pc, #32]	; (401220 <vTaskStartScheduler+0x84>)
  4011fe:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  401200:	4b08      	ldr	r3, [pc, #32]	; (401224 <vTaskStartScheduler+0x88>)
  401202:	4798      	blx	r3
}
  401204:	b004      	add	sp, #16
  401206:	bd10      	pop	{r4, pc}
  401208:	0040a608 	.word	0x0040a608
  40120c:	004014b1 	.word	0x004014b1
  401210:	00400f69 	.word	0x00400f69
  401214:	00401af1 	.word	0x00401af1
  401218:	2040c2a4 	.word	0x2040c2a4
  40121c:	2040c2c0 	.word	0x2040c2c0
  401220:	2040c2ec 	.word	0x2040c2ec
  401224:	00400505 	.word	0x00400505

00401228 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  401228:	4a02      	ldr	r2, [pc, #8]	; (401234 <vTaskSuspendAll+0xc>)
  40122a:	6813      	ldr	r3, [r2, #0]
  40122c:	3301      	adds	r3, #1
  40122e:	6013      	str	r3, [r2, #0]
  401230:	4770      	bx	lr
  401232:	bf00      	nop
  401234:	2040c26c 	.word	0x2040c26c

00401238 <xTaskGetTickCount>:
		xTicks = xTickCount;
  401238:	4b01      	ldr	r3, [pc, #4]	; (401240 <xTaskGetTickCount+0x8>)
  40123a:	6818      	ldr	r0, [r3, #0]
}
  40123c:	4770      	bx	lr
  40123e:	bf00      	nop
  401240:	2040c2ec 	.word	0x2040c2ec

00401244 <xTaskIncrementTick>:
{
  401244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401248:	4b42      	ldr	r3, [pc, #264]	; (401354 <xTaskIncrementTick+0x110>)
  40124a:	681b      	ldr	r3, [r3, #0]
  40124c:	2b00      	cmp	r3, #0
  40124e:	d178      	bne.n	401342 <xTaskIncrementTick+0xfe>
		++xTickCount;
  401250:	4b41      	ldr	r3, [pc, #260]	; (401358 <xTaskIncrementTick+0x114>)
  401252:	681a      	ldr	r2, [r3, #0]
  401254:	3201      	adds	r2, #1
  401256:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  401258:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  40125a:	b9d6      	cbnz	r6, 401292 <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  40125c:	4b3f      	ldr	r3, [pc, #252]	; (40135c <xTaskIncrementTick+0x118>)
  40125e:	681b      	ldr	r3, [r3, #0]
  401260:	681b      	ldr	r3, [r3, #0]
  401262:	b153      	cbz	r3, 40127a <xTaskIncrementTick+0x36>
  401264:	f04f 0380 	mov.w	r3, #128	; 0x80
  401268:	b672      	cpsid	i
  40126a:	f383 8811 	msr	BASEPRI, r3
  40126e:	f3bf 8f6f 	isb	sy
  401272:	f3bf 8f4f 	dsb	sy
  401276:	b662      	cpsie	i
  401278:	e7fe      	b.n	401278 <xTaskIncrementTick+0x34>
  40127a:	4a38      	ldr	r2, [pc, #224]	; (40135c <xTaskIncrementTick+0x118>)
  40127c:	6811      	ldr	r1, [r2, #0]
  40127e:	4b38      	ldr	r3, [pc, #224]	; (401360 <xTaskIncrementTick+0x11c>)
  401280:	6818      	ldr	r0, [r3, #0]
  401282:	6010      	str	r0, [r2, #0]
  401284:	6019      	str	r1, [r3, #0]
  401286:	4a37      	ldr	r2, [pc, #220]	; (401364 <xTaskIncrementTick+0x120>)
  401288:	6813      	ldr	r3, [r2, #0]
  40128a:	3301      	adds	r3, #1
  40128c:	6013      	str	r3, [r2, #0]
  40128e:	4b36      	ldr	r3, [pc, #216]	; (401368 <xTaskIncrementTick+0x124>)
  401290:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  401292:	4b36      	ldr	r3, [pc, #216]	; (40136c <xTaskIncrementTick+0x128>)
  401294:	681b      	ldr	r3, [r3, #0]
  401296:	429e      	cmp	r6, r3
  401298:	d218      	bcs.n	4012cc <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  40129a:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  40129c:	4b34      	ldr	r3, [pc, #208]	; (401370 <xTaskIncrementTick+0x12c>)
  40129e:	681b      	ldr	r3, [r3, #0]
  4012a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4012a2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4012a6:	4a33      	ldr	r2, [pc, #204]	; (401374 <xTaskIncrementTick+0x130>)
  4012a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  4012ac:	2b02      	cmp	r3, #2
  4012ae:	bf28      	it	cs
  4012b0:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  4012b2:	4b31      	ldr	r3, [pc, #196]	; (401378 <xTaskIncrementTick+0x134>)
  4012b4:	681b      	ldr	r3, [r3, #0]
  4012b6:	b90b      	cbnz	r3, 4012bc <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  4012b8:	4b30      	ldr	r3, [pc, #192]	; (40137c <xTaskIncrementTick+0x138>)
  4012ba:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  4012bc:	4b30      	ldr	r3, [pc, #192]	; (401380 <xTaskIncrementTick+0x13c>)
  4012be:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  4012c0:	2b00      	cmp	r3, #0
}
  4012c2:	bf0c      	ite	eq
  4012c4:	4620      	moveq	r0, r4
  4012c6:	2001      	movne	r0, #1
  4012c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4012cc:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4012ce:	f8df 908c 	ldr.w	r9, [pc, #140]	; 40135c <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4012d2:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 40138c <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  4012d6:	4f2b      	ldr	r7, [pc, #172]	; (401384 <xTaskIncrementTick+0x140>)
  4012d8:	e01f      	b.n	40131a <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  4012da:	f04f 32ff 	mov.w	r2, #4294967295
  4012de:	4b23      	ldr	r3, [pc, #140]	; (40136c <xTaskIncrementTick+0x128>)
  4012e0:	601a      	str	r2, [r3, #0]
						break;
  4012e2:	e7db      	b.n	40129c <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  4012e4:	4a21      	ldr	r2, [pc, #132]	; (40136c <xTaskIncrementTick+0x128>)
  4012e6:	6013      	str	r3, [r2, #0]
							break;
  4012e8:	e7d8      	b.n	40129c <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4012ea:	f105 0018 	add.w	r0, r5, #24
  4012ee:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  4012f0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  4012f2:	683a      	ldr	r2, [r7, #0]
  4012f4:	2301      	movs	r3, #1
  4012f6:	4083      	lsls	r3, r0
  4012f8:	4313      	orrs	r3, r2
  4012fa:	603b      	str	r3, [r7, #0]
  4012fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401300:	4651      	mov	r1, sl
  401302:	4b1c      	ldr	r3, [pc, #112]	; (401374 <xTaskIncrementTick+0x130>)
  401304:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401308:	4b1f      	ldr	r3, [pc, #124]	; (401388 <xTaskIncrementTick+0x144>)
  40130a:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40130c:	4b18      	ldr	r3, [pc, #96]	; (401370 <xTaskIncrementTick+0x12c>)
  40130e:	681b      	ldr	r3, [r3, #0]
  401310:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  401312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  401314:	429a      	cmp	r2, r3
  401316:	bf28      	it	cs
  401318:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40131a:	f8d9 3000 	ldr.w	r3, [r9]
  40131e:	681b      	ldr	r3, [r3, #0]
  401320:	2b00      	cmp	r3, #0
  401322:	d0da      	beq.n	4012da <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401324:	f8d9 3000 	ldr.w	r3, [r9]
  401328:	68db      	ldr	r3, [r3, #12]
  40132a:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  40132c:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  40132e:	429e      	cmp	r6, r3
  401330:	d3d8      	bcc.n	4012e4 <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401332:	f105 0a04 	add.w	sl, r5, #4
  401336:	4650      	mov	r0, sl
  401338:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  40133a:	6aab      	ldr	r3, [r5, #40]	; 0x28
  40133c:	2b00      	cmp	r3, #0
  40133e:	d1d4      	bne.n	4012ea <xTaskIncrementTick+0xa6>
  401340:	e7d6      	b.n	4012f0 <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  401342:	4a0d      	ldr	r2, [pc, #52]	; (401378 <xTaskIncrementTick+0x134>)
  401344:	6813      	ldr	r3, [r2, #0]
  401346:	3301      	adds	r3, #1
  401348:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  40134a:	4b0c      	ldr	r3, [pc, #48]	; (40137c <xTaskIncrementTick+0x138>)
  40134c:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  40134e:	2400      	movs	r4, #0
  401350:	e7b4      	b.n	4012bc <xTaskIncrementTick+0x78>
  401352:	bf00      	nop
  401354:	2040c26c 	.word	0x2040c26c
  401358:	2040c2ec 	.word	0x2040c2ec
  40135c:	2040c1f8 	.word	0x2040c1f8
  401360:	2040c1fc 	.word	0x2040c1fc
  401364:	2040c2a8 	.word	0x2040c2a8
  401368:	00400ee5 	.word	0x00400ee5
  40136c:	2040c2a4 	.word	0x2040c2a4
  401370:	2040c1f4 	.word	0x2040c1f4
  401374:	2040c200 	.word	0x2040c200
  401378:	2040c268 	.word	0x2040c268
  40137c:	00403c91 	.word	0x00403c91
  401380:	2040c2f0 	.word	0x2040c2f0
  401384:	2040c278 	.word	0x2040c278
  401388:	004002a1 	.word	0x004002a1
  40138c:	004002ed 	.word	0x004002ed

00401390 <xTaskResumeAll>:
{
  401390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  401394:	4b38      	ldr	r3, [pc, #224]	; (401478 <xTaskResumeAll+0xe8>)
  401396:	681b      	ldr	r3, [r3, #0]
  401398:	b953      	cbnz	r3, 4013b0 <xTaskResumeAll+0x20>
  40139a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40139e:	b672      	cpsid	i
  4013a0:	f383 8811 	msr	BASEPRI, r3
  4013a4:	f3bf 8f6f 	isb	sy
  4013a8:	f3bf 8f4f 	dsb	sy
  4013ac:	b662      	cpsie	i
  4013ae:	e7fe      	b.n	4013ae <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  4013b0:	4b32      	ldr	r3, [pc, #200]	; (40147c <xTaskResumeAll+0xec>)
  4013b2:	4798      	blx	r3
		--uxSchedulerSuspended;
  4013b4:	4b30      	ldr	r3, [pc, #192]	; (401478 <xTaskResumeAll+0xe8>)
  4013b6:	681a      	ldr	r2, [r3, #0]
  4013b8:	3a01      	subs	r2, #1
  4013ba:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4013bc:	681b      	ldr	r3, [r3, #0]
  4013be:	2b00      	cmp	r3, #0
  4013c0:	d155      	bne.n	40146e <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  4013c2:	4b2f      	ldr	r3, [pc, #188]	; (401480 <xTaskResumeAll+0xf0>)
  4013c4:	681b      	ldr	r3, [r3, #0]
  4013c6:	2b00      	cmp	r3, #0
  4013c8:	d132      	bne.n	401430 <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  4013ca:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  4013cc:	4b2d      	ldr	r3, [pc, #180]	; (401484 <xTaskResumeAll+0xf4>)
  4013ce:	4798      	blx	r3
}
  4013d0:	4620      	mov	r0, r4
  4013d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  4013d6:	68fb      	ldr	r3, [r7, #12]
  4013d8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4013da:	f104 0018 	add.w	r0, r4, #24
  4013de:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4013e0:	f104 0804 	add.w	r8, r4, #4
  4013e4:	4640      	mov	r0, r8
  4013e6:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  4013e8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4013ea:	682a      	ldr	r2, [r5, #0]
  4013ec:	2301      	movs	r3, #1
  4013ee:	4083      	lsls	r3, r0
  4013f0:	4313      	orrs	r3, r2
  4013f2:	602b      	str	r3, [r5, #0]
  4013f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4013f8:	4641      	mov	r1, r8
  4013fa:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  4013fe:	4b22      	ldr	r3, [pc, #136]	; (401488 <xTaskResumeAll+0xf8>)
  401400:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401402:	4b22      	ldr	r3, [pc, #136]	; (40148c <xTaskResumeAll+0xfc>)
  401404:	681b      	ldr	r3, [r3, #0]
  401406:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40140a:	429a      	cmp	r2, r3
  40140c:	d20c      	bcs.n	401428 <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  40140e:	683b      	ldr	r3, [r7, #0]
  401410:	2b00      	cmp	r3, #0
  401412:	d1e0      	bne.n	4013d6 <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  401414:	4b1e      	ldr	r3, [pc, #120]	; (401490 <xTaskResumeAll+0x100>)
  401416:	681b      	ldr	r3, [r3, #0]
  401418:	b1db      	cbz	r3, 401452 <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  40141a:	4b1d      	ldr	r3, [pc, #116]	; (401490 <xTaskResumeAll+0x100>)
  40141c:	681b      	ldr	r3, [r3, #0]
  40141e:	b1c3      	cbz	r3, 401452 <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  401420:	4e1c      	ldr	r6, [pc, #112]	; (401494 <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  401422:	4d1d      	ldr	r5, [pc, #116]	; (401498 <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  401424:	4c1a      	ldr	r4, [pc, #104]	; (401490 <xTaskResumeAll+0x100>)
  401426:	e00e      	b.n	401446 <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  401428:	2201      	movs	r2, #1
  40142a:	4b1b      	ldr	r3, [pc, #108]	; (401498 <xTaskResumeAll+0x108>)
  40142c:	601a      	str	r2, [r3, #0]
  40142e:	e7ee      	b.n	40140e <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401430:	4f1a      	ldr	r7, [pc, #104]	; (40149c <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401432:	4e1b      	ldr	r6, [pc, #108]	; (4014a0 <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  401434:	4d1b      	ldr	r5, [pc, #108]	; (4014a4 <xTaskResumeAll+0x114>)
  401436:	f8df 9074 	ldr.w	r9, [pc, #116]	; 4014ac <xTaskResumeAll+0x11c>
  40143a:	e7e8      	b.n	40140e <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  40143c:	6823      	ldr	r3, [r4, #0]
  40143e:	3b01      	subs	r3, #1
  401440:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401442:	6823      	ldr	r3, [r4, #0]
  401444:	b12b      	cbz	r3, 401452 <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  401446:	47b0      	blx	r6
  401448:	2800      	cmp	r0, #0
  40144a:	d0f7      	beq.n	40143c <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  40144c:	2301      	movs	r3, #1
  40144e:	602b      	str	r3, [r5, #0]
  401450:	e7f4      	b.n	40143c <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  401452:	4b11      	ldr	r3, [pc, #68]	; (401498 <xTaskResumeAll+0x108>)
  401454:	681b      	ldr	r3, [r3, #0]
  401456:	2b01      	cmp	r3, #1
  401458:	d10b      	bne.n	401472 <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  40145a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40145e:	4b12      	ldr	r3, [pc, #72]	; (4014a8 <xTaskResumeAll+0x118>)
  401460:	601a      	str	r2, [r3, #0]
  401462:	f3bf 8f4f 	dsb	sy
  401466:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  40146a:	2401      	movs	r4, #1
  40146c:	e7ae      	b.n	4013cc <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  40146e:	2400      	movs	r4, #0
  401470:	e7ac      	b.n	4013cc <xTaskResumeAll+0x3c>
  401472:	2400      	movs	r4, #0
  401474:	e7aa      	b.n	4013cc <xTaskResumeAll+0x3c>
  401476:	bf00      	nop
  401478:	2040c26c 	.word	0x2040c26c
  40147c:	004003d1 	.word	0x004003d1
  401480:	2040c264 	.word	0x2040c264
  401484:	0040041d 	.word	0x0040041d
  401488:	004002a1 	.word	0x004002a1
  40148c:	2040c1f4 	.word	0x2040c1f4
  401490:	2040c268 	.word	0x2040c268
  401494:	00401245 	.word	0x00401245
  401498:	2040c2f0 	.word	0x2040c2f0
  40149c:	2040c2ac 	.word	0x2040c2ac
  4014a0:	004002ed 	.word	0x004002ed
  4014a4:	2040c278 	.word	0x2040c278
  4014a8:	e000ed04 	.word	0xe000ed04
  4014ac:	2040c200 	.word	0x2040c200

004014b0 <prvIdleTask>:
{
  4014b0:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  4014b2:	f8df 8088 	ldr.w	r8, [pc, #136]	; 40153c <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4014b6:	4e19      	ldr	r6, [pc, #100]	; (40151c <prvIdleTask+0x6c>)
				taskYIELD();
  4014b8:	f8df 9084 	ldr.w	r9, [pc, #132]	; 401540 <prvIdleTask+0x90>
  4014bc:	e02a      	b.n	401514 <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  4014be:	4b18      	ldr	r3, [pc, #96]	; (401520 <prvIdleTask+0x70>)
  4014c0:	681b      	ldr	r3, [r3, #0]
  4014c2:	2b01      	cmp	r3, #1
  4014c4:	d81e      	bhi.n	401504 <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  4014c6:	682b      	ldr	r3, [r5, #0]
  4014c8:	2b00      	cmp	r3, #0
  4014ca:	d0f8      	beq.n	4014be <prvIdleTask+0xe>
			vTaskSuspendAll();
  4014cc:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4014ce:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  4014d0:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  4014d2:	2c00      	cmp	r4, #0
  4014d4:	d0f7      	beq.n	4014c6 <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  4014d6:	4b13      	ldr	r3, [pc, #76]	; (401524 <prvIdleTask+0x74>)
  4014d8:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  4014da:	68f3      	ldr	r3, [r6, #12]
  4014dc:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4014de:	1d20      	adds	r0, r4, #4
  4014e0:	4b11      	ldr	r3, [pc, #68]	; (401528 <prvIdleTask+0x78>)
  4014e2:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  4014e4:	4a11      	ldr	r2, [pc, #68]	; (40152c <prvIdleTask+0x7c>)
  4014e6:	6813      	ldr	r3, [r2, #0]
  4014e8:	3b01      	subs	r3, #1
  4014ea:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  4014ec:	682b      	ldr	r3, [r5, #0]
  4014ee:	3b01      	subs	r3, #1
  4014f0:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  4014f2:	4b0f      	ldr	r3, [pc, #60]	; (401530 <prvIdleTask+0x80>)
  4014f4:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  4014f6:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4014f8:	f8df a048 	ldr.w	sl, [pc, #72]	; 401544 <prvIdleTask+0x94>
  4014fc:	47d0      	blx	sl
		vPortFree( pxTCB );
  4014fe:	4620      	mov	r0, r4
  401500:	47d0      	blx	sl
  401502:	e7e0      	b.n	4014c6 <prvIdleTask+0x16>
				taskYIELD();
  401504:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401508:	f8c9 3000 	str.w	r3, [r9]
  40150c:	f3bf 8f4f 	dsb	sy
  401510:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  401514:	4d07      	ldr	r5, [pc, #28]	; (401534 <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  401516:	4f08      	ldr	r7, [pc, #32]	; (401538 <prvIdleTask+0x88>)
  401518:	e7d5      	b.n	4014c6 <prvIdleTask+0x16>
  40151a:	bf00      	nop
  40151c:	2040c2d8 	.word	0x2040c2d8
  401520:	2040c200 	.word	0x2040c200
  401524:	004003d1 	.word	0x004003d1
  401528:	004002ed 	.word	0x004002ed
  40152c:	2040c264 	.word	0x2040c264
  401530:	0040041d 	.word	0x0040041d
  401534:	2040c274 	.word	0x2040c274
  401538:	00401391 	.word	0x00401391
  40153c:	00401229 	.word	0x00401229
  401540:	e000ed04 	.word	0xe000ed04
  401544:	0040069d 	.word	0x0040069d

00401548 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  401548:	4b2d      	ldr	r3, [pc, #180]	; (401600 <vTaskSwitchContext+0xb8>)
  40154a:	681b      	ldr	r3, [r3, #0]
  40154c:	2b00      	cmp	r3, #0
  40154e:	d12c      	bne.n	4015aa <vTaskSwitchContext+0x62>
{
  401550:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  401552:	2200      	movs	r2, #0
  401554:	4b2b      	ldr	r3, [pc, #172]	; (401604 <vTaskSwitchContext+0xbc>)
  401556:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  401558:	4b2b      	ldr	r3, [pc, #172]	; (401608 <vTaskSwitchContext+0xc0>)
  40155a:	681b      	ldr	r3, [r3, #0]
  40155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40155e:	681a      	ldr	r2, [r3, #0]
  401560:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401564:	d103      	bne.n	40156e <vTaskSwitchContext+0x26>
  401566:	685a      	ldr	r2, [r3, #4]
  401568:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  40156c:	d021      	beq.n	4015b2 <vTaskSwitchContext+0x6a>
  40156e:	4b26      	ldr	r3, [pc, #152]	; (401608 <vTaskSwitchContext+0xc0>)
  401570:	6818      	ldr	r0, [r3, #0]
  401572:	6819      	ldr	r1, [r3, #0]
  401574:	3134      	adds	r1, #52	; 0x34
  401576:	4b25      	ldr	r3, [pc, #148]	; (40160c <vTaskSwitchContext+0xc4>)
  401578:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  40157a:	4b25      	ldr	r3, [pc, #148]	; (401610 <vTaskSwitchContext+0xc8>)
  40157c:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  40157e:	fab3 f383 	clz	r3, r3
  401582:	b2db      	uxtb	r3, r3
  401584:	f1c3 031f 	rsb	r3, r3, #31
  401588:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  40158c:	4a21      	ldr	r2, [pc, #132]	; (401614 <vTaskSwitchContext+0xcc>)
  40158e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  401592:	b9ba      	cbnz	r2, 4015c4 <vTaskSwitchContext+0x7c>
	__asm volatile
  401594:	f04f 0380 	mov.w	r3, #128	; 0x80
  401598:	b672      	cpsid	i
  40159a:	f383 8811 	msr	BASEPRI, r3
  40159e:	f3bf 8f6f 	isb	sy
  4015a2:	f3bf 8f4f 	dsb	sy
  4015a6:	b662      	cpsie	i
  4015a8:	e7fe      	b.n	4015a8 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  4015aa:	2201      	movs	r2, #1
  4015ac:	4b15      	ldr	r3, [pc, #84]	; (401604 <vTaskSwitchContext+0xbc>)
  4015ae:	601a      	str	r2, [r3, #0]
  4015b0:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  4015b2:	689a      	ldr	r2, [r3, #8]
  4015b4:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4015b8:	d1d9      	bne.n	40156e <vTaskSwitchContext+0x26>
  4015ba:	68db      	ldr	r3, [r3, #12]
  4015bc:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  4015c0:	d1d5      	bne.n	40156e <vTaskSwitchContext+0x26>
  4015c2:	e7da      	b.n	40157a <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4015c4:	4a13      	ldr	r2, [pc, #76]	; (401614 <vTaskSwitchContext+0xcc>)
  4015c6:	0099      	lsls	r1, r3, #2
  4015c8:	18c8      	adds	r0, r1, r3
  4015ca:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  4015ce:	6844      	ldr	r4, [r0, #4]
  4015d0:	6864      	ldr	r4, [r4, #4]
  4015d2:	6044      	str	r4, [r0, #4]
  4015d4:	4419      	add	r1, r3
  4015d6:	4602      	mov	r2, r0
  4015d8:	3208      	adds	r2, #8
  4015da:	4294      	cmp	r4, r2
  4015dc:	d009      	beq.n	4015f2 <vTaskSwitchContext+0xaa>
  4015de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4015e2:	4a0c      	ldr	r2, [pc, #48]	; (401614 <vTaskSwitchContext+0xcc>)
  4015e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4015e8:	685b      	ldr	r3, [r3, #4]
  4015ea:	68da      	ldr	r2, [r3, #12]
  4015ec:	4b06      	ldr	r3, [pc, #24]	; (401608 <vTaskSwitchContext+0xc0>)
  4015ee:	601a      	str	r2, [r3, #0]
  4015f0:	bd10      	pop	{r4, pc}
  4015f2:	6860      	ldr	r0, [r4, #4]
  4015f4:	4a07      	ldr	r2, [pc, #28]	; (401614 <vTaskSwitchContext+0xcc>)
  4015f6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  4015fa:	6050      	str	r0, [r2, #4]
  4015fc:	e7ef      	b.n	4015de <vTaskSwitchContext+0x96>
  4015fe:	bf00      	nop
  401600:	2040c26c 	.word	0x2040c26c
  401604:	2040c2f0 	.word	0x2040c2f0
  401608:	2040c1f4 	.word	0x2040c1f4
  40160c:	00403c79 	.word	0x00403c79
  401610:	2040c278 	.word	0x2040c278
  401614:	2040c200 	.word	0x2040c200

00401618 <vTaskPlaceOnEventList>:
{
  401618:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  40161a:	b1e0      	cbz	r0, 401656 <vTaskPlaceOnEventList+0x3e>
  40161c:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  40161e:	4d17      	ldr	r5, [pc, #92]	; (40167c <vTaskPlaceOnEventList+0x64>)
  401620:	6829      	ldr	r1, [r5, #0]
  401622:	3118      	adds	r1, #24
  401624:	4b16      	ldr	r3, [pc, #88]	; (401680 <vTaskPlaceOnEventList+0x68>)
  401626:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401628:	6828      	ldr	r0, [r5, #0]
  40162a:	3004      	adds	r0, #4
  40162c:	4b15      	ldr	r3, [pc, #84]	; (401684 <vTaskPlaceOnEventList+0x6c>)
  40162e:	4798      	blx	r3
  401630:	b940      	cbnz	r0, 401644 <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401632:	682a      	ldr	r2, [r5, #0]
  401634:	4914      	ldr	r1, [pc, #80]	; (401688 <vTaskPlaceOnEventList+0x70>)
  401636:	680b      	ldr	r3, [r1, #0]
  401638:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  40163a:	2201      	movs	r2, #1
  40163c:	4082      	lsls	r2, r0
  40163e:	ea23 0302 	bic.w	r3, r3, r2
  401642:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  401644:	f1b4 3fff 	cmp.w	r4, #4294967295
  401648:	d010      	beq.n	40166c <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  40164a:	4b10      	ldr	r3, [pc, #64]	; (40168c <vTaskPlaceOnEventList+0x74>)
  40164c:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  40164e:	4420      	add	r0, r4
  401650:	4b0f      	ldr	r3, [pc, #60]	; (401690 <vTaskPlaceOnEventList+0x78>)
  401652:	4798      	blx	r3
  401654:	bd38      	pop	{r3, r4, r5, pc}
  401656:	f04f 0380 	mov.w	r3, #128	; 0x80
  40165a:	b672      	cpsid	i
  40165c:	f383 8811 	msr	BASEPRI, r3
  401660:	f3bf 8f6f 	isb	sy
  401664:	f3bf 8f4f 	dsb	sy
  401668:	b662      	cpsie	i
  40166a:	e7fe      	b.n	40166a <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40166c:	4b03      	ldr	r3, [pc, #12]	; (40167c <vTaskPlaceOnEventList+0x64>)
  40166e:	6819      	ldr	r1, [r3, #0]
  401670:	3104      	adds	r1, #4
  401672:	4808      	ldr	r0, [pc, #32]	; (401694 <vTaskPlaceOnEventList+0x7c>)
  401674:	4b08      	ldr	r3, [pc, #32]	; (401698 <vTaskPlaceOnEventList+0x80>)
  401676:	4798      	blx	r3
  401678:	bd38      	pop	{r3, r4, r5, pc}
  40167a:	bf00      	nop
  40167c:	2040c1f4 	.word	0x2040c1f4
  401680:	004002b9 	.word	0x004002b9
  401684:	004002ed 	.word	0x004002ed
  401688:	2040c278 	.word	0x2040c278
  40168c:	2040c2ec 	.word	0x2040c2ec
  401690:	00400f11 	.word	0x00400f11
  401694:	2040c2c4 	.word	0x2040c2c4
  401698:	004002a1 	.word	0x004002a1

0040169c <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  40169c:	b1e8      	cbz	r0, 4016da <vTaskPlaceOnEventListRestricted+0x3e>
	{
  40169e:	b570      	push	{r4, r5, r6, lr}
  4016a0:	4615      	mov	r5, r2
  4016a2:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4016a4:	4e16      	ldr	r6, [pc, #88]	; (401700 <vTaskPlaceOnEventListRestricted+0x64>)
  4016a6:	6831      	ldr	r1, [r6, #0]
  4016a8:	3118      	adds	r1, #24
  4016aa:	4b16      	ldr	r3, [pc, #88]	; (401704 <vTaskPlaceOnEventListRestricted+0x68>)
  4016ac:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4016ae:	6830      	ldr	r0, [r6, #0]
  4016b0:	3004      	adds	r0, #4
  4016b2:	4b15      	ldr	r3, [pc, #84]	; (401708 <vTaskPlaceOnEventListRestricted+0x6c>)
  4016b4:	4798      	blx	r3
  4016b6:	b940      	cbnz	r0, 4016ca <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4016b8:	6832      	ldr	r2, [r6, #0]
  4016ba:	4914      	ldr	r1, [pc, #80]	; (40170c <vTaskPlaceOnEventListRestricted+0x70>)
  4016bc:	680b      	ldr	r3, [r1, #0]
  4016be:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4016c0:	2201      	movs	r2, #1
  4016c2:	4082      	lsls	r2, r0
  4016c4:	ea23 0302 	bic.w	r3, r3, r2
  4016c8:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  4016ca:	2d01      	cmp	r5, #1
  4016cc:	d010      	beq.n	4016f0 <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  4016ce:	4b10      	ldr	r3, [pc, #64]	; (401710 <vTaskPlaceOnEventListRestricted+0x74>)
  4016d0:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4016d2:	4420      	add	r0, r4
  4016d4:	4b0f      	ldr	r3, [pc, #60]	; (401714 <vTaskPlaceOnEventListRestricted+0x78>)
  4016d6:	4798      	blx	r3
  4016d8:	bd70      	pop	{r4, r5, r6, pc}
  4016da:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016de:	b672      	cpsid	i
  4016e0:	f383 8811 	msr	BASEPRI, r3
  4016e4:	f3bf 8f6f 	isb	sy
  4016e8:	f3bf 8f4f 	dsb	sy
  4016ec:	b662      	cpsie	i
  4016ee:	e7fe      	b.n	4016ee <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4016f0:	4b03      	ldr	r3, [pc, #12]	; (401700 <vTaskPlaceOnEventListRestricted+0x64>)
  4016f2:	6819      	ldr	r1, [r3, #0]
  4016f4:	3104      	adds	r1, #4
  4016f6:	4808      	ldr	r0, [pc, #32]	; (401718 <vTaskPlaceOnEventListRestricted+0x7c>)
  4016f8:	4b02      	ldr	r3, [pc, #8]	; (401704 <vTaskPlaceOnEventListRestricted+0x68>)
  4016fa:	4798      	blx	r3
  4016fc:	bd70      	pop	{r4, r5, r6, pc}
  4016fe:	bf00      	nop
  401700:	2040c1f4 	.word	0x2040c1f4
  401704:	004002a1 	.word	0x004002a1
  401708:	004002ed 	.word	0x004002ed
  40170c:	2040c278 	.word	0x2040c278
  401710:	2040c2ec 	.word	0x2040c2ec
  401714:	00400f11 	.word	0x00400f11
  401718:	2040c2c4 	.word	0x2040c2c4

0040171c <xTaskRemoveFromEventList>:
{
  40171c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  40171e:	68c3      	ldr	r3, [r0, #12]
  401720:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  401722:	b324      	cbz	r4, 40176e <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  401724:	f104 0518 	add.w	r5, r4, #24
  401728:	4628      	mov	r0, r5
  40172a:	4b1a      	ldr	r3, [pc, #104]	; (401794 <xTaskRemoveFromEventList+0x78>)
  40172c:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40172e:	4b1a      	ldr	r3, [pc, #104]	; (401798 <xTaskRemoveFromEventList+0x7c>)
  401730:	681b      	ldr	r3, [r3, #0]
  401732:	bb3b      	cbnz	r3, 401784 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  401734:	1d25      	adds	r5, r4, #4
  401736:	4628      	mov	r0, r5
  401738:	4b16      	ldr	r3, [pc, #88]	; (401794 <xTaskRemoveFromEventList+0x78>)
  40173a:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  40173c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40173e:	4a17      	ldr	r2, [pc, #92]	; (40179c <xTaskRemoveFromEventList+0x80>)
  401740:	6811      	ldr	r1, [r2, #0]
  401742:	2301      	movs	r3, #1
  401744:	4083      	lsls	r3, r0
  401746:	430b      	orrs	r3, r1
  401748:	6013      	str	r3, [r2, #0]
  40174a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40174e:	4629      	mov	r1, r5
  401750:	4b13      	ldr	r3, [pc, #76]	; (4017a0 <xTaskRemoveFromEventList+0x84>)
  401752:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401756:	4b13      	ldr	r3, [pc, #76]	; (4017a4 <xTaskRemoveFromEventList+0x88>)
  401758:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  40175a:	4b13      	ldr	r3, [pc, #76]	; (4017a8 <xTaskRemoveFromEventList+0x8c>)
  40175c:	681b      	ldr	r3, [r3, #0]
  40175e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401762:	429a      	cmp	r2, r3
  401764:	d913      	bls.n	40178e <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  401766:	2001      	movs	r0, #1
  401768:	4b10      	ldr	r3, [pc, #64]	; (4017ac <xTaskRemoveFromEventList+0x90>)
  40176a:	6018      	str	r0, [r3, #0]
  40176c:	bd38      	pop	{r3, r4, r5, pc}
  40176e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401772:	b672      	cpsid	i
  401774:	f383 8811 	msr	BASEPRI, r3
  401778:	f3bf 8f6f 	isb	sy
  40177c:	f3bf 8f4f 	dsb	sy
  401780:	b662      	cpsie	i
  401782:	e7fe      	b.n	401782 <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  401784:	4629      	mov	r1, r5
  401786:	480a      	ldr	r0, [pc, #40]	; (4017b0 <xTaskRemoveFromEventList+0x94>)
  401788:	4b06      	ldr	r3, [pc, #24]	; (4017a4 <xTaskRemoveFromEventList+0x88>)
  40178a:	4798      	blx	r3
  40178c:	e7e5      	b.n	40175a <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  40178e:	2000      	movs	r0, #0
}
  401790:	bd38      	pop	{r3, r4, r5, pc}
  401792:	bf00      	nop
  401794:	004002ed 	.word	0x004002ed
  401798:	2040c26c 	.word	0x2040c26c
  40179c:	2040c278 	.word	0x2040c278
  4017a0:	2040c200 	.word	0x2040c200
  4017a4:	004002a1 	.word	0x004002a1
  4017a8:	2040c1f4 	.word	0x2040c1f4
  4017ac:	2040c2f0 	.word	0x2040c2f0
  4017b0:	2040c2ac 	.word	0x2040c2ac

004017b4 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  4017b4:	b130      	cbz	r0, 4017c4 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  4017b6:	4a09      	ldr	r2, [pc, #36]	; (4017dc <vTaskSetTimeOutState+0x28>)
  4017b8:	6812      	ldr	r2, [r2, #0]
  4017ba:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  4017bc:	4a08      	ldr	r2, [pc, #32]	; (4017e0 <vTaskSetTimeOutState+0x2c>)
  4017be:	6812      	ldr	r2, [r2, #0]
  4017c0:	6042      	str	r2, [r0, #4]
  4017c2:	4770      	bx	lr
  4017c4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017c8:	b672      	cpsid	i
  4017ca:	f383 8811 	msr	BASEPRI, r3
  4017ce:	f3bf 8f6f 	isb	sy
  4017d2:	f3bf 8f4f 	dsb	sy
  4017d6:	b662      	cpsie	i
  4017d8:	e7fe      	b.n	4017d8 <vTaskSetTimeOutState+0x24>
  4017da:	bf00      	nop
  4017dc:	2040c2a8 	.word	0x2040c2a8
  4017e0:	2040c2ec 	.word	0x2040c2ec

004017e4 <xTaskCheckForTimeOut>:
{
  4017e4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  4017e6:	b1c0      	cbz	r0, 40181a <xTaskCheckForTimeOut+0x36>
  4017e8:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  4017ea:	b309      	cbz	r1, 401830 <xTaskCheckForTimeOut+0x4c>
  4017ec:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  4017ee:	4b1d      	ldr	r3, [pc, #116]	; (401864 <xTaskCheckForTimeOut+0x80>)
  4017f0:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  4017f2:	4b1d      	ldr	r3, [pc, #116]	; (401868 <xTaskCheckForTimeOut+0x84>)
  4017f4:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  4017f6:	682b      	ldr	r3, [r5, #0]
  4017f8:	f1b3 3fff 	cmp.w	r3, #4294967295
  4017fc:	d02e      	beq.n	40185c <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  4017fe:	491b      	ldr	r1, [pc, #108]	; (40186c <xTaskCheckForTimeOut+0x88>)
  401800:	6809      	ldr	r1, [r1, #0]
  401802:	6820      	ldr	r0, [r4, #0]
  401804:	4288      	cmp	r0, r1
  401806:	d002      	beq.n	40180e <xTaskCheckForTimeOut+0x2a>
  401808:	6861      	ldr	r1, [r4, #4]
  40180a:	428a      	cmp	r2, r1
  40180c:	d228      	bcs.n	401860 <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  40180e:	6861      	ldr	r1, [r4, #4]
  401810:	1a50      	subs	r0, r2, r1
  401812:	4283      	cmp	r3, r0
  401814:	d817      	bhi.n	401846 <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  401816:	2401      	movs	r4, #1
  401818:	e01c      	b.n	401854 <xTaskCheckForTimeOut+0x70>
  40181a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40181e:	b672      	cpsid	i
  401820:	f383 8811 	msr	BASEPRI, r3
  401824:	f3bf 8f6f 	isb	sy
  401828:	f3bf 8f4f 	dsb	sy
  40182c:	b662      	cpsie	i
  40182e:	e7fe      	b.n	40182e <xTaskCheckForTimeOut+0x4a>
  401830:	f04f 0380 	mov.w	r3, #128	; 0x80
  401834:	b672      	cpsid	i
  401836:	f383 8811 	msr	BASEPRI, r3
  40183a:	f3bf 8f6f 	isb	sy
  40183e:	f3bf 8f4f 	dsb	sy
  401842:	b662      	cpsie	i
  401844:	e7fe      	b.n	401844 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  401846:	1a9b      	subs	r3, r3, r2
  401848:	440b      	add	r3, r1
  40184a:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  40184c:	4620      	mov	r0, r4
  40184e:	4b08      	ldr	r3, [pc, #32]	; (401870 <xTaskCheckForTimeOut+0x8c>)
  401850:	4798      	blx	r3
			xReturn = pdFALSE;
  401852:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  401854:	4b07      	ldr	r3, [pc, #28]	; (401874 <xTaskCheckForTimeOut+0x90>)
  401856:	4798      	blx	r3
}
  401858:	4620      	mov	r0, r4
  40185a:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  40185c:	2400      	movs	r4, #0
  40185e:	e7f9      	b.n	401854 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  401860:	2401      	movs	r4, #1
  401862:	e7f7      	b.n	401854 <xTaskCheckForTimeOut+0x70>
  401864:	004003d1 	.word	0x004003d1
  401868:	2040c2ec 	.word	0x2040c2ec
  40186c:	2040c2a8 	.word	0x2040c2a8
  401870:	004017b5 	.word	0x004017b5
  401874:	0040041d 	.word	0x0040041d

00401878 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  401878:	2201      	movs	r2, #1
  40187a:	4b01      	ldr	r3, [pc, #4]	; (401880 <vTaskMissedYield+0x8>)
  40187c:	601a      	str	r2, [r3, #0]
  40187e:	4770      	bx	lr
  401880:	2040c2f0 	.word	0x2040c2f0

00401884 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  401884:	4b05      	ldr	r3, [pc, #20]	; (40189c <xTaskGetSchedulerState+0x18>)
  401886:	681b      	ldr	r3, [r3, #0]
  401888:	b133      	cbz	r3, 401898 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40188a:	4b05      	ldr	r3, [pc, #20]	; (4018a0 <xTaskGetSchedulerState+0x1c>)
  40188c:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  40188e:	2b00      	cmp	r3, #0
  401890:	bf0c      	ite	eq
  401892:	2002      	moveq	r0, #2
  401894:	2000      	movne	r0, #0
  401896:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  401898:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  40189a:	4770      	bx	lr
  40189c:	2040c2c0 	.word	0x2040c2c0
  4018a0:	2040c26c 	.word	0x2040c26c

004018a4 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  4018a4:	2800      	cmp	r0, #0
  4018a6:	d044      	beq.n	401932 <vTaskPriorityInherit+0x8e>
	{
  4018a8:	b538      	push	{r3, r4, r5, lr}
  4018aa:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  4018ac:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  4018ae:	4921      	ldr	r1, [pc, #132]	; (401934 <vTaskPriorityInherit+0x90>)
  4018b0:	6809      	ldr	r1, [r1, #0]
  4018b2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  4018b4:	428a      	cmp	r2, r1
  4018b6:	d214      	bcs.n	4018e2 <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  4018b8:	6981      	ldr	r1, [r0, #24]
  4018ba:	2900      	cmp	r1, #0
  4018bc:	db05      	blt.n	4018ca <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4018be:	491d      	ldr	r1, [pc, #116]	; (401934 <vTaskPriorityInherit+0x90>)
  4018c0:	6809      	ldr	r1, [r1, #0]
  4018c2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  4018c4:	f1c1 0105 	rsb	r1, r1, #5
  4018c8:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  4018ca:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4018ce:	491a      	ldr	r1, [pc, #104]	; (401938 <vTaskPriorityInherit+0x94>)
  4018d0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  4018d4:	6961      	ldr	r1, [r4, #20]
  4018d6:	4291      	cmp	r1, r2
  4018d8:	d004      	beq.n	4018e4 <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4018da:	4a16      	ldr	r2, [pc, #88]	; (401934 <vTaskPriorityInherit+0x90>)
  4018dc:	6812      	ldr	r2, [r2, #0]
  4018de:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  4018e0:	62e2      	str	r2, [r4, #44]	; 0x2c
  4018e2:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4018e4:	1d25      	adds	r5, r4, #4
  4018e6:	4628      	mov	r0, r5
  4018e8:	4b14      	ldr	r3, [pc, #80]	; (40193c <vTaskPriorityInherit+0x98>)
  4018ea:	4798      	blx	r3
  4018ec:	b970      	cbnz	r0, 40190c <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4018ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4018f0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4018f4:	4a10      	ldr	r2, [pc, #64]	; (401938 <vTaskPriorityInherit+0x94>)
  4018f6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4018fa:	b93a      	cbnz	r2, 40190c <vTaskPriorityInherit+0x68>
  4018fc:	4810      	ldr	r0, [pc, #64]	; (401940 <vTaskPriorityInherit+0x9c>)
  4018fe:	6802      	ldr	r2, [r0, #0]
  401900:	2101      	movs	r1, #1
  401902:	fa01 f303 	lsl.w	r3, r1, r3
  401906:	ea22 0303 	bic.w	r3, r2, r3
  40190a:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  40190c:	4b09      	ldr	r3, [pc, #36]	; (401934 <vTaskPriorityInherit+0x90>)
  40190e:	681b      	ldr	r3, [r3, #0]
  401910:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  401912:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  401914:	4a0a      	ldr	r2, [pc, #40]	; (401940 <vTaskPriorityInherit+0x9c>)
  401916:	6811      	ldr	r1, [r2, #0]
  401918:	2301      	movs	r3, #1
  40191a:	4083      	lsls	r3, r0
  40191c:	430b      	orrs	r3, r1
  40191e:	6013      	str	r3, [r2, #0]
  401920:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401924:	4629      	mov	r1, r5
  401926:	4b04      	ldr	r3, [pc, #16]	; (401938 <vTaskPriorityInherit+0x94>)
  401928:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40192c:	4b05      	ldr	r3, [pc, #20]	; (401944 <vTaskPriorityInherit+0xa0>)
  40192e:	4798      	blx	r3
  401930:	bd38      	pop	{r3, r4, r5, pc}
  401932:	4770      	bx	lr
  401934:	2040c1f4 	.word	0x2040c1f4
  401938:	2040c200 	.word	0x2040c200
  40193c:	004002ed 	.word	0x004002ed
  401940:	2040c278 	.word	0x2040c278
  401944:	004002a1 	.word	0x004002a1

00401948 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  401948:	2800      	cmp	r0, #0
  40194a:	d04d      	beq.n	4019e8 <xTaskPriorityDisinherit+0xa0>
	{
  40194c:	b538      	push	{r3, r4, r5, lr}
  40194e:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  401950:	4a27      	ldr	r2, [pc, #156]	; (4019f0 <xTaskPriorityDisinherit+0xa8>)
  401952:	6812      	ldr	r2, [r2, #0]
  401954:	4290      	cmp	r0, r2
  401956:	d00a      	beq.n	40196e <xTaskPriorityDisinherit+0x26>
  401958:	f04f 0380 	mov.w	r3, #128	; 0x80
  40195c:	b672      	cpsid	i
  40195e:	f383 8811 	msr	BASEPRI, r3
  401962:	f3bf 8f6f 	isb	sy
  401966:	f3bf 8f4f 	dsb	sy
  40196a:	b662      	cpsie	i
  40196c:	e7fe      	b.n	40196c <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  40196e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  401970:	b952      	cbnz	r2, 401988 <xTaskPriorityDisinherit+0x40>
  401972:	f04f 0380 	mov.w	r3, #128	; 0x80
  401976:	b672      	cpsid	i
  401978:	f383 8811 	msr	BASEPRI, r3
  40197c:	f3bf 8f6f 	isb	sy
  401980:	f3bf 8f4f 	dsb	sy
  401984:	b662      	cpsie	i
  401986:	e7fe      	b.n	401986 <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  401988:	3a01      	subs	r2, #1
  40198a:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  40198c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  40198e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  401990:	4288      	cmp	r0, r1
  401992:	d02b      	beq.n	4019ec <xTaskPriorityDisinherit+0xa4>
  401994:	bb52      	cbnz	r2, 4019ec <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401996:	1d25      	adds	r5, r4, #4
  401998:	4628      	mov	r0, r5
  40199a:	4b16      	ldr	r3, [pc, #88]	; (4019f4 <xTaskPriorityDisinherit+0xac>)
  40199c:	4798      	blx	r3
  40199e:	b968      	cbnz	r0, 4019bc <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4019a0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  4019a2:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4019a6:	4b14      	ldr	r3, [pc, #80]	; (4019f8 <xTaskPriorityDisinherit+0xb0>)
  4019a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4019ac:	b933      	cbnz	r3, 4019bc <xTaskPriorityDisinherit+0x74>
  4019ae:	4813      	ldr	r0, [pc, #76]	; (4019fc <xTaskPriorityDisinherit+0xb4>)
  4019b0:	6803      	ldr	r3, [r0, #0]
  4019b2:	2201      	movs	r2, #1
  4019b4:	408a      	lsls	r2, r1
  4019b6:	ea23 0302 	bic.w	r3, r3, r2
  4019ba:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  4019bc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  4019be:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4019c0:	f1c0 0305 	rsb	r3, r0, #5
  4019c4:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  4019c6:	4a0d      	ldr	r2, [pc, #52]	; (4019fc <xTaskPriorityDisinherit+0xb4>)
  4019c8:	6811      	ldr	r1, [r2, #0]
  4019ca:	2401      	movs	r4, #1
  4019cc:	fa04 f300 	lsl.w	r3, r4, r0
  4019d0:	430b      	orrs	r3, r1
  4019d2:	6013      	str	r3, [r2, #0]
  4019d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4019d8:	4629      	mov	r1, r5
  4019da:	4b07      	ldr	r3, [pc, #28]	; (4019f8 <xTaskPriorityDisinherit+0xb0>)
  4019dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4019e0:	4b07      	ldr	r3, [pc, #28]	; (401a00 <xTaskPriorityDisinherit+0xb8>)
  4019e2:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  4019e4:	4620      	mov	r0, r4
  4019e6:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  4019e8:	2000      	movs	r0, #0
  4019ea:	4770      	bx	lr
  4019ec:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  4019ee:	bd38      	pop	{r3, r4, r5, pc}
  4019f0:	2040c1f4 	.word	0x2040c1f4
  4019f4:	004002ed 	.word	0x004002ed
  4019f8:	2040c200 	.word	0x2040c200
  4019fc:	2040c278 	.word	0x2040c278
  401a00:	004002a1 	.word	0x004002a1

00401a04 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  401a04:	4b05      	ldr	r3, [pc, #20]	; (401a1c <pvTaskIncrementMutexHeldCount+0x18>)
  401a06:	681b      	ldr	r3, [r3, #0]
  401a08:	b123      	cbz	r3, 401a14 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  401a0a:	4b04      	ldr	r3, [pc, #16]	; (401a1c <pvTaskIncrementMutexHeldCount+0x18>)
  401a0c:	681a      	ldr	r2, [r3, #0]
  401a0e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  401a10:	3301      	adds	r3, #1
  401a12:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  401a14:	4b01      	ldr	r3, [pc, #4]	; (401a1c <pvTaskIncrementMutexHeldCount+0x18>)
  401a16:	6818      	ldr	r0, [r3, #0]
	}
  401a18:	4770      	bx	lr
  401a1a:	bf00      	nop
  401a1c:	2040c1f4 	.word	0x2040c1f4

00401a20 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  401a20:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  401a22:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401a24:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  401a26:	4291      	cmp	r1, r2
  401a28:	d80c      	bhi.n	401a44 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  401a2a:	1ad2      	subs	r2, r2, r3
  401a2c:	6983      	ldr	r3, [r0, #24]
  401a2e:	429a      	cmp	r2, r3
  401a30:	d301      	bcc.n	401a36 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  401a32:	2001      	movs	r0, #1
  401a34:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  401a36:	1d01      	adds	r1, r0, #4
  401a38:	4b09      	ldr	r3, [pc, #36]	; (401a60 <prvInsertTimerInActiveList+0x40>)
  401a3a:	6818      	ldr	r0, [r3, #0]
  401a3c:	4b09      	ldr	r3, [pc, #36]	; (401a64 <prvInsertTimerInActiveList+0x44>)
  401a3e:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  401a40:	2000      	movs	r0, #0
  401a42:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  401a44:	429a      	cmp	r2, r3
  401a46:	d203      	bcs.n	401a50 <prvInsertTimerInActiveList+0x30>
  401a48:	4299      	cmp	r1, r3
  401a4a:	d301      	bcc.n	401a50 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  401a4c:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  401a4e:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401a50:	1d01      	adds	r1, r0, #4
  401a52:	4b05      	ldr	r3, [pc, #20]	; (401a68 <prvInsertTimerInActiveList+0x48>)
  401a54:	6818      	ldr	r0, [r3, #0]
  401a56:	4b03      	ldr	r3, [pc, #12]	; (401a64 <prvInsertTimerInActiveList+0x44>)
  401a58:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  401a5a:	2000      	movs	r0, #0
  401a5c:	bd08      	pop	{r3, pc}
  401a5e:	bf00      	nop
  401a60:	2040c2f8 	.word	0x2040c2f8
  401a64:	004002b9 	.word	0x004002b9
  401a68:	2040c2f4 	.word	0x2040c2f4

00401a6c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  401a6c:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  401a6e:	4b15      	ldr	r3, [pc, #84]	; (401ac4 <prvCheckForValidListAndQueue+0x58>)
  401a70:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  401a72:	4b15      	ldr	r3, [pc, #84]	; (401ac8 <prvCheckForValidListAndQueue+0x5c>)
  401a74:	681b      	ldr	r3, [r3, #0]
  401a76:	b113      	cbz	r3, 401a7e <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  401a78:	4b14      	ldr	r3, [pc, #80]	; (401acc <prvCheckForValidListAndQueue+0x60>)
  401a7a:	4798      	blx	r3
  401a7c:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  401a7e:	4d14      	ldr	r5, [pc, #80]	; (401ad0 <prvCheckForValidListAndQueue+0x64>)
  401a80:	4628      	mov	r0, r5
  401a82:	4e14      	ldr	r6, [pc, #80]	; (401ad4 <prvCheckForValidListAndQueue+0x68>)
  401a84:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  401a86:	4c14      	ldr	r4, [pc, #80]	; (401ad8 <prvCheckForValidListAndQueue+0x6c>)
  401a88:	4620      	mov	r0, r4
  401a8a:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  401a8c:	4b13      	ldr	r3, [pc, #76]	; (401adc <prvCheckForValidListAndQueue+0x70>)
  401a8e:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  401a90:	4b13      	ldr	r3, [pc, #76]	; (401ae0 <prvCheckForValidListAndQueue+0x74>)
  401a92:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  401a94:	2200      	movs	r2, #0
  401a96:	2110      	movs	r1, #16
  401a98:	2005      	movs	r0, #5
  401a9a:	4b12      	ldr	r3, [pc, #72]	; (401ae4 <prvCheckForValidListAndQueue+0x78>)
  401a9c:	4798      	blx	r3
  401a9e:	4b0a      	ldr	r3, [pc, #40]	; (401ac8 <prvCheckForValidListAndQueue+0x5c>)
  401aa0:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  401aa2:	b118      	cbz	r0, 401aac <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  401aa4:	4910      	ldr	r1, [pc, #64]	; (401ae8 <prvCheckForValidListAndQueue+0x7c>)
  401aa6:	4b11      	ldr	r3, [pc, #68]	; (401aec <prvCheckForValidListAndQueue+0x80>)
  401aa8:	4798      	blx	r3
  401aaa:	e7e5      	b.n	401a78 <prvCheckForValidListAndQueue+0xc>
  401aac:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ab0:	b672      	cpsid	i
  401ab2:	f383 8811 	msr	BASEPRI, r3
  401ab6:	f3bf 8f6f 	isb	sy
  401aba:	f3bf 8f4f 	dsb	sy
  401abe:	b662      	cpsie	i
  401ac0:	e7fe      	b.n	401ac0 <prvCheckForValidListAndQueue+0x54>
  401ac2:	bf00      	nop
  401ac4:	004003d1 	.word	0x004003d1
  401ac8:	2040c328 	.word	0x2040c328
  401acc:	0040041d 	.word	0x0040041d
  401ad0:	2040c2fc 	.word	0x2040c2fc
  401ad4:	00400285 	.word	0x00400285
  401ad8:	2040c310 	.word	0x2040c310
  401adc:	2040c2f4 	.word	0x2040c2f4
  401ae0:	2040c2f8 	.word	0x2040c2f8
  401ae4:	00400929 	.word	0x00400929
  401ae8:	0040a610 	.word	0x0040a610
  401aec:	00400e59 	.word	0x00400e59

00401af0 <xTimerCreateTimerTask>:
{
  401af0:	b510      	push	{r4, lr}
  401af2:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  401af4:	4b0f      	ldr	r3, [pc, #60]	; (401b34 <xTimerCreateTimerTask+0x44>)
  401af6:	4798      	blx	r3
	if( xTimerQueue != NULL )
  401af8:	4b0f      	ldr	r3, [pc, #60]	; (401b38 <xTimerCreateTimerTask+0x48>)
  401afa:	681b      	ldr	r3, [r3, #0]
  401afc:	b173      	cbz	r3, 401b1c <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  401afe:	2300      	movs	r3, #0
  401b00:	9303      	str	r3, [sp, #12]
  401b02:	9302      	str	r3, [sp, #8]
  401b04:	9301      	str	r3, [sp, #4]
  401b06:	2204      	movs	r2, #4
  401b08:	9200      	str	r2, [sp, #0]
  401b0a:	f44f 7282 	mov.w	r2, #260	; 0x104
  401b0e:	490b      	ldr	r1, [pc, #44]	; (401b3c <xTimerCreateTimerTask+0x4c>)
  401b10:	480b      	ldr	r0, [pc, #44]	; (401b40 <xTimerCreateTimerTask+0x50>)
  401b12:	4c0c      	ldr	r4, [pc, #48]	; (401b44 <xTimerCreateTimerTask+0x54>)
  401b14:	47a0      	blx	r4
	configASSERT( xReturn );
  401b16:	b108      	cbz	r0, 401b1c <xTimerCreateTimerTask+0x2c>
}
  401b18:	b004      	add	sp, #16
  401b1a:	bd10      	pop	{r4, pc}
  401b1c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b20:	b672      	cpsid	i
  401b22:	f383 8811 	msr	BASEPRI, r3
  401b26:	f3bf 8f6f 	isb	sy
  401b2a:	f3bf 8f4f 	dsb	sy
  401b2e:	b662      	cpsie	i
  401b30:	e7fe      	b.n	401b30 <xTimerCreateTimerTask+0x40>
  401b32:	bf00      	nop
  401b34:	00401a6d 	.word	0x00401a6d
  401b38:	2040c328 	.word	0x2040c328
  401b3c:	0040a618 	.word	0x0040a618
  401b40:	00401c71 	.word	0x00401c71
  401b44:	00400f69 	.word	0x00400f69

00401b48 <xTimerGenericCommand>:
	configASSERT( xTimer );
  401b48:	b1d8      	cbz	r0, 401b82 <xTimerGenericCommand+0x3a>
{
  401b4a:	b530      	push	{r4, r5, lr}
  401b4c:	b085      	sub	sp, #20
  401b4e:	4615      	mov	r5, r2
  401b50:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  401b52:	4a15      	ldr	r2, [pc, #84]	; (401ba8 <xTimerGenericCommand+0x60>)
  401b54:	6810      	ldr	r0, [r2, #0]
  401b56:	b320      	cbz	r0, 401ba2 <xTimerGenericCommand+0x5a>
  401b58:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  401b5a:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  401b5c:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  401b5e:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  401b60:	2905      	cmp	r1, #5
  401b62:	dc19      	bgt.n	401b98 <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  401b64:	4b11      	ldr	r3, [pc, #68]	; (401bac <xTimerGenericCommand+0x64>)
  401b66:	4798      	blx	r3
  401b68:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  401b6a:	f04f 0300 	mov.w	r3, #0
  401b6e:	bf0c      	ite	eq
  401b70:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  401b72:	461a      	movne	r2, r3
  401b74:	4669      	mov	r1, sp
  401b76:	480c      	ldr	r0, [pc, #48]	; (401ba8 <xTimerGenericCommand+0x60>)
  401b78:	6800      	ldr	r0, [r0, #0]
  401b7a:	4c0d      	ldr	r4, [pc, #52]	; (401bb0 <xTimerGenericCommand+0x68>)
  401b7c:	47a0      	blx	r4
}
  401b7e:	b005      	add	sp, #20
  401b80:	bd30      	pop	{r4, r5, pc}
  401b82:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b86:	b672      	cpsid	i
  401b88:	f383 8811 	msr	BASEPRI, r3
  401b8c:	f3bf 8f6f 	isb	sy
  401b90:	f3bf 8f4f 	dsb	sy
  401b94:	b662      	cpsie	i
  401b96:	e7fe      	b.n	401b96 <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  401b98:	2300      	movs	r3, #0
  401b9a:	4669      	mov	r1, sp
  401b9c:	4c05      	ldr	r4, [pc, #20]	; (401bb4 <xTimerGenericCommand+0x6c>)
  401b9e:	47a0      	blx	r4
  401ba0:	e7ed      	b.n	401b7e <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  401ba2:	2000      	movs	r0, #0
	return xReturn;
  401ba4:	e7eb      	b.n	401b7e <xTimerGenericCommand+0x36>
  401ba6:	bf00      	nop
  401ba8:	2040c328 	.word	0x2040c328
  401bac:	00401885 	.word	0x00401885
  401bb0:	004009a5 	.word	0x004009a5
  401bb4:	00400b89 	.word	0x00400b89

00401bb8 <prvSampleTimeNow>:
{
  401bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401bbc:	b082      	sub	sp, #8
  401bbe:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  401bc0:	4b24      	ldr	r3, [pc, #144]	; (401c54 <prvSampleTimeNow+0x9c>)
  401bc2:	4798      	blx	r3
  401bc4:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  401bc6:	4b24      	ldr	r3, [pc, #144]	; (401c58 <prvSampleTimeNow+0xa0>)
  401bc8:	681b      	ldr	r3, [r3, #0]
  401bca:	4298      	cmp	r0, r3
  401bcc:	d31b      	bcc.n	401c06 <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  401bce:	2300      	movs	r3, #0
  401bd0:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  401bd4:	4b20      	ldr	r3, [pc, #128]	; (401c58 <prvSampleTimeNow+0xa0>)
  401bd6:	601f      	str	r7, [r3, #0]
}
  401bd8:	4638      	mov	r0, r7
  401bda:	b002      	add	sp, #8
  401bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  401be0:	2100      	movs	r1, #0
  401be2:	9100      	str	r1, [sp, #0]
  401be4:	460b      	mov	r3, r1
  401be6:	4652      	mov	r2, sl
  401be8:	4620      	mov	r0, r4
  401bea:	4c1c      	ldr	r4, [pc, #112]	; (401c5c <prvSampleTimeNow+0xa4>)
  401bec:	47a0      	blx	r4
				configASSERT( xResult );
  401bee:	b960      	cbnz	r0, 401c0a <prvSampleTimeNow+0x52>
  401bf0:	f04f 0380 	mov.w	r3, #128	; 0x80
  401bf4:	b672      	cpsid	i
  401bf6:	f383 8811 	msr	BASEPRI, r3
  401bfa:	f3bf 8f6f 	isb	sy
  401bfe:	f3bf 8f4f 	dsb	sy
  401c02:	b662      	cpsie	i
  401c04:	e7fe      	b.n	401c04 <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401c06:	4d16      	ldr	r5, [pc, #88]	; (401c60 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401c08:	4e16      	ldr	r6, [pc, #88]	; (401c64 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401c0a:	682b      	ldr	r3, [r5, #0]
  401c0c:	681a      	ldr	r2, [r3, #0]
  401c0e:	b1c2      	cbz	r2, 401c42 <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401c10:	68db      	ldr	r3, [r3, #12]
  401c12:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  401c16:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401c18:	f104 0904 	add.w	r9, r4, #4
  401c1c:	4648      	mov	r0, r9
  401c1e:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401c20:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401c22:	4620      	mov	r0, r4
  401c24:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  401c26:	69e3      	ldr	r3, [r4, #28]
  401c28:	2b01      	cmp	r3, #1
  401c2a:	d1ee      	bne.n	401c0a <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  401c2c:	69a3      	ldr	r3, [r4, #24]
  401c2e:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  401c30:	459a      	cmp	sl, r3
  401c32:	d2d5      	bcs.n	401be0 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  401c34:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401c36:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401c38:	4649      	mov	r1, r9
  401c3a:	6828      	ldr	r0, [r5, #0]
  401c3c:	4b0a      	ldr	r3, [pc, #40]	; (401c68 <prvSampleTimeNow+0xb0>)
  401c3e:	4798      	blx	r3
  401c40:	e7e3      	b.n	401c0a <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  401c42:	4a0a      	ldr	r2, [pc, #40]	; (401c6c <prvSampleTimeNow+0xb4>)
  401c44:	6810      	ldr	r0, [r2, #0]
  401c46:	4906      	ldr	r1, [pc, #24]	; (401c60 <prvSampleTimeNow+0xa8>)
  401c48:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  401c4a:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  401c4c:	2301      	movs	r3, #1
  401c4e:	f8c8 3000 	str.w	r3, [r8]
  401c52:	e7bf      	b.n	401bd4 <prvSampleTimeNow+0x1c>
  401c54:	00401239 	.word	0x00401239
  401c58:	2040c324 	.word	0x2040c324
  401c5c:	00401b49 	.word	0x00401b49
  401c60:	2040c2f4 	.word	0x2040c2f4
  401c64:	004002ed 	.word	0x004002ed
  401c68:	004002b9 	.word	0x004002b9
  401c6c:	2040c2f8 	.word	0x2040c2f8

00401c70 <prvTimerTask>:
{
  401c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401c74:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  401c76:	4e75      	ldr	r6, [pc, #468]	; (401e4c <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  401c78:	4f75      	ldr	r7, [pc, #468]	; (401e50 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  401c7a:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 401e78 <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401c7e:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 401e7c <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  401c82:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  401c84:	681a      	ldr	r2, [r3, #0]
  401c86:	2a00      	cmp	r2, #0
  401c88:	f000 80ce 	beq.w	401e28 <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401c8c:	68db      	ldr	r3, [r3, #12]
  401c8e:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  401c90:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401c92:	a804      	add	r0, sp, #16
  401c94:	4b6f      	ldr	r3, [pc, #444]	; (401e54 <prvTimerTask+0x1e4>)
  401c96:	4798      	blx	r3
  401c98:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  401c9a:	9b04      	ldr	r3, [sp, #16]
  401c9c:	2b00      	cmp	r3, #0
  401c9e:	d144      	bne.n	401d2a <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  401ca0:	42a0      	cmp	r0, r4
  401ca2:	d212      	bcs.n	401cca <prvTimerTask+0x5a>
  401ca4:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  401ca6:	1b61      	subs	r1, r4, r5
  401ca8:	4b6b      	ldr	r3, [pc, #428]	; (401e58 <prvTimerTask+0x1e8>)
  401caa:	6818      	ldr	r0, [r3, #0]
  401cac:	4b6b      	ldr	r3, [pc, #428]	; (401e5c <prvTimerTask+0x1ec>)
  401cae:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401cb0:	4b6b      	ldr	r3, [pc, #428]	; (401e60 <prvTimerTask+0x1f0>)
  401cb2:	4798      	blx	r3
  401cb4:	2800      	cmp	r0, #0
  401cb6:	d13a      	bne.n	401d2e <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  401cb8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401cbc:	f8c9 3000 	str.w	r3, [r9]
  401cc0:	f3bf 8f4f 	dsb	sy
  401cc4:	f3bf 8f6f 	isb	sy
  401cc8:	e031      	b.n	401d2e <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  401cca:	4b65      	ldr	r3, [pc, #404]	; (401e60 <prvTimerTask+0x1f0>)
  401ccc:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  401cce:	6833      	ldr	r3, [r6, #0]
  401cd0:	68db      	ldr	r3, [r3, #12]
  401cd2:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401cd6:	f10a 0004 	add.w	r0, sl, #4
  401cda:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  401cdc:	f8da 301c 	ldr.w	r3, [sl, #28]
  401ce0:	2b01      	cmp	r3, #1
  401ce2:	d004      	beq.n	401cee <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401ce4:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  401ce8:	4650      	mov	r0, sl
  401cea:	4798      	blx	r3
  401cec:	e01f      	b.n	401d2e <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  401cee:	f8da 1018 	ldr.w	r1, [sl, #24]
  401cf2:	4623      	mov	r3, r4
  401cf4:	462a      	mov	r2, r5
  401cf6:	4421      	add	r1, r4
  401cf8:	4650      	mov	r0, sl
  401cfa:	4d5a      	ldr	r5, [pc, #360]	; (401e64 <prvTimerTask+0x1f4>)
  401cfc:	47a8      	blx	r5
  401cfe:	2801      	cmp	r0, #1
  401d00:	d1f0      	bne.n	401ce4 <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  401d02:	2100      	movs	r1, #0
  401d04:	9100      	str	r1, [sp, #0]
  401d06:	460b      	mov	r3, r1
  401d08:	4622      	mov	r2, r4
  401d0a:	4650      	mov	r0, sl
  401d0c:	4c56      	ldr	r4, [pc, #344]	; (401e68 <prvTimerTask+0x1f8>)
  401d0e:	47a0      	blx	r4
			configASSERT( xResult );
  401d10:	2800      	cmp	r0, #0
  401d12:	d1e7      	bne.n	401ce4 <prvTimerTask+0x74>
  401d14:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d18:	b672      	cpsid	i
  401d1a:	f383 8811 	msr	BASEPRI, r3
  401d1e:	f3bf 8f6f 	isb	sy
  401d22:	f3bf 8f4f 	dsb	sy
  401d26:	b662      	cpsie	i
  401d28:	e7fe      	b.n	401d28 <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  401d2a:	4b4d      	ldr	r3, [pc, #308]	; (401e60 <prvTimerTask+0x1f0>)
  401d2c:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  401d2e:	4d4a      	ldr	r5, [pc, #296]	; (401e58 <prvTimerTask+0x1e8>)
  401d30:	4c4e      	ldr	r4, [pc, #312]	; (401e6c <prvTimerTask+0x1fc>)
  401d32:	e006      	b.n	401d42 <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  401d34:	9907      	ldr	r1, [sp, #28]
  401d36:	9806      	ldr	r0, [sp, #24]
  401d38:	9b05      	ldr	r3, [sp, #20]
  401d3a:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  401d3c:	9b04      	ldr	r3, [sp, #16]
  401d3e:	2b00      	cmp	r3, #0
  401d40:	da09      	bge.n	401d56 <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  401d42:	2300      	movs	r3, #0
  401d44:	461a      	mov	r2, r3
  401d46:	a904      	add	r1, sp, #16
  401d48:	6828      	ldr	r0, [r5, #0]
  401d4a:	47a0      	blx	r4
  401d4c:	2800      	cmp	r0, #0
  401d4e:	d098      	beq.n	401c82 <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  401d50:	9b04      	ldr	r3, [sp, #16]
  401d52:	2b00      	cmp	r3, #0
  401d54:	dbee      	blt.n	401d34 <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  401d56:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  401d5a:	f8da 3014 	ldr.w	r3, [sl, #20]
  401d5e:	b113      	cbz	r3, 401d66 <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401d60:	f10a 0004 	add.w	r0, sl, #4
  401d64:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401d66:	a803      	add	r0, sp, #12
  401d68:	4b3a      	ldr	r3, [pc, #232]	; (401e54 <prvTimerTask+0x1e4>)
  401d6a:	4798      	blx	r3
			switch( xMessage.xMessageID )
  401d6c:	9b04      	ldr	r3, [sp, #16]
  401d6e:	2b09      	cmp	r3, #9
  401d70:	d8e7      	bhi.n	401d42 <prvTimerTask+0xd2>
  401d72:	a201      	add	r2, pc, #4	; (adr r2, 401d78 <prvTimerTask+0x108>)
  401d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401d78:	00401da1 	.word	0x00401da1
  401d7c:	00401da1 	.word	0x00401da1
  401d80:	00401da1 	.word	0x00401da1
  401d84:	00401d43 	.word	0x00401d43
  401d88:	00401df5 	.word	0x00401df5
  401d8c:	00401e21 	.word	0x00401e21
  401d90:	00401da1 	.word	0x00401da1
  401d94:	00401da1 	.word	0x00401da1
  401d98:	00401d43 	.word	0x00401d43
  401d9c:	00401df5 	.word	0x00401df5
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  401da0:	9c05      	ldr	r4, [sp, #20]
  401da2:	f8da 1018 	ldr.w	r1, [sl, #24]
  401da6:	4623      	mov	r3, r4
  401da8:	4602      	mov	r2, r0
  401daa:	4421      	add	r1, r4
  401dac:	4650      	mov	r0, sl
  401dae:	4c2d      	ldr	r4, [pc, #180]	; (401e64 <prvTimerTask+0x1f4>)
  401db0:	47a0      	blx	r4
  401db2:	2801      	cmp	r0, #1
  401db4:	d1bc      	bne.n	401d30 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401db6:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  401dba:	4650      	mov	r0, sl
  401dbc:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  401dbe:	f8da 301c 	ldr.w	r3, [sl, #28]
  401dc2:	2b01      	cmp	r3, #1
  401dc4:	d1b4      	bne.n	401d30 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  401dc6:	f8da 2018 	ldr.w	r2, [sl, #24]
  401dca:	2100      	movs	r1, #0
  401dcc:	9100      	str	r1, [sp, #0]
  401dce:	460b      	mov	r3, r1
  401dd0:	9805      	ldr	r0, [sp, #20]
  401dd2:	4402      	add	r2, r0
  401dd4:	4650      	mov	r0, sl
  401dd6:	4c24      	ldr	r4, [pc, #144]	; (401e68 <prvTimerTask+0x1f8>)
  401dd8:	47a0      	blx	r4
							configASSERT( xResult );
  401dda:	2800      	cmp	r0, #0
  401ddc:	d1a8      	bne.n	401d30 <prvTimerTask+0xc0>
  401dde:	f04f 0380 	mov.w	r3, #128	; 0x80
  401de2:	b672      	cpsid	i
  401de4:	f383 8811 	msr	BASEPRI, r3
  401de8:	f3bf 8f6f 	isb	sy
  401dec:	f3bf 8f4f 	dsb	sy
  401df0:	b662      	cpsie	i
  401df2:	e7fe      	b.n	401df2 <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  401df4:	9905      	ldr	r1, [sp, #20]
  401df6:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  401dfa:	b131      	cbz	r1, 401e0a <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  401dfc:	4603      	mov	r3, r0
  401dfe:	4602      	mov	r2, r0
  401e00:	4401      	add	r1, r0
  401e02:	4650      	mov	r0, sl
  401e04:	4c17      	ldr	r4, [pc, #92]	; (401e64 <prvTimerTask+0x1f4>)
  401e06:	47a0      	blx	r4
  401e08:	e792      	b.n	401d30 <prvTimerTask+0xc0>
  401e0a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e0e:	b672      	cpsid	i
  401e10:	f383 8811 	msr	BASEPRI, r3
  401e14:	f3bf 8f6f 	isb	sy
  401e18:	f3bf 8f4f 	dsb	sy
  401e1c:	b662      	cpsie	i
  401e1e:	e7fe      	b.n	401e1e <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  401e20:	4650      	mov	r0, sl
  401e22:	4b13      	ldr	r3, [pc, #76]	; (401e70 <prvTimerTask+0x200>)
  401e24:	4798      	blx	r3
  401e26:	e783      	b.n	401d30 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  401e28:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401e2a:	a804      	add	r0, sp, #16
  401e2c:	4b09      	ldr	r3, [pc, #36]	; (401e54 <prvTimerTask+0x1e4>)
  401e2e:	4798      	blx	r3
  401e30:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  401e32:	9b04      	ldr	r3, [sp, #16]
  401e34:	2b00      	cmp	r3, #0
  401e36:	f47f af78 	bne.w	401d2a <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  401e3a:	4b0e      	ldr	r3, [pc, #56]	; (401e74 <prvTimerTask+0x204>)
  401e3c:	681b      	ldr	r3, [r3, #0]
  401e3e:	681a      	ldr	r2, [r3, #0]
  401e40:	fab2 f282 	clz	r2, r2
  401e44:	0952      	lsrs	r2, r2, #5
  401e46:	2400      	movs	r4, #0
  401e48:	e72d      	b.n	401ca6 <prvTimerTask+0x36>
  401e4a:	bf00      	nop
  401e4c:	2040c2f4 	.word	0x2040c2f4
  401e50:	00401229 	.word	0x00401229
  401e54:	00401bb9 	.word	0x00401bb9
  401e58:	2040c328 	.word	0x2040c328
  401e5c:	00400e8d 	.word	0x00400e8d
  401e60:	00401391 	.word	0x00401391
  401e64:	00401a21 	.word	0x00401a21
  401e68:	00401b49 	.word	0x00401b49
  401e6c:	00400c89 	.word	0x00400c89
  401e70:	0040069d 	.word	0x0040069d
  401e74:	2040c2f8 	.word	0x2040c2f8
  401e78:	e000ed04 	.word	0xe000ed04
  401e7c:	004002ed 	.word	0x004002ed

00401e80 <mxt_init_device>:
 * \param chgpin IOPORT pin instance attached to the maXTouch device's /CHG pin
 * \return Operation result status code
 */
status_code_t mxt_init_device(struct mxt_device *device,
		twihs_master_t interface, uint8_t chip_adr, uint32_t chgpin)
{
  401e80:	b5f0      	push	{r4, r5, r6, r7, lr}
  401e82:	b087      	sub	sp, #28
  401e84:	4604      	mov	r4, r0
  401e86:	460e      	mov	r6, r1
  401e88:	4617      	mov	r7, r2
	int8_t status;

	/* Set TWI interface, TWI address and CHG-pin of the maXTouch device. */
	device->interface = interface;
  401e8a:	6081      	str	r1, [r0, #8]
	device->mxt_chip_adr = chip_adr;
  401e8c:	7302      	strb	r2, [r0, #12]
	device->chgpin = chgpin;
  401e8e:	6183      	str	r3, [r0, #24]
	device->handler = NULL;
  401e90:	2500      	movs	r5, #0
  401e92:	6105      	str	r5, [r0, #16]
			malloc(sizeof(struct mxt_info_object));
  401e94:	2007      	movs	r0, #7
  401e96:	4b9d      	ldr	r3, [pc, #628]	; (40210c <mxt_init_device+0x28c>)
  401e98:	4798      	blx	r3
	device->info_object = (struct mxt_info_object *)
  401e9a:	6020      	str	r0, [r4, #0]
	twihs_package_t packet = {
  401e9c:	9501      	str	r5, [sp, #4]
  401e9e:	9505      	str	r5, [sp, #20]
  401ea0:	2302      	movs	r3, #2
  401ea2:	9302      	str	r3, [sp, #8]
  401ea4:	9003      	str	r0, [sp, #12]
  401ea6:	2307      	movs	r3, #7
  401ea8:	9304      	str	r3, [sp, #16]
  401eaa:	f88d 7014 	strb.w	r7, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  401eae:	a901      	add	r1, sp, #4
  401eb0:	4630      	mov	r0, r6
  401eb2:	4b97      	ldr	r3, [pc, #604]	; (402110 <mxt_init_device+0x290>)
  401eb4:	4798      	blx	r3
  401eb6:	1b40      	subs	r0, r0, r5
  401eb8:	bf18      	it	ne
  401eba:	2001      	movne	r0, #1
  401ebc:	4240      	negs	r0, r0
	if ((status = mxt_read_id_block(device)) != STATUS_OK) {
  401ebe:	b108      	cbz	r0, 401ec4 <mxt_init_device+0x44>
	}

	device->multitouch_report_offset = status;

	return STATUS_OK;
}
  401ec0:	b007      	add	sp, #28
  401ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			malloc(device->info_object->obj_count *
  401ec4:	6825      	ldr	r5, [r4, #0]
  401ec6:	79a8      	ldrb	r0, [r5, #6]
  401ec8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  401ecc:	0040      	lsls	r0, r0, #1
  401ece:	4b8f      	ldr	r3, [pc, #572]	; (40210c <mxt_init_device+0x28c>)
  401ed0:	4798      	blx	r3
	device->object_list = (struct mxt_object *)
  401ed2:	6060      	str	r0, [r4, #4]
	twihs_package_t packet = {
  401ed4:	2300      	movs	r3, #0
  401ed6:	9301      	str	r3, [sp, #4]
  401ed8:	9304      	str	r3, [sp, #16]
  401eda:	9305      	str	r3, [sp, #20]
  401edc:	2307      	movs	r3, #7
  401ede:	f88d 3004 	strb.w	r3, [sp, #4]
  401ee2:	2302      	movs	r3, #2
  401ee4:	9302      	str	r3, [sp, #8]
  401ee6:	9003      	str	r0, [sp, #12]
		.length       = device->info_object->obj_count *
  401ee8:	79ab      	ldrb	r3, [r5, #6]
  401eea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  401eee:	005b      	lsls	r3, r3, #1
	twihs_package_t packet = {
  401ef0:	9304      	str	r3, [sp, #16]
  401ef2:	7b23      	ldrb	r3, [r4, #12]
  401ef4:	f88d 3014 	strb.w	r3, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  401ef8:	a901      	add	r1, sp, #4
  401efa:	68a0      	ldr	r0, [r4, #8]
  401efc:	4b84      	ldr	r3, [pc, #528]	; (402110 <mxt_init_device+0x290>)
  401efe:	4798      	blx	r3
  401f00:	3000      	adds	r0, #0
  401f02:	bf18      	it	ne
  401f04:	2001      	movne	r0, #1
  401f06:	4240      	negs	r0, r0
	if (status != STATUS_OK) {
  401f08:	2800      	cmp	r0, #0
  401f0a:	d1d9      	bne.n	401ec0 <mxt_init_device+0x40>
	uint8_t *id_pointer = (uint8_t *)device->info_object;
  401f0c:	6827      	ldr	r7, [r4, #0]
	uint8_t *objects_pointer = (uint8_t *)device->object_list;
  401f0e:	6860      	ldr	r0, [r4, #4]
			(device->info_object->obj_count *
  401f10:	79bb      	ldrb	r3, [r7, #6]
  401f12:	eb03 0643 	add.w	r6, r3, r3, lsl #1
  401f16:	0076      	lsls	r6, r6, #1
	crc_area_size = MXT_ID_BLOCK_SIZE +
  401f18:	3607      	adds	r6, #7
  401f1a:	b2b6      	uxth	r6, r6
  401f1c:	463a      	mov	r2, r7
  401f1e:	3706      	adds	r7, #6
	uint32_t crc_tmp = 0;
  401f20:	2100      	movs	r1, #0
		result ^= crcpoly;
  401f22:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 402114 <mxt_init_device+0x294>
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  401f26:	f892 e001 	ldrb.w	lr, [r2, #1]
  401f2a:	7815      	ldrb	r5, [r2, #0]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  401f2c:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
  401f30:	ea85 0141 	eor.w	r1, r5, r1, lsl #1
	if (result & 0x1000000) {
  401f34:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
		result ^= crcpoly;
  401f38:	bf18      	it	ne
  401f3a:	ea81 010c 	eorne.w	r1, r1, ip
  401f3e:	3202      	adds	r2, #2
	for (i = 0; i < MXT_ID_BLOCK_SIZE - 1; i += 2) {
  401f40:	42ba      	cmp	r2, r7
  401f42:	d1f0      	bne.n	401f26 <mxt_init_device+0xa6>
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  401f44:	7802      	ldrb	r2, [r0, #0]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  401f46:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  401f4a:	ea83 0241 	eor.w	r2, r3, r1, lsl #1
	if (result & 0x1000000) {
  401f4e:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  401f52:	d003      	beq.n	401f5c <mxt_init_device+0xdc>
		result ^= crcpoly;
  401f54:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
  401f58:	f082 021b 	eor.w	r2, r2, #27
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  401f5c:	f1a6 0708 	sub.w	r7, r6, #8
  401f60:	2f01      	cmp	r7, #1
  401f62:	dd12      	ble.n	401f8a <mxt_init_device+0x10a>
  401f64:	2301      	movs	r3, #1
		result ^= crcpoly;
  401f66:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 402114 <mxt_init_device+0x294>
		crc_tmp = mxt_crc_24(crc_tmp, objects_pointer[i],
  401f6a:	18c1      	adds	r1, r0, r3
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  401f6c:	784d      	ldrb	r5, [r1, #1]
  401f6e:	5cc1      	ldrb	r1, [r0, r3]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  401f70:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  401f74:	ea81 0242 	eor.w	r2, r1, r2, lsl #1
	if (result & 0x1000000) {
  401f78:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		result ^= crcpoly;
  401f7c:	bf18      	it	ne
  401f7e:	ea82 020e 	eorne.w	r2, r2, lr
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  401f82:	3302      	adds	r3, #2
  401f84:	b29b      	uxth	r3, r3
  401f86:	42bb      	cmp	r3, r7
  401f88:	dbef      	blt.n	401f6a <mxt_init_device+0xea>
	crc_tmp = mxt_crc_24(crc_tmp,
  401f8a:	4430      	add	r0, r6
	result = ((crc << 1u) ^ (uint32_t)data_word);
  401f8c:	f810 3c08 	ldrb.w	r3, [r0, #-8]
  401f90:	ea83 0242 	eor.w	r2, r3, r2, lsl #1
	if (result & 0x1000000) {
  401f94:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  401f98:	d003      	beq.n	401fa2 <mxt_init_device+0x122>
		result ^= crcpoly;
  401f9a:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
  401f9e:	f082 021b 	eor.w	r2, r2, #27
	*crc = (crc_tmp & 0x00FFFFFF);
  401fa2:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	twihs_package_t packet = {
  401fa6:	2300      	movs	r3, #0
  401fa8:	9301      	str	r3, [sp, #4]
  401faa:	9305      	str	r3, [sp, #20]
  401fac:	f88d 6004 	strb.w	r6, [sp, #4]
  401fb0:	0a36      	lsrs	r6, r6, #8
  401fb2:	f88d 6005 	strb.w	r6, [sp, #5]
  401fb6:	2302      	movs	r3, #2
  401fb8:	9302      	str	r3, [sp, #8]
  401fba:	f8cd d00c 	str.w	sp, [sp, #12]
  401fbe:	2303      	movs	r3, #3
  401fc0:	9304      	str	r3, [sp, #16]
  401fc2:	7b23      	ldrb	r3, [r4, #12]
  401fc4:	f88d 3014 	strb.w	r3, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  401fc8:	a901      	add	r1, sp, #4
  401fca:	68a0      	ldr	r0, [r4, #8]
  401fcc:	4b50      	ldr	r3, [pc, #320]	; (402110 <mxt_init_device+0x290>)
  401fce:	4798      	blx	r3
  401fd0:	b328      	cbz	r0, 40201e <mxt_init_device+0x19e>
		return ERR_IO_ERROR;
  401fd2:	f04f 33ff 	mov.w	r3, #4294967295
	if (crc_calculated != crc_read) {
  401fd6:	42ab      	cmp	r3, r5
  401fd8:	f040 808b 	bne.w	4020f2 <mxt_init_device+0x272>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401fdc:	6825      	ldr	r5, [r4, #0]
  401fde:	79a8      	ldrb	r0, [r5, #6]
  401fe0:	b198      	cbz	r0, 40200a <mxt_init_device+0x18a>
  401fe2:	2300      	movs	r3, #0
  401fe4:	3301      	adds	r3, #1
  401fe6:	b2da      	uxtb	r2, r3
  401fe8:	4290      	cmp	r0, r2
  401fea:	d8fb      	bhi.n	401fe4 <mxt_init_device+0x164>
		tot_report_ids += (device->object_list[i].num_report_ids);
  401fec:	6862      	ldr	r2, [r4, #4]
  401fee:	1e43      	subs	r3, r0, #1
  401ff0:	b2db      	uxtb	r3, r3
  401ff2:	3301      	adds	r3, #1
  401ff4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  401ff8:	eb02 0143 	add.w	r1, r2, r3, lsl #1
  401ffc:	2000      	movs	r0, #0
  401ffe:	7953      	ldrb	r3, [r2, #5]
  402000:	4418      	add	r0, r3
  402002:	b2c0      	uxtb	r0, r0
  402004:	3206      	adds	r2, #6
	for (i = 0; i < device->info_object->obj_count; ++i) {
  402006:	4291      	cmp	r1, r2
  402008:	d1f9      	bne.n	401ffe <mxt_init_device+0x17e>
			malloc(sizeof(struct mxt_report_id_map) *
  40200a:	0040      	lsls	r0, r0, #1
  40200c:	4b3f      	ldr	r3, [pc, #252]	; (40210c <mxt_init_device+0x28c>)
  40200e:	4798      	blx	r3
	device->report_id_map = (struct mxt_report_id_map *)
  402010:	6160      	str	r0, [r4, #20]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  402012:	79ab      	ldrb	r3, [r5, #6]
  402014:	b173      	cbz	r3, 402034 <mxt_init_device+0x1b4>
  402016:	2700      	movs	r7, #0
  402018:	2601      	movs	r6, #1
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  40201a:	46be      	mov	lr, r7
  40201c:	e037      	b.n	40208e <mxt_init_device+0x20e>
		return ((uint32_t)crc[2] << 16) | ((uint16_t)crc[1] << 8) | crc[0];
  40201e:	f89d 2002 	ldrb.w	r2, [sp, #2]
  402022:	f89d 3000 	ldrb.w	r3, [sp]
  402026:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40202a:	f89d 2001 	ldrb.w	r2, [sp, #1]
  40202e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  402032:	e7d0      	b.n	401fd6 <mxt_init_device+0x156>
		return ERR_BAD_DATA;
  402034:	f06f 0003 	mvn.w	r0, #3
  402038:	e742      	b.n	401ec0 <mxt_init_device+0x40>
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  40203a:	3001      	adds	r0, #1
  40203c:	b2c0      	uxtb	r0, r0
  40203e:	6862      	ldr	r2, [r4, #4]
  402040:	1953      	adds	r3, r2, r5
  402042:	7919      	ldrb	r1, [r3, #4]
  402044:	4281      	cmp	r1, r0
  402046:	d31c      	bcc.n	402082 <mxt_init_device+0x202>
			if (device->object_list[i].num_report_ids != 0) {
  402048:	795b      	ldrb	r3, [r3, #5]
  40204a:	2b00      	cmp	r3, #0
  40204c:	d0f5      	beq.n	40203a <mxt_init_device+0x1ba>
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  40204e:	6862      	ldr	r2, [r4, #4]
  402050:	442a      	add	r2, r5
  402052:	7953      	ldrb	r3, [r2, #5]
  402054:	2b00      	cmp	r3, #0
  402056:	d0f0      	beq.n	40203a <mxt_init_device+0x1ba>
  402058:	4633      	mov	r3, r6
							device->object_list[i].type;
  40205a:	7811      	ldrb	r1, [r2, #0]
					device->report_id_map[id_index].object_type =
  40205c:	6962      	ldr	r2, [r4, #20]
  40205e:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
					device->report_id_map[id_index].instance = j;
  402062:	6962      	ldr	r2, [r4, #20]
  402064:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  402068:	7050      	strb	r0, [r2, #1]
					id_index++;
  40206a:	3301      	adds	r3, #1
  40206c:	b2db      	uxtb	r3, r3
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  40206e:	6862      	ldr	r2, [r4, #4]
  402070:	442a      	add	r2, r5
  402072:	1b99      	subs	r1, r3, r6
  402074:	f892 c005 	ldrb.w	ip, [r2, #5]
  402078:	b2c9      	uxtb	r1, r1
  40207a:	458c      	cmp	ip, r1
  40207c:	d8ed      	bhi.n	40205a <mxt_init_device+0x1da>
					id_index++;
  40207e:	461e      	mov	r6, r3
  402080:	e7db      	b.n	40203a <mxt_init_device+0x1ba>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  402082:	3701      	adds	r7, #1
  402084:	b2ff      	uxtb	r7, r7
  402086:	6823      	ldr	r3, [r4, #0]
  402088:	799b      	ldrb	r3, [r3, #6]
  40208a:	429f      	cmp	r7, r3
  40208c:	d207      	bcs.n	40209e <mxt_init_device+0x21e>
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  40208e:	eb07 0347 	add.w	r3, r7, r7, lsl #1
  402092:	005a      	lsls	r2, r3, #1
  402094:	4615      	mov	r5, r2
  402096:	6863      	ldr	r3, [r4, #4]
  402098:	4413      	add	r3, r2
  40209a:	4670      	mov	r0, lr
  40209c:	e7d4      	b.n	402048 <mxt_init_device+0x1c8>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  40209e:	b35b      	cbz	r3, 4020f8 <mxt_init_device+0x278>
  4020a0:	4610      	mov	r0, r2
  4020a2:	3b01      	subs	r3, #1
  4020a4:	b2db      	uxtb	r3, r3
  4020a6:	3301      	adds	r3, #1
  4020a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4020ac:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  4020b0:	2100      	movs	r1, #0
		tot_report_ids += (device->object_list[i].num_report_ids);
  4020b2:	7943      	ldrb	r3, [r0, #5]
  4020b4:	4419      	add	r1, r3
  4020b6:	b2c9      	uxtb	r1, r1
  4020b8:	3006      	adds	r0, #6
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4020ba:	4282      	cmp	r2, r0
  4020bc:	d1f9      	bne.n	4020b2 <mxt_init_device+0x232>
	for (i = 0; i < tot_rpt_id; ++i) {
  4020be:	b1f1      	cbz	r1, 4020fe <mxt_init_device+0x27e>
		if (device->report_id_map[i].object_type == object_type) {
  4020c0:	6962      	ldr	r2, [r4, #20]
  4020c2:	7813      	ldrb	r3, [r2, #0]
  4020c4:	2b09      	cmp	r3, #9
  4020c6:	d00f      	beq.n	4020e8 <mxt_init_device+0x268>
  4020c8:	2300      	movs	r3, #0
	for (i = 0; i < tot_rpt_id; ++i) {
  4020ca:	3301      	adds	r3, #1
  4020cc:	b2db      	uxtb	r3, r3
  4020ce:	428b      	cmp	r3, r1
  4020d0:	d00c      	beq.n	4020ec <mxt_init_device+0x26c>
		if (device->report_id_map[i].object_type == object_type) {
  4020d2:	f812 0f02 	ldrb.w	r0, [r2, #2]!
  4020d6:	2809      	cmp	r0, #9
  4020d8:	d1f7      	bne.n	4020ca <mxt_init_device+0x24a>
			return i;
  4020da:	b25b      	sxtb	r3, r3
	if (status == -1) {
  4020dc:	f1b3 3fff 	cmp.w	r3, #4294967295
  4020e0:	d010      	beq.n	402104 <mxt_init_device+0x284>
	device->multitouch_report_offset = status;
  4020e2:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
  4020e4:	2000      	movs	r0, #0
  4020e6:	e6eb      	b.n	401ec0 <mxt_init_device+0x40>
		if (device->report_id_map[i].object_type == object_type) {
  4020e8:	2300      	movs	r3, #0
  4020ea:	e7f6      	b.n	4020da <mxt_init_device+0x25a>
		return ERR_BAD_DATA;
  4020ec:	f06f 0003 	mvn.w	r0, #3
  4020f0:	e6e6      	b.n	401ec0 <mxt_init_device+0x40>
		return ERR_BAD_DATA;
  4020f2:	f06f 0003 	mvn.w	r0, #3
  4020f6:	e6e3      	b.n	401ec0 <mxt_init_device+0x40>
		return ERR_BAD_DATA;
  4020f8:	f06f 0003 	mvn.w	r0, #3
  4020fc:	e6e0      	b.n	401ec0 <mxt_init_device+0x40>
  4020fe:	f06f 0003 	mvn.w	r0, #3
  402102:	e6dd      	b.n	401ec0 <mxt_init_device+0x40>
  402104:	f06f 0003 	mvn.w	r0, #3
  402108:	e6da      	b.n	401ec0 <mxt_init_device+0x40>
  40210a:	bf00      	nop
  40210c:	00404129 	.word	0x00404129
  402110:	00403595 	.word	0x00403595
  402114:	0080001b 	.word	0x0080001b

00402118 <mxt_get_object_address>:
uint16_t mxt_get_object_address(struct mxt_device *device, uint8_t object_id,
		uint8_t instance)
{
	uint8_t i;

	for (i = 0; i < device->info_object->obj_count; i++) {
  402118:	6803      	ldr	r3, [r0, #0]
  40211a:	799a      	ldrb	r2, [r3, #6]
  40211c:	b1d2      	cbz	r2, 402154 <mxt_get_object_address+0x3c>
{
  40211e:	b410      	push	{r4}
		if (object_id == device->object_list[i].type) {
  402120:	6844      	ldr	r4, [r0, #4]
  402122:	7823      	ldrb	r3, [r4, #0]
  402124:	428b      	cmp	r3, r1
  402126:	d00e      	beq.n	402146 <mxt_get_object_address+0x2e>
  402128:	1da3      	adds	r3, r4, #6
  40212a:	3a01      	subs	r2, #1
  40212c:	b2d2      	uxtb	r2, r2
  40212e:	3201      	adds	r2, #1
  402130:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  402134:	eb04 0242 	add.w	r2, r4, r2, lsl #1
	for (i = 0; i < device->info_object->obj_count; i++) {
  402138:	4293      	cmp	r3, r2
  40213a:	d009      	beq.n	402150 <mxt_get_object_address+0x38>
		if (object_id == device->object_list[i].type) {
  40213c:	461c      	mov	r4, r3
  40213e:	f813 0b06 	ldrb.w	r0, [r3], #6
  402142:	4288      	cmp	r0, r1
  402144:	d1f8      	bne.n	402138 <mxt_get_object_address+0x20>
			return device->object_list[i].start_address;
  402146:	f8b4 0001 	ldrh.w	r0, [r4, #1]
		}
	}

	return 0;
}
  40214a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40214e:	4770      	bx	lr
	return 0;
  402150:	2000      	movs	r0, #0
  402152:	e7fa      	b.n	40214a <mxt_get_object_address+0x32>
  402154:	2000      	movs	r0, #0
  402156:	4770      	bx	lr

00402158 <mxt_write_config_object>:
 * \param *obj_data Pointer to memory buffer containing object data
 * \result Operation result status code
 */
status_code_t mxt_write_config_object(struct mxt_device *device,
		mxt_memory_adr memory_adr, void *obj_data)
{
  402158:	b530      	push	{r4, r5, lr}
  40215a:	b087      	sub	sp, #28
	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  40215c:	2300      	movs	r3, #0
  40215e:	9301      	str	r3, [sp, #4]
  402160:	9304      	str	r3, [sp, #16]
  402162:	9305      	str	r3, [sp, #20]
  402164:	f88d 1004 	strb.w	r1, [sp, #4]
  402168:	0a0b      	lsrs	r3, r1, #8
  40216a:	f88d 3005 	strb.w	r3, [sp, #5]
  40216e:	2302      	movs	r3, #2
  402170:	9302      	str	r3, [sp, #8]
  402172:	9203      	str	r2, [sp, #12]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  402174:	6803      	ldr	r3, [r0, #0]
  402176:	799a      	ldrb	r2, [r3, #6]
  402178:	b1ba      	cbz	r2, 4021aa <mxt_write_config_object+0x52>
		if (device->object_list[i].start_address == mem_adr) {
  40217a:	6844      	ldr	r4, [r0, #4]
  40217c:	f8b4 3001 	ldrh.w	r3, [r4, #1]
  402180:	428b      	cmp	r3, r1
  402182:	d00f      	beq.n	4021a4 <mxt_write_config_object+0x4c>
  402184:	1da3      	adds	r3, r4, #6
  402186:	3a01      	subs	r2, #1
  402188:	b2d2      	uxtb	r2, r2
  40218a:	3201      	adds	r2, #1
  40218c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  402190:	eb04 0242 	add.w	r2, r4, r2, lsl #1
	for (i = 0; i < device->info_object->obj_count; ++i) {
  402194:	4293      	cmp	r3, r2
  402196:	d016      	beq.n	4021c6 <mxt_write_config_object+0x6e>
		if (device->object_list[i].start_address == mem_adr) {
  402198:	461c      	mov	r4, r3
  40219a:	3306      	adds	r3, #6
  40219c:	f8b4 5001 	ldrh.w	r5, [r4, #1]
  4021a0:	428d      	cmp	r5, r1
  4021a2:	d1f7      	bne.n	402194 <mxt_write_config_object+0x3c>
			return (device->object_list[i].size + 1);
  4021a4:	78e2      	ldrb	r2, [r4, #3]
  4021a6:	3201      	adds	r2, #1
  4021a8:	b2d2      	uxtb	r2, r2
		.addr[0]      = memory_adr,
		.addr[1]      = memory_adr >> 8,
		.addr_length  = sizeof(mxt_memory_adr),
		.chip         = device->mxt_chip_adr,
		.buffer       = obj_data,
		.length       = mxt_get_object_size(device, memory_adr)
  4021aa:	9204      	str	r2, [sp, #16]
	twihs_package_t packet = {
  4021ac:	7b03      	ldrb	r3, [r0, #12]
  4021ae:	f88d 3014 	strb.w	r3, [sp, #20]
	};

	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  4021b2:	a901      	add	r1, sp, #4
  4021b4:	6880      	ldr	r0, [r0, #8]
  4021b6:	4b05      	ldr	r3, [pc, #20]	; (4021cc <mxt_write_config_object+0x74>)
  4021b8:	4798      	blx	r3
  4021ba:	3000      	adds	r0, #0
  4021bc:	bf18      	it	ne
  4021be:	2001      	movne	r0, #1
		return ERR_IO_ERROR;
	} else {
		return STATUS_OK;
	}

}
  4021c0:	4240      	negs	r0, r0
  4021c2:	b007      	add	sp, #28
  4021c4:	bd30      	pop	{r4, r5, pc}
	return 0;
  4021c6:	2200      	movs	r2, #0
  4021c8:	e7ef      	b.n	4021aa <mxt_write_config_object+0x52>
  4021ca:	bf00      	nop
  4021cc:	00403641 	.word	0x00403641

004021d0 <mxt_write_config_reg>:
 * \param value Value to be written to register
 * \result Operation result status code
 */
status_code_t mxt_write_config_reg(struct mxt_device *device,
		mxt_memory_adr memory_adr, uint8_t value)
{
  4021d0:	b500      	push	{lr}
  4021d2:	b089      	sub	sp, #36	; 0x24
  4021d4:	f88d 2007 	strb.w	r2, [sp, #7]
	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  4021d8:	2300      	movs	r3, #0
  4021da:	9303      	str	r3, [sp, #12]
  4021dc:	9307      	str	r3, [sp, #28]
  4021de:	f88d 100c 	strb.w	r1, [sp, #12]
  4021e2:	0a09      	lsrs	r1, r1, #8
  4021e4:	f88d 100d 	strb.w	r1, [sp, #13]
  4021e8:	2302      	movs	r3, #2
  4021ea:	9304      	str	r3, [sp, #16]
  4021ec:	f10d 0307 	add.w	r3, sp, #7
  4021f0:	9305      	str	r3, [sp, #20]
  4021f2:	2301      	movs	r3, #1
  4021f4:	9306      	str	r3, [sp, #24]
  4021f6:	7b03      	ldrb	r3, [r0, #12]
  4021f8:	f88d 301c 	strb.w	r3, [sp, #28]
		.chip         = device->mxt_chip_adr,
		.buffer       = &value,
		.length       = sizeof(value)
	};

	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  4021fc:	a903      	add	r1, sp, #12
  4021fe:	6880      	ldr	r0, [r0, #8]
  402200:	4b04      	ldr	r3, [pc, #16]	; (402214 <mxt_write_config_reg+0x44>)
  402202:	4798      	blx	r3
  402204:	3000      	adds	r0, #0
  402206:	bf18      	it	ne
  402208:	2001      	movne	r0, #1
		return ERR_IO_ERROR;
	} else {
		return STATUS_OK;
	}
}
  40220a:	4240      	negs	r0, r0
  40220c:	b009      	add	sp, #36	; 0x24
  40220e:	f85d fb04 	ldr.w	pc, [sp], #4
  402212:	bf00      	nop
  402214:	00403641 	.word	0x00403641

00402218 <mxt_is_message_pending>:
 * \param *device Pointer to mxt_device instance
 * \return Return /CHG pin status
 */
bool mxt_is_message_pending(struct mxt_device *device)
{
	if (ioport_get_pin_level(device->chgpin) == false) {
  402218:	6982      	ldr	r2, [r0, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40221a:	4b07      	ldr	r3, [pc, #28]	; (402238 <mxt_is_message_pending+0x20>)
  40221c:	eb03 1352 	add.w	r3, r3, r2, lsr #5
  402220:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  402222:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
	return 1U << (pin & 0x1F);
  402224:	f002 021f 	and.w	r2, r2, #31
  402228:	2301      	movs	r3, #1
  40222a:	fa03 f202 	lsl.w	r2, r3, r2
  40222e:	420a      	tst	r2, r1
		return true;
	} else {
		return false;
	}
}
  402230:	bf0c      	ite	eq
  402232:	4618      	moveq	r0, r3
  402234:	2000      	movne	r0, #0
  402236:	4770      	bx	lr
  402238:	00200707 	.word	0x00200707

0040223c <mxt_read_message>:
 * \param *message Pointer to mxt_message instance
 * \return Operation result status code
 */
status_code_t mxt_read_message(struct mxt_device *device,
		struct mxt_conf_messageprocessor_t5 *message)
{
  40223c:	b530      	push	{r4, r5, lr}
  40223e:	b087      	sub	sp, #28
  402240:	4604      	mov	r4, r0
  402242:	460d      	mov	r5, r1
	uint16_t obj_adr = mxt_get_object_address(device,
  402244:	2200      	movs	r2, #0
  402246:	2105      	movs	r1, #5
  402248:	4b0d      	ldr	r3, [pc, #52]	; (402280 <mxt_read_message+0x44>)
  40224a:	4798      	blx	r3
			MXT_GEN_MESSAGEPROCESSOR_T5, 0);

	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  40224c:	2300      	movs	r3, #0
  40224e:	9301      	str	r3, [sp, #4]
  402250:	9305      	str	r3, [sp, #20]
  402252:	f88d 0004 	strb.w	r0, [sp, #4]
  402256:	0a00      	lsrs	r0, r0, #8
  402258:	f88d 0005 	strb.w	r0, [sp, #5]
  40225c:	2302      	movs	r3, #2
  40225e:	9302      	str	r3, [sp, #8]
  402260:	9503      	str	r5, [sp, #12]
  402262:	2309      	movs	r3, #9
  402264:	9304      	str	r3, [sp, #16]
  402266:	7b23      	ldrb	r3, [r4, #12]
  402268:	f88d 3014 	strb.w	r3, [sp, #20]
		.buffer       = message,
		.length       = MXT_TWI_MSG_SIZE_T5
	};

	/* Read information from the slave */
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  40226c:	a901      	add	r1, sp, #4
  40226e:	68a0      	ldr	r0, [r4, #8]
  402270:	4b04      	ldr	r3, [pc, #16]	; (402284 <mxt_read_message+0x48>)
  402272:	4798      	blx	r3
  402274:	3000      	adds	r0, #0
  402276:	bf18      	it	ne
  402278:	2001      	movne	r0, #1
		return mxt_validate_message(&packet);
#else
		return STATUS_OK;
#endif
	}
}
  40227a:	4240      	negs	r0, r0
  40227c:	b007      	add	sp, #28
  40227e:	bd30      	pop	{r4, r5, pc}
  402280:	00402119 	.word	0x00402119
  402284:	00403595 	.word	0x00403595

00402288 <mxt_read_touch_event>:
 * \param *touch_event Pointer to mxt_touch_event instance
 * \return Operation result status code
 */
status_code_t mxt_read_touch_event(struct mxt_device *device,
		struct mxt_touch_event *touch_event)
{
  402288:	b5f0      	push	{r4, r5, r6, r7, lr}
  40228a:	b085      	sub	sp, #20
  40228c:	4604      	mov	r4, r0
  40228e:	460e      	mov	r6, r1
	uint8_t obj_type, status;
	struct mxt_conf_messageprocessor_t5 message;

	while (mxt_is_message_pending(device)) {
  402290:	4d17      	ldr	r5, [pc, #92]	; (4022f0 <mxt_read_touch_event+0x68>)
		if((status = mxt_read_message(device, &message)) != STATUS_OK) {
  402292:	4f18      	ldr	r7, [pc, #96]	; (4022f4 <mxt_read_touch_event+0x6c>)
	while (mxt_is_message_pending(device)) {
  402294:	4620      	mov	r0, r4
  402296:	47a8      	blx	r5
  402298:	b328      	cbz	r0, 4022e6 <mxt_read_touch_event+0x5e>
		if((status = mxt_read_message(device, &message)) != STATUS_OK) {
  40229a:	a901      	add	r1, sp, #4
  40229c:	4620      	mov	r0, r4
  40229e:	47b8      	blx	r7
  4022a0:	4603      	mov	r3, r0
  4022a2:	bb10      	cbnz	r0, 4022ea <mxt_read_touch_event+0x62>
 * \return Operation
 */
enum mxt_object_type mxt_get_object_type(struct mxt_device *device,
		struct mxt_conf_messageprocessor_t5 *message)
{
	return (enum mxt_object_type)(device->report_id_map[message->reportid].object_type);
  4022a4:	f89d 3004 	ldrb.w	r3, [sp, #4]
  4022a8:	6962      	ldr	r2, [r4, #20]
		if (obj_type == MXT_TOUCH_MULTITOUCHSCREEN_T9) {
  4022aa:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
  4022ae:	2a09      	cmp	r2, #9
  4022b0:	d1f0      	bne.n	402294 <mxt_read_touch_event+0xc>
			touch_event->id = (message.reportid -
  4022b2:	7f22      	ldrb	r2, [r4, #28]
  4022b4:	1a9b      	subs	r3, r3, r2
  4022b6:	7033      	strb	r3, [r6, #0]
			touch_event->status = message.message[0];
  4022b8:	f89d 3005 	ldrb.w	r3, [sp, #5]
  4022bc:	7073      	strb	r3, [r6, #1]
					((message.message[3] & 0xf0) >> 4);
  4022be:	f89d 3008 	ldrb.w	r3, [sp, #8]
			touch_event->x = (message.message[1] << 4) |
  4022c2:	f89d 1006 	ldrb.w	r1, [sp, #6]
					((message.message[3] & 0xf0) >> 4);
  4022c6:	091a      	lsrs	r2, r3, #4
			touch_event->x = (message.message[1] << 4) |
  4022c8:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
  4022cc:	8072      	strh	r2, [r6, #2]
			touch_event->y = (message.message[2] << 4) |
  4022ce:	f89d 2007 	ldrb.w	r2, [sp, #7]
					(message.message[3] & 0x0f);
  4022d2:	f003 030f 	and.w	r3, r3, #15
			touch_event->y = (message.message[2] << 4) |
  4022d6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  4022da:	80b3      	strh	r3, [r6, #4]
			touch_event->size = message.message[4];
  4022dc:	f89d 3009 	ldrb.w	r3, [sp, #9]
  4022e0:	71b3      	strb	r3, [r6, #6]
			return STATUS_OK;
  4022e2:	2300      	movs	r3, #0
  4022e4:	e001      	b.n	4022ea <mxt_read_touch_event+0x62>
	return ERR_BAD_DATA;
  4022e6:	f06f 0303 	mvn.w	r3, #3
}
  4022ea:	4618      	mov	r0, r3
  4022ec:	b005      	add	sp, #20
  4022ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4022f0:	00402219 	.word	0x00402219
  4022f4:	0040223d 	.word	0x0040223d

004022f8 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4022f8:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4022fa:	4810      	ldr	r0, [pc, #64]	; (40233c <sysclk_init+0x44>)
  4022fc:	4b10      	ldr	r3, [pc, #64]	; (402340 <sysclk_init+0x48>)
  4022fe:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  402300:	213e      	movs	r1, #62	; 0x3e
  402302:	2000      	movs	r0, #0
  402304:	4b0f      	ldr	r3, [pc, #60]	; (402344 <sysclk_init+0x4c>)
  402306:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  402308:	4c0f      	ldr	r4, [pc, #60]	; (402348 <sysclk_init+0x50>)
  40230a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40230c:	2800      	cmp	r0, #0
  40230e:	d0fc      	beq.n	40230a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  402310:	4b0e      	ldr	r3, [pc, #56]	; (40234c <sysclk_init+0x54>)
  402312:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  402314:	4a0e      	ldr	r2, [pc, #56]	; (402350 <sysclk_init+0x58>)
  402316:	4b0f      	ldr	r3, [pc, #60]	; (402354 <sysclk_init+0x5c>)
  402318:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  40231a:	4c0f      	ldr	r4, [pc, #60]	; (402358 <sysclk_init+0x60>)
  40231c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40231e:	2800      	cmp	r0, #0
  402320:	d0fc      	beq.n	40231c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  402322:	2002      	movs	r0, #2
  402324:	4b0d      	ldr	r3, [pc, #52]	; (40235c <sysclk_init+0x64>)
  402326:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  402328:	2000      	movs	r0, #0
  40232a:	4b0d      	ldr	r3, [pc, #52]	; (402360 <sysclk_init+0x68>)
  40232c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40232e:	4b0d      	ldr	r3, [pc, #52]	; (402364 <sysclk_init+0x6c>)
  402330:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  402332:	480d      	ldr	r0, [pc, #52]	; (402368 <sysclk_init+0x70>)
  402334:	4b02      	ldr	r3, [pc, #8]	; (402340 <sysclk_init+0x48>)
  402336:	4798      	blx	r3
  402338:	bd10      	pop	{r4, pc}
  40233a:	bf00      	nop
  40233c:	07270e00 	.word	0x07270e00
  402340:	004039ed 	.word	0x004039ed
  402344:	00403291 	.word	0x00403291
  402348:	004032e5 	.word	0x004032e5
  40234c:	004032f5 	.word	0x004032f5
  402350:	20183f01 	.word	0x20183f01
  402354:	400e0600 	.word	0x400e0600
  402358:	00403305 	.word	0x00403305
  40235c:	004031f5 	.word	0x004031f5
  402360:	0040322d 	.word	0x0040322d
  402364:	004038e1 	.word	0x004038e1
  402368:	11e1a300 	.word	0x11e1a300

0040236c <usart_serial_write_packet>:
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
  40236c:	2a00      	cmp	r2, #0
  40236e:	d054      	beq.n	40241a <usart_serial_write_packet+0xae>
{
  402370:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402374:	4692      	mov	sl, r2
  402376:	4606      	mov	r6, r0
  402378:	460f      	mov	r7, r1
  40237a:	448a      	add	sl, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40237c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 402438 <usart_serial_write_packet+0xcc>
		while (uart_write((Uart*)p_usart, c)!=0);
  402380:	4d27      	ldr	r5, [pc, #156]	; (402420 <usart_serial_write_packet+0xb4>)
		return 1;
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  402382:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 40243c <usart_serial_write_packet+0xd0>
  402386:	e006      	b.n	402396 <usart_serial_write_packet+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  402388:	4621      	mov	r1, r4
  40238a:	4640      	mov	r0, r8
  40238c:	47a8      	blx	r5
  40238e:	2800      	cmp	r0, #0
  402390:	d1fa      	bne.n	402388 <usart_serial_write_packet+0x1c>
	while (len) {
  402392:	45ba      	cmp	sl, r7
  402394:	d03e      	beq.n	402414 <usart_serial_write_packet+0xa8>
		usart_serial_putchar(usart, *data);
  402396:	f817 4b01 	ldrb.w	r4, [r7], #1
	if (UART0 == (Uart*)p_usart) {
  40239a:	4546      	cmp	r6, r8
  40239c:	d0f4      	beq.n	402388 <usart_serial_write_packet+0x1c>
	if (UART1 == (Uart*)p_usart) {
  40239e:	454e      	cmp	r6, r9
  4023a0:	d016      	beq.n	4023d0 <usart_serial_write_packet+0x64>
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4023a2:	4b20      	ldr	r3, [pc, #128]	; (402424 <usart_serial_write_packet+0xb8>)
  4023a4:	429e      	cmp	r6, r3
  4023a6:	d019      	beq.n	4023dc <usart_serial_write_packet+0x70>
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4023a8:	4b1f      	ldr	r3, [pc, #124]	; (402428 <usart_serial_write_packet+0xbc>)
  4023aa:	429e      	cmp	r6, r3
  4023ac:	d01c      	beq.n	4023e8 <usart_serial_write_packet+0x7c>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4023ae:	4b1f      	ldr	r3, [pc, #124]	; (40242c <usart_serial_write_packet+0xc0>)
  4023b0:	429e      	cmp	r6, r3
  4023b2:	d01f      	beq.n	4023f4 <usart_serial_write_packet+0x88>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4023b4:	4b1e      	ldr	r3, [pc, #120]	; (402430 <usart_serial_write_packet+0xc4>)
  4023b6:	429e      	cmp	r6, r3
  4023b8:	d024      	beq.n	402404 <usart_serial_write_packet+0x98>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4023ba:	4b1e      	ldr	r3, [pc, #120]	; (402434 <usart_serial_write_packet+0xc8>)
  4023bc:	429e      	cmp	r6, r3
  4023be:	d1e8      	bne.n	402392 <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  4023c0:	f8df b07c 	ldr.w	fp, [pc, #124]	; 402440 <usart_serial_write_packet+0xd4>
  4023c4:	4621      	mov	r1, r4
  4023c6:	481b      	ldr	r0, [pc, #108]	; (402434 <usart_serial_write_packet+0xc8>)
  4023c8:	47d8      	blx	fp
  4023ca:	2800      	cmp	r0, #0
  4023cc:	d1fa      	bne.n	4023c4 <usart_serial_write_packet+0x58>
  4023ce:	e7e0      	b.n	402392 <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  4023d0:	4621      	mov	r1, r4
  4023d2:	4648      	mov	r0, r9
  4023d4:	47a8      	blx	r5
  4023d6:	2800      	cmp	r0, #0
  4023d8:	d1fa      	bne.n	4023d0 <usart_serial_write_packet+0x64>
  4023da:	e7da      	b.n	402392 <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  4023dc:	4621      	mov	r1, r4
  4023de:	4811      	ldr	r0, [pc, #68]	; (402424 <usart_serial_write_packet+0xb8>)
  4023e0:	47a8      	blx	r5
  4023e2:	2800      	cmp	r0, #0
  4023e4:	d1fa      	bne.n	4023dc <usart_serial_write_packet+0x70>
  4023e6:	e7d4      	b.n	402392 <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  4023e8:	4621      	mov	r1, r4
  4023ea:	480f      	ldr	r0, [pc, #60]	; (402428 <usart_serial_write_packet+0xbc>)
  4023ec:	47a8      	blx	r5
  4023ee:	2800      	cmp	r0, #0
  4023f0:	d1fa      	bne.n	4023e8 <usart_serial_write_packet+0x7c>
  4023f2:	e7ce      	b.n	402392 <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  4023f4:	f8df b048 	ldr.w	fp, [pc, #72]	; 402440 <usart_serial_write_packet+0xd4>
  4023f8:	4621      	mov	r1, r4
  4023fa:	480c      	ldr	r0, [pc, #48]	; (40242c <usart_serial_write_packet+0xc0>)
  4023fc:	47d8      	blx	fp
  4023fe:	2800      	cmp	r0, #0
  402400:	d1fa      	bne.n	4023f8 <usart_serial_write_packet+0x8c>
  402402:	e7c6      	b.n	402392 <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  402404:	f8df b038 	ldr.w	fp, [pc, #56]	; 402440 <usart_serial_write_packet+0xd4>
  402408:	4621      	mov	r1, r4
  40240a:	4809      	ldr	r0, [pc, #36]	; (402430 <usart_serial_write_packet+0xc4>)
  40240c:	47d8      	blx	fp
  40240e:	2800      	cmp	r0, #0
  402410:	d1fa      	bne.n	402408 <usart_serial_write_packet+0x9c>
  402412:	e7be      	b.n	402392 <usart_serial_write_packet+0x26>
		len--;
		data++;
	}
	return STATUS_OK;
}
  402414:	2000      	movs	r0, #0
  402416:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40241a:	2000      	movs	r0, #0
  40241c:	4770      	bx	lr
  40241e:	bf00      	nop
  402420:	004036e1 	.word	0x004036e1
  402424:	400e1a00 	.word	0x400e1a00
  402428:	400e1c00 	.word	0x400e1c00
  40242c:	40024000 	.word	0x40024000
  402430:	40028000 	.word	0x40028000
  402434:	4002c000 	.word	0x4002c000
  402438:	400e0800 	.word	0x400e0800
  40243c:	400e0a00 	.word	0x400e0a00
  402440:	004037e9 	.word	0x004037e9

00402444 <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  402444:	b510      	push	{r4, lr}
  402446:	4604      	mov	r4, r0
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
  402448:	4b10      	ldr	r3, [pc, #64]	; (40248c <spi_master_init+0x48>)
  40244a:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  40244c:	2380      	movs	r3, #128	; 0x80
  40244e:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  402450:	6863      	ldr	r3, [r4, #4]
  402452:	f043 0301 	orr.w	r3, r3, #1
  402456:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  402458:	6863      	ldr	r3, [r4, #4]
  40245a:	f043 0310 	orr.w	r3, r3, #16
  40245e:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  402460:	6863      	ldr	r3, [r4, #4]
  402462:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  402466:	6063      	str	r3, [r4, #4]
#endif
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  402468:	2100      	movs	r1, #0
  40246a:	4620      	mov	r0, r4
  40246c:	4b08      	ldr	r3, [pc, #32]	; (402490 <spi_master_init+0x4c>)
  40246e:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  402470:	6863      	ldr	r3, [r4, #4]
  402472:	f023 0302 	bic.w	r3, r3, #2
  402476:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  402478:	6863      	ldr	r3, [r4, #4]
  40247a:	f023 0304 	bic.w	r3, r3, #4
  40247e:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  402480:	2100      	movs	r1, #0
  402482:	4620      	mov	r0, r4
  402484:	4b03      	ldr	r3, [pc, #12]	; (402494 <spi_master_init+0x50>)
  402486:	4798      	blx	r3
  402488:	bd10      	pop	{r4, pc}
  40248a:	bf00      	nop
  40248c:	00403335 	.word	0x00403335
  402490:	00403361 	.word	0x00403361
  402494:	00403377 	.word	0x00403377

00402498 <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  402498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40249c:	4604      	mov	r4, r0
  40249e:	460d      	mov	r5, r1
  4024a0:	4616      	mov	r6, r2
#if (SAM4L)
    int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_pba_hz());
#else
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_peripheral_hz());
  4024a2:	4915      	ldr	r1, [pc, #84]	; (4024f8 <spi_master_setup_device+0x60>)
  4024a4:	4618      	mov	r0, r3
  4024a6:	4b15      	ldr	r3, [pc, #84]	; (4024fc <spi_master_setup_device+0x64>)
  4024a8:	4798      	blx	r3
  4024aa:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  4024ac:	2300      	movs	r3, #0
  4024ae:	461a      	mov	r2, r3
  4024b0:	6829      	ldr	r1, [r5, #0]
  4024b2:	4620      	mov	r0, r4
  4024b4:	f8df 805c 	ldr.w	r8, [pc, #92]	; 402514 <spi_master_setup_device+0x7c>
  4024b8:	47c0      	blx	r8
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  4024ba:	2208      	movs	r2, #8
  4024bc:	6829      	ldr	r1, [r5, #0]
  4024be:	4620      	mov	r0, r4
  4024c0:	4b0f      	ldr	r3, [pc, #60]	; (402500 <spi_master_setup_device+0x68>)
  4024c2:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  4024c4:	b2fa      	uxtb	r2, r7
  4024c6:	6829      	ldr	r1, [r5, #0]
  4024c8:	4620      	mov	r0, r4
  4024ca:	4b0e      	ldr	r3, [pc, #56]	; (402504 <spi_master_setup_device+0x6c>)
  4024cc:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  4024ce:	2208      	movs	r2, #8
  4024d0:	6829      	ldr	r1, [r5, #0]
  4024d2:	4620      	mov	r0, r4
  4024d4:	4b0c      	ldr	r3, [pc, #48]	; (402508 <spi_master_setup_device+0x70>)
  4024d6:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  4024d8:	0872      	lsrs	r2, r6, #1
  4024da:	6829      	ldr	r1, [r5, #0]
  4024dc:	4620      	mov	r0, r4
  4024de:	4b0b      	ldr	r3, [pc, #44]	; (40250c <spi_master_setup_device+0x74>)
  4024e0:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  4024e2:	f086 0201 	eor.w	r2, r6, #1
  4024e6:	f002 0201 	and.w	r2, r2, #1
  4024ea:	6829      	ldr	r1, [r5, #0]
  4024ec:	4620      	mov	r0, r4
  4024ee:	4b08      	ldr	r3, [pc, #32]	; (402510 <spi_master_setup_device+0x78>)
  4024f0:	4798      	blx	r3
  4024f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4024f6:	bf00      	nop
  4024f8:	08f0d180 	.word	0x08f0d180
  4024fc:	00403453 	.word	0x00403453
  402500:	0040343f 	.word	0x0040343f
  402504:	00403469 	.word	0x00403469
  402508:	004033f9 	.word	0x004033f9
  40250c:	004033bd 	.word	0x004033bd
  402510:	004033db 	.word	0x004033db
  402514:	00403491 	.word	0x00403491

00402518 <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
  402518:	b508      	push	{r3, lr}
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
  40251a:	6843      	ldr	r3, [r0, #4]
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
  40251c:	f013 0f04 	tst.w	r3, #4
  402520:	d006      	beq.n	402530 <spi_select_device+0x18>
		if (device->id < MAX_NUM_WITH_DECODER) {
  402522:	6809      	ldr	r1, [r1, #0]
  402524:	290f      	cmp	r1, #15
  402526:	d900      	bls.n	40252a <spi_select_device+0x12>
  402528:	bd08      	pop	{r3, pc}
			spi_set_peripheral_chip_select_value(p_spi, device->id);
  40252a:	4b06      	ldr	r3, [pc, #24]	; (402544 <spi_select_device+0x2c>)
  40252c:	4798      	blx	r3
  40252e:	bd08      	pop	{r3, pc}
		}
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
  402530:	6809      	ldr	r1, [r1, #0]
  402532:	2903      	cmp	r1, #3
  402534:	d8f8      	bhi.n	402528 <spi_select_device+0x10>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
  402536:	2301      	movs	r3, #1
  402538:	fa03 f101 	lsl.w	r1, r3, r1
  40253c:	43c9      	mvns	r1, r1
  40253e:	4b01      	ldr	r3, [pc, #4]	; (402544 <spi_select_device+0x2c>)
  402540:	4798      	blx	r3
		}
	}
}
  402542:	e7f1      	b.n	402528 <spi_select_device+0x10>
  402544:	00403361 	.word	0x00403361

00402548 <spi_write_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t i = 0;
	uint8_t val;

	while (len) {
  402548:	b11a      	cbz	r2, 402552 <spi_write_packet+0xa>
{
  40254a:	b410      	push	{r4}
  40254c:	460c      	mov	r4, r1
  40254e:	4411      	add	r1, r2
  402550:	e006      	b.n	402560 <spi_write_packet+0x18>
		spi_write_single(p_spi, val);
		i++;
		len--;
	}

	return STATUS_OK;
  402552:	2000      	movs	r0, #0
  402554:	4770      	bx	lr
		val = data[i];
  402556:	f814 3b01 	ldrb.w	r3, [r4], #1
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  40255a:	60c3      	str	r3, [r0, #12]
	while (len) {
  40255c:	42a1      	cmp	r1, r4
  40255e:	d00c      	beq.n	40257a <spi_write_packet+0x32>
{
  402560:	f643 2399 	movw	r3, #15001	; 0x3a99
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_ready(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  402564:	6902      	ldr	r2, [r0, #16]
		while (!spi_is_tx_ready(p_spi)) {
  402566:	f012 0f02 	tst.w	r2, #2
  40256a:	d1f4      	bne.n	402556 <spi_write_packet+0xe>
			if (!timeout--) {
  40256c:	3b01      	subs	r3, #1
  40256e:	d1f9      	bne.n	402564 <spi_write_packet+0x1c>
				return ERR_TIMEOUT;
  402570:	f06f 0002 	mvn.w	r0, #2
}
  402574:	f85d 4b04 	ldr.w	r4, [sp], #4
  402578:	4770      	bx	lr
	return STATUS_OK;
  40257a:	2000      	movs	r0, #0
  40257c:	e7fa      	b.n	402574 <spi_write_packet+0x2c>

0040257e <spi_read_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint8_t val;
	uint32_t i = 0;

	while (len) {
  40257e:	b13a      	cbz	r2, 402590 <spi_read_packet+0x12>
{
  402580:	b470      	push	{r4, r5, r6}
  402582:	4615      	mov	r5, r2
  402584:	460c      	mov	r4, r1
  402586:	440d      	add	r5, r1
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  402588:	26ff      	movs	r6, #255	; 0xff
 *
 * \return 1 if the SPI Receiver is ready, otherwise 0.
 */
static inline uint32_t spi_is_rx_ready(Spi *p_spi)
{
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  40258a:	f240 2101 	movw	r1, #513	; 0x201
  40258e:	e012      	b.n	4025b6 <spi_read_packet+0x38>
		data[i] = val;
		i++;
		len--;
	}

	return STATUS_OK;
  402590:	2000      	movs	r0, #0
  402592:	4770      	bx	lr
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  402594:	60c6      	str	r6, [r0, #12]
		while (!spi_is_rx_ready(p_spi)) {
  402596:	f643 2399 	movw	r3, #15001	; 0x3a99
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  40259a:	6902      	ldr	r2, [r0, #16]
  40259c:	ea31 0202 	bics.w	r2, r1, r2
  4025a0:	d004      	beq.n	4025ac <spi_read_packet+0x2e>
			if (!timeout--) {
  4025a2:	3b01      	subs	r3, #1
  4025a4:	d1f9      	bne.n	40259a <spi_read_packet+0x1c>
				return ERR_TIMEOUT;
  4025a6:	f06f 0002 	mvn.w	r0, #2
  4025aa:	e00e      	b.n	4025ca <spi_read_packet+0x4c>
	return (p_spi->SPI_RDR & SPI_RDR_RD_Msk);
  4025ac:	6883      	ldr	r3, [r0, #8]
 * \param data      Data to read.
 *
 */
static inline void spi_read_single(Spi *p_spi, uint8_t *data)
{
	*data = (uint8_t)spi_get(p_spi);
  4025ae:	f804 3b01 	strb.w	r3, [r4], #1
	while (len) {
  4025b2:	42a5      	cmp	r5, r4
  4025b4:	d00b      	beq.n	4025ce <spi_read_packet+0x50>
{
  4025b6:	f643 2399 	movw	r3, #15001	; 0x3a99
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  4025ba:	6902      	ldr	r2, [r0, #16]
		while (!spi_is_tx_ready(p_spi)) {
  4025bc:	f012 0f02 	tst.w	r2, #2
  4025c0:	d1e8      	bne.n	402594 <spi_read_packet+0x16>
			if (!timeout--) {
  4025c2:	3b01      	subs	r3, #1
  4025c4:	d1f9      	bne.n	4025ba <spi_read_packet+0x3c>
				return ERR_TIMEOUT;
  4025c6:	f06f 0002 	mvn.w	r0, #2
}
  4025ca:	bc70      	pop	{r4, r5, r6}
  4025cc:	4770      	bx	lr
	return STATUS_OK;
  4025ce:	2000      	movs	r0, #0
  4025d0:	e7fb      	b.n	4025ca <spi_read_packet+0x4c>
	...

004025d4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4025d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4025d8:	b980      	cbnz	r0, 4025fc <_read+0x28>
  4025da:	460c      	mov	r4, r1
  4025dc:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  4025de:	2a00      	cmp	r2, #0
  4025e0:	dd0f      	ble.n	402602 <_read+0x2e>
  4025e2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4025e4:	4e08      	ldr	r6, [pc, #32]	; (402608 <_read+0x34>)
  4025e6:	4d09      	ldr	r5, [pc, #36]	; (40260c <_read+0x38>)
  4025e8:	6830      	ldr	r0, [r6, #0]
  4025ea:	4621      	mov	r1, r4
  4025ec:	682b      	ldr	r3, [r5, #0]
  4025ee:	4798      	blx	r3
		ptr++;
  4025f0:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  4025f2:	42bc      	cmp	r4, r7
  4025f4:	d1f8      	bne.n	4025e8 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  4025f6:	4640      	mov	r0, r8
  4025f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4025fc:	f04f 38ff 	mov.w	r8, #4294967295
  402600:	e7f9      	b.n	4025f6 <_read+0x22>
	for (; len > 0; --len) {
  402602:	4680      	mov	r8, r0
  402604:	e7f7      	b.n	4025f6 <_read+0x22>
  402606:	bf00      	nop
  402608:	2040c860 	.word	0x2040c860
  40260c:	2040c858 	.word	0x2040c858

00402610 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  402610:	3801      	subs	r0, #1
  402612:	2802      	cmp	r0, #2
  402614:	d815      	bhi.n	402642 <_write+0x32>
{
  402616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40261a:	460e      	mov	r6, r1
  40261c:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  40261e:	b19a      	cbz	r2, 402648 <_write+0x38>
  402620:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  402622:	f8df 8038 	ldr.w	r8, [pc, #56]	; 40265c <_write+0x4c>
  402626:	4f0c      	ldr	r7, [pc, #48]	; (402658 <_write+0x48>)
  402628:	f8d8 0000 	ldr.w	r0, [r8]
  40262c:	f815 1b01 	ldrb.w	r1, [r5], #1
  402630:	683b      	ldr	r3, [r7, #0]
  402632:	4798      	blx	r3
  402634:	2800      	cmp	r0, #0
  402636:	db0a      	blt.n	40264e <_write+0x3e>
  402638:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  40263a:	3c01      	subs	r4, #1
  40263c:	d1f4      	bne.n	402628 <_write+0x18>
  40263e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  402642:	f04f 30ff 	mov.w	r0, #4294967295
  402646:	4770      	bx	lr
	for (; len != 0; --len) {
  402648:	4610      	mov	r0, r2
  40264a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  40264e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  402652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402656:	bf00      	nop
  402658:	2040c85c 	.word	0x2040c85c
  40265c:	2040c860 	.word	0x2040c860

00402660 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  402660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  402664:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402668:	4b9e      	ldr	r3, [pc, #632]	; (4028e4 <board_init+0x284>)
  40266a:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  40266c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402670:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  402674:	4b9c      	ldr	r3, [pc, #624]	; (4028e8 <board_init+0x288>)
  402676:	2200      	movs	r2, #0
  402678:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  40267c:	695a      	ldr	r2, [r3, #20]
  40267e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  402682:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  402684:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402688:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  40268c:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  402690:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  402694:	f007 0007 	and.w	r0, r7, #7
  402698:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40269a:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40269e:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  4026a2:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  4026a6:	f3bf 8f4f 	dsb	sy
  4026aa:	f04f 34ff 	mov.w	r4, #4294967295
  4026ae:	fa04 fc00 	lsl.w	ip, r4, r0
  4026b2:	fa06 f000 	lsl.w	r0, r6, r0
  4026b6:	fa04 f40e 	lsl.w	r4, r4, lr
  4026ba:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  4026be:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  4026c0:	463a      	mov	r2, r7
  4026c2:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  4026c4:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  4026c8:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  4026cc:	3a01      	subs	r2, #1
  4026ce:	4423      	add	r3, r4
  4026d0:	f1b2 3fff 	cmp.w	r2, #4294967295
  4026d4:	d1f6      	bne.n	4026c4 <board_init+0x64>
        } while(sets--);
  4026d6:	3e01      	subs	r6, #1
  4026d8:	4460      	add	r0, ip
  4026da:	f1b6 3fff 	cmp.w	r6, #4294967295
  4026de:	d1ef      	bne.n	4026c0 <board_init+0x60>
  4026e0:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  4026e4:	4b80      	ldr	r3, [pc, #512]	; (4028e8 <board_init+0x288>)
  4026e6:	695a      	ldr	r2, [r3, #20]
  4026e8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  4026ec:	615a      	str	r2, [r3, #20]
  4026ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4026f2:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4026f6:	4a7d      	ldr	r2, [pc, #500]	; (4028ec <board_init+0x28c>)
  4026f8:	497d      	ldr	r1, [pc, #500]	; (4028f0 <board_init+0x290>)
  4026fa:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4026fc:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  402700:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  402702:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402706:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  40270a:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  40270e:	f022 0201 	bic.w	r2, r2, #1
  402712:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  402716:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  40271a:	f022 0201 	bic.w	r2, r2, #1
  40271e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  402722:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402726:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40272a:	200a      	movs	r0, #10
  40272c:	4c71      	ldr	r4, [pc, #452]	; (4028f4 <board_init+0x294>)
  40272e:	47a0      	blx	r4
  402730:	200b      	movs	r0, #11
  402732:	47a0      	blx	r4
  402734:	200c      	movs	r0, #12
  402736:	47a0      	blx	r4
  402738:	2010      	movs	r0, #16
  40273a:	47a0      	blx	r4
  40273c:	2011      	movs	r0, #17
  40273e:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402740:	4e6d      	ldr	r6, [pc, #436]	; (4028f8 <board_init+0x298>)
  402742:	f44f 7880 	mov.w	r8, #256	; 0x100
  402746:	f8c6 8010 	str.w	r8, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40274a:	f8c6 80a0 	str.w	r8, [r6, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40274e:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402752:	4c6a      	ldr	r4, [pc, #424]	; (4028fc <board_init+0x29c>)
  402754:	f44f 6500 	mov.w	r5, #2048	; 0x800
  402758:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40275a:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  40275e:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  402760:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  402764:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFER = mask;
  402766:	6225      	str	r5, [r4, #32]
		base->PIO_IFSCER = mask;
  402768:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  40276c:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40276e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402772:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402774:	6f63      	ldr	r3, [r4, #116]	; 0x74
  402776:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40277a:	6763      	str	r3, [r4, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  40277c:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  402780:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  402784:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
		base->PIO_PUDR = mask;
  402788:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  40278c:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40278e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  402792:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  402794:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402796:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40279a:	6f22      	ldr	r2, [r4, #112]	; 0x70
  40279c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  4027a0:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4027a2:	6f62      	ldr	r2, [r4, #116]	; 0x74
  4027a4:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  4027a8:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4027aa:	6063      	str	r3, [r4, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  4027ac:	4a54      	ldr	r2, [pc, #336]	; (402900 <board_init+0x2a0>)
  4027ae:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  4027b2:	f043 0310 	orr.w	r3, r3, #16
  4027b6:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  4027ba:	f502 22b2 	add.w	r2, r2, #364544	; 0x59000
  4027be:	2310      	movs	r3, #16
  4027c0:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4027c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  4027c6:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  4027c8:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4027ca:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4027ce:	6f11      	ldr	r1, [r2, #112]	; 0x70
  4027d0:	4319      	orrs	r1, r3
  4027d2:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4027d4:	6f51      	ldr	r1, [r2, #116]	; 0x74
  4027d6:	4319      	orrs	r1, r3
  4027d8:	6751      	str	r1, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4027da:	6053      	str	r3, [r2, #4]
		base->PIO_PUDR = mask;
  4027dc:	2208      	movs	r2, #8
  4027de:	6622      	str	r2, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4027e0:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4027e4:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  4027e6:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4027e8:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4027ec:	6f21      	ldr	r1, [r4, #112]	; 0x70
  4027ee:	f021 0108 	bic.w	r1, r1, #8
  4027f2:	6721      	str	r1, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4027f4:	6f61      	ldr	r1, [r4, #116]	; 0x74
  4027f6:	f021 0108 	bic.w	r1, r1, #8
  4027fa:	6761      	str	r1, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4027fc:	6062      	str	r2, [r4, #4]
		base->PIO_PUDR = mask;
  4027fe:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  402800:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  402804:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  402806:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402808:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40280c:	6f22      	ldr	r2, [r4, #112]	; 0x70
  40280e:	f022 0210 	bic.w	r2, r2, #16
  402812:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402814:	6f62      	ldr	r2, [r4, #116]	; 0x74
  402816:	f022 0210 	bic.w	r2, r2, #16
  40281a:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40281c:	6063      	str	r3, [r4, #4]
	ioport_set_pin_mode(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on EBI*/
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  40281e:	2300      	movs	r3, #0
  402820:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  402824:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  402828:	4630      	mov	r0, r6
  40282a:	4f36      	ldr	r7, [pc, #216]	; (402904 <board_init+0x2a4>)
  40282c:	47b8      	blx	r7
	pio_configure(PIN_EBI_CDS_PIO, PIN_EBI_CDS_TYPE, PIN_EBI_CDS_MASK, PIN_EBI_CDS_ATTRI);
  40282e:	2300      	movs	r3, #0
  402830:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  402834:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  402838:	4630      	mov	r0, r6
  40283a:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAL_PIO, PIN_EBI_DATAL_TYPE, PIN_EBI_DATAL_MASK, PIN_EBI_DATAL_ATTRI);
  40283c:	2301      	movs	r3, #1
  40283e:	22ff      	movs	r2, #255	; 0xff
  402840:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402844:	4630      	mov	r0, r6
  402846:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_0_PIO, PIN_EBI_DATAH_0_TYPE, PIN_EBI_DATAH_0_MASK, PIN_EBI_DATAH_0_ATTRI);
  402848:	2301      	movs	r3, #1
  40284a:	223f      	movs	r2, #63	; 0x3f
  40284c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402850:	482d      	ldr	r0, [pc, #180]	; (402908 <board_init+0x2a8>)
  402852:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_1_PIO, PIN_EBI_DATAH_1_TYPE, PIN_EBI_DATAH_1_MASK, PIN_EBI_DATAH_1_ATTRI);
  402854:	2301      	movs	r3, #1
  402856:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  40285a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40285e:	4620      	mov	r0, r4
  402860:	47b8      	blx	r7
	pio_configure(PIN_EBI_NWE_PIO, PIN_EBI_NWE_TYPE, PIN_EBI_NWE_MASK, PIN_EBI_NWE_ATTRI);
  402862:	2301      	movs	r3, #1
  402864:	4642      	mov	r2, r8
  402866:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40286a:	4630      	mov	r0, r6
  40286c:	47b8      	blx	r7
	pio_configure(PIN_EBI_NRD_PIO, PIN_EBI_NRD_TYPE, PIN_EBI_NRD_MASK, PIN_EBI_NRD_ATTRI);
  40286e:	2301      	movs	r3, #1
  402870:	462a      	mov	r2, r5
  402872:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402876:	4630      	mov	r0, r6
  402878:	47b8      	blx	r7
	pio_configure(PIN_EBI_CS_PIO, PIN_EBI_CS_TYPE, PIN_EBI_CS_MASK, PIN_EBI_CS_ATTRI);
  40287a:	2301      	movs	r3, #1
  40287c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  402880:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402884:	4821      	ldr	r0, [pc, #132]	; (40290c <board_init+0x2ac>)
  402886:	47b8      	blx	r7
	pio_configure(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_TYPE, PIN_EBI_BACKLIGHT_MASK, PIN_EBI_BACKLIGHT_ATTRI);
  402888:	2300      	movs	r3, #0
  40288a:	f44f 7200 	mov.w	r2, #512	; 0x200
  40288e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402892:	4630      	mov	r0, r6
  402894:	47b8      	blx	r7
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  402896:	f44f 7100 	mov.w	r1, #512	; 0x200
  40289a:	4630      	mov	r0, r6
  40289c:	4b1c      	ldr	r3, [pc, #112]	; (402910 <board_init+0x2b0>)
  40289e:	4798      	blx	r3
	MATRIX->CCFG_SMCNFCS = CCFG_SMCNFCS_SDRAMEN;
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on SPI*/
	pio_configure_pin(LCD_SPI_MISO_PIO, LCD_SPI_MISO_FLAGS);
  4028a0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4028a4:	2074      	movs	r0, #116	; 0x74
  4028a6:	4c1b      	ldr	r4, [pc, #108]	; (402914 <board_init+0x2b4>)
  4028a8:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_MOSI_PIO, LCD_SPI_MOSI_FLAGS);
  4028aa:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4028ae:	2075      	movs	r0, #117	; 0x75
  4028b0:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_SPCK_PIO, LCD_SPI_SPCK_FLAGS);
  4028b2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4028b6:	2076      	movs	r0, #118	; 0x76
  4028b8:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_NPCS_PIO, LCD_SPI_NPCS_FLAGS);
  4028ba:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4028be:	207b      	movs	r0, #123	; 0x7b
  4028c0:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_RESET_PIO, LCD_SPI_RESET_FLAGS);
  4028c2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4028c6:	2018      	movs	r0, #24
  4028c8:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
  4028ca:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4028ce:	2006      	movs	r0, #6
  4028d0:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
  4028d2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4028d6:	2053      	movs	r0, #83	; 0x53
  4028d8:	47a0      	blx	r4
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);
  4028da:	2053      	movs	r0, #83	; 0x53
  4028dc:	4b0e      	ldr	r3, [pc, #56]	; (402918 <board_init+0x2b8>)
  4028de:	4798      	blx	r3
  4028e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4028e4:	400e1850 	.word	0x400e1850
  4028e8:	e000ed00 	.word	0xe000ed00
  4028ec:	400e0c00 	.word	0x400e0c00
  4028f0:	5a00080c 	.word	0x5a00080c
  4028f4:	00403315 	.word	0x00403315
  4028f8:	400e1200 	.word	0x400e1200
  4028fc:	400e0e00 	.word	0x400e0e00
  402900:	40088000 	.word	0x40088000
  402904:	00402f41 	.word	0x00402f41
  402908:	400e1600 	.word	0x400e1600
  40290c:	400e1400 	.word	0x400e1400
  402910:	00402e4d 	.word	0x00402e4d
  402914:	00403011 	.word	0x00403011
  402918:	00402fd9 	.word	0x00402fd9

0040291c <ili9488_check_box_coordinates>:
 * \param p_ul_x2 X coordinate of lower-right corner on LCD.
 * \param p_ul_y2 Y coordinate of lower-right corner on LCD.
 */
static void ili9488_check_box_coordinates(uint32_t *p_ul_x1, uint32_t *p_ul_y1,
		uint32_t *p_ul_x2, uint32_t *p_ul_y2)
{
  40291c:	b430      	push	{r4, r5}
	uint32_t dw;

	if (*p_ul_x1 >= ILI9488_LCD_WIDTH) {
  40291e:	6804      	ldr	r4, [r0, #0]
  402920:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
  402924:	d302      	bcc.n	40292c <ili9488_check_box_coordinates+0x10>
		*p_ul_x1 = ILI9488_LCD_WIDTH - 1;
  402926:	f240 143f 	movw	r4, #319	; 0x13f
  40292a:	6004      	str	r4, [r0, #0]
	}

	if (*p_ul_x2 >= ILI9488_LCD_WIDTH) {
  40292c:	6814      	ldr	r4, [r2, #0]
  40292e:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
  402932:	d302      	bcc.n	40293a <ili9488_check_box_coordinates+0x1e>
		*p_ul_x2 = ILI9488_LCD_WIDTH - 1;
  402934:	f240 143f 	movw	r4, #319	; 0x13f
  402938:	6014      	str	r4, [r2, #0]
	}

	if (*p_ul_y1 >= ILI9488_LCD_HEIGHT) {
  40293a:	680c      	ldr	r4, [r1, #0]
  40293c:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
  402940:	d302      	bcc.n	402948 <ili9488_check_box_coordinates+0x2c>
		*p_ul_y1 = ILI9488_LCD_HEIGHT - 1;
  402942:	f240 14df 	movw	r4, #479	; 0x1df
  402946:	600c      	str	r4, [r1, #0]
	}

	if (*p_ul_y2 >= ILI9488_LCD_HEIGHT) {
  402948:	681c      	ldr	r4, [r3, #0]
  40294a:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
  40294e:	d302      	bcc.n	402956 <ili9488_check_box_coordinates+0x3a>
		*p_ul_y2 = ILI9488_LCD_HEIGHT - 1;
  402950:	f240 14df 	movw	r4, #479	; 0x1df
  402954:	601c      	str	r4, [r3, #0]
	}

	if (*p_ul_x1 > *p_ul_x2) {
  402956:	6804      	ldr	r4, [r0, #0]
  402958:	6815      	ldr	r5, [r2, #0]
  40295a:	42ac      	cmp	r4, r5
  40295c:	d901      	bls.n	402962 <ili9488_check_box_coordinates+0x46>
		dw = *p_ul_x1;
		*p_ul_x1 = *p_ul_x2;
  40295e:	6005      	str	r5, [r0, #0]
		*p_ul_x2 = dw;
  402960:	6014      	str	r4, [r2, #0]
	}

	if (*p_ul_y1 > *p_ul_y2) {
  402962:	680a      	ldr	r2, [r1, #0]
  402964:	6818      	ldr	r0, [r3, #0]
  402966:	4282      	cmp	r2, r0
  402968:	d901      	bls.n	40296e <ili9488_check_box_coordinates+0x52>
		dw = *p_ul_y1;
		*p_ul_y1 = *p_ul_y2;
  40296a:	6008      	str	r0, [r1, #0]
		*p_ul_y2 = dw;
  40296c:	601a      	str	r2, [r3, #0]
	}
}
  40296e:	bc30      	pop	{r4, r5}
  402970:	4770      	bx	lr
	...

00402974 <ili9488_write_ram_prepare>:
{
  402974:	b510      	push	{r4, lr}
  402976:	b082      	sub	sp, #8
	pio_set_pin_low(LCD_SPI_CDS_PIO);
  402978:	2006      	movs	r0, #6
  40297a:	4b0a      	ldr	r3, [pc, #40]	; (4029a4 <ili9488_write_ram_prepare+0x30>)
  40297c:	4798      	blx	r3
	spi_write(BOARD_ILI9488_SPI, ILI9488_CMD_MEMORY_WRITE, BOARD_ILI9488_SPI_NPCS, 0);
  40297e:	2300      	movs	r3, #0
  402980:	2203      	movs	r2, #3
  402982:	212c      	movs	r1, #44	; 0x2c
  402984:	4808      	ldr	r0, [pc, #32]	; (4029a8 <ili9488_write_ram_prepare+0x34>)
  402986:	4c09      	ldr	r4, [pc, #36]	; (4029ac <ili9488_write_ram_prepare+0x38>)
  402988:	47a0      	blx	r4
	for(i = 0; i < 0xFF; i++);
  40298a:	2300      	movs	r3, #0
  40298c:	9301      	str	r3, [sp, #4]
  40298e:	9b01      	ldr	r3, [sp, #4]
  402990:	2bfe      	cmp	r3, #254	; 0xfe
  402992:	d805      	bhi.n	4029a0 <ili9488_write_ram_prepare+0x2c>
  402994:	9b01      	ldr	r3, [sp, #4]
  402996:	3301      	adds	r3, #1
  402998:	9301      	str	r3, [sp, #4]
  40299a:	9b01      	ldr	r3, [sp, #4]
  40299c:	2bfe      	cmp	r3, #254	; 0xfe
  40299e:	d9f9      	bls.n	402994 <ili9488_write_ram_prepare+0x20>
}
  4029a0:	b002      	add	sp, #8
  4029a2:	bd10      	pop	{r4, pc}
  4029a4:	00402ff5 	.word	0x00402ff5
  4029a8:	40008000 	.word	0x40008000
  4029ac:	00403389 	.word	0x00403389

004029b0 <ili9488_write_register>:
{
  4029b0:	b570      	push	{r4, r5, r6, lr}
  4029b2:	b082      	sub	sp, #8
  4029b4:	4605      	mov	r5, r0
  4029b6:	460e      	mov	r6, r1
  4029b8:	4614      	mov	r4, r2
	pio_set_pin_low(LCD_SPI_CDS_PIO);
  4029ba:	2006      	movs	r0, #6
  4029bc:	4b14      	ldr	r3, [pc, #80]	; (402a10 <ili9488_write_register+0x60>)
  4029be:	4798      	blx	r3
	spi_write(BOARD_ILI9488_SPI, uc_reg, BOARD_ILI9488_SPI_NPCS, 0);
  4029c0:	2300      	movs	r3, #0
  4029c2:	2203      	movs	r2, #3
  4029c4:	4629      	mov	r1, r5
  4029c6:	4813      	ldr	r0, [pc, #76]	; (402a14 <ili9488_write_register+0x64>)
  4029c8:	4d13      	ldr	r5, [pc, #76]	; (402a18 <ili9488_write_register+0x68>)
  4029ca:	47a8      	blx	r5
	for(i = 0; i < 0xFF; i++);
  4029cc:	2300      	movs	r3, #0
  4029ce:	9301      	str	r3, [sp, #4]
  4029d0:	9b01      	ldr	r3, [sp, #4]
  4029d2:	2bfe      	cmp	r3, #254	; 0xfe
  4029d4:	d805      	bhi.n	4029e2 <ili9488_write_register+0x32>
  4029d6:	9b01      	ldr	r3, [sp, #4]
  4029d8:	3301      	adds	r3, #1
  4029da:	9301      	str	r3, [sp, #4]
  4029dc:	9b01      	ldr	r3, [sp, #4]
  4029de:	2bfe      	cmp	r3, #254	; 0xfe
  4029e0:	d9f9      	bls.n	4029d6 <ili9488_write_register+0x26>
	if(size > 0) {
  4029e2:	b90c      	cbnz	r4, 4029e8 <ili9488_write_register+0x38>
}
  4029e4:	b002      	add	sp, #8
  4029e6:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_pin_high(LCD_SPI_CDS_PIO);
  4029e8:	2006      	movs	r0, #6
  4029ea:	4b0c      	ldr	r3, [pc, #48]	; (402a1c <ili9488_write_register+0x6c>)
  4029ec:	4798      	blx	r3
		spi_write_packet(BOARD_ILI9488_SPI, us_data, size);
  4029ee:	4622      	mov	r2, r4
  4029f0:	4631      	mov	r1, r6
  4029f2:	4808      	ldr	r0, [pc, #32]	; (402a14 <ili9488_write_register+0x64>)
  4029f4:	4b0a      	ldr	r3, [pc, #40]	; (402a20 <ili9488_write_register+0x70>)
  4029f6:	4798      	blx	r3
		for(i = 0; i < 0x5F; i++);
  4029f8:	2300      	movs	r3, #0
  4029fa:	9301      	str	r3, [sp, #4]
  4029fc:	9b01      	ldr	r3, [sp, #4]
  4029fe:	2b5e      	cmp	r3, #94	; 0x5e
  402a00:	d8f0      	bhi.n	4029e4 <ili9488_write_register+0x34>
  402a02:	9b01      	ldr	r3, [sp, #4]
  402a04:	3301      	adds	r3, #1
  402a06:	9301      	str	r3, [sp, #4]
  402a08:	9b01      	ldr	r3, [sp, #4]
  402a0a:	2b5e      	cmp	r3, #94	; 0x5e
  402a0c:	d9f9      	bls.n	402a02 <ili9488_write_register+0x52>
  402a0e:	e7e9      	b.n	4029e4 <ili9488_write_register+0x34>
  402a10:	00402ff5 	.word	0x00402ff5
  402a14:	40008000 	.word	0x40008000
  402a18:	00403389 	.word	0x00403389
  402a1c:	00402fd9 	.word	0x00402fd9
  402a20:	00402549 	.word	0x00402549

00402a24 <ili9488_write_ram_buffer>:
{
  402a24:	b530      	push	{r4, r5, lr}
  402a26:	b083      	sub	sp, #12
  402a28:	4604      	mov	r4, r0
  402a2a:	460d      	mov	r5, r1
	pio_set_pin_high(LCD_SPI_CDS_PIO);
  402a2c:	2006      	movs	r0, #6
  402a2e:	4b0a      	ldr	r3, [pc, #40]	; (402a58 <ili9488_write_ram_buffer+0x34>)
  402a30:	4798      	blx	r3
	spi_write_packet(BOARD_ILI9488_SPI, p_ul_buf, ul_size);
  402a32:	462a      	mov	r2, r5
  402a34:	4621      	mov	r1, r4
  402a36:	4809      	ldr	r0, [pc, #36]	; (402a5c <ili9488_write_ram_buffer+0x38>)
  402a38:	4b09      	ldr	r3, [pc, #36]	; (402a60 <ili9488_write_ram_buffer+0x3c>)
  402a3a:	4798      	blx	r3
	for(i = 0; i < 0xFF; i++);
  402a3c:	2300      	movs	r3, #0
  402a3e:	9301      	str	r3, [sp, #4]
  402a40:	9b01      	ldr	r3, [sp, #4]
  402a42:	2bfe      	cmp	r3, #254	; 0xfe
  402a44:	d805      	bhi.n	402a52 <ili9488_write_ram_buffer+0x2e>
  402a46:	9b01      	ldr	r3, [sp, #4]
  402a48:	3301      	adds	r3, #1
  402a4a:	9301      	str	r3, [sp, #4]
  402a4c:	9b01      	ldr	r3, [sp, #4]
  402a4e:	2bfe      	cmp	r3, #254	; 0xfe
  402a50:	d9f9      	bls.n	402a46 <ili9488_write_ram_buffer+0x22>
}
  402a52:	b003      	add	sp, #12
  402a54:	bd30      	pop	{r4, r5, pc}
  402a56:	bf00      	nop
  402a58:	00402fd9 	.word	0x00402fd9
  402a5c:	40008000 	.word	0x40008000
  402a60:	00402549 	.word	0x00402549

00402a64 <ili9488_delay>:
	for(i = 0; i < ul_ms; i++) {
  402a64:	4601      	mov	r1, r0
  402a66:	b130      	cbz	r0, 402a76 <ili9488_delay+0x12>
  402a68:	4a03      	ldr	r2, [pc, #12]	; (402a78 <ili9488_delay+0x14>)
{
  402a6a:	4b04      	ldr	r3, [pc, #16]	; (402a7c <ili9488_delay+0x18>)
		for(i = 0; i < 100000; i++) {
  402a6c:	3b01      	subs	r3, #1
  402a6e:	d1fd      	bne.n	402a6c <ili9488_delay+0x8>
	for(i = 0; i < ul_ms; i++) {
  402a70:	4291      	cmp	r1, r2
  402a72:	d8fa      	bhi.n	402a6a <ili9488_delay+0x6>
  402a74:	4770      	bx	lr
  402a76:	4770      	bx	lr
  402a78:	000186a1 	.word	0x000186a1
  402a7c:	000186a0 	.word	0x000186a0

00402a80 <ili9488_set_display_direction>:
 * \brief ILI9488 configure landscape.
 *
 * \Param LandscaprMode Landscape Mode.
 */
void ili9488_set_display_direction(enum ili9488_display_direction direction )
{
  402a80:	b500      	push	{lr}
  402a82:	b083      	sub	sp, #12
	ili9488_color_t value;
	if(direction) {
  402a84:	b958      	cbnz	r0, 402a9e <ili9488_set_display_direction+0x1e>
		value = 0xE8;
	} else {
		value = 0x48;
  402a86:	2348      	movs	r3, #72	; 0x48
  402a88:	f88d 3007 	strb.w	r3, [sp, #7]
	}
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &value, 1);
  402a8c:	2201      	movs	r2, #1
  402a8e:	f10d 0107 	add.w	r1, sp, #7
  402a92:	2036      	movs	r0, #54	; 0x36
  402a94:	4b04      	ldr	r3, [pc, #16]	; (402aa8 <ili9488_set_display_direction+0x28>)
  402a96:	4798      	blx	r3
}
  402a98:	b003      	add	sp, #12
  402a9a:	f85d fb04 	ldr.w	pc, [sp], #4
		value = 0xE8;
  402a9e:	23e8      	movs	r3, #232	; 0xe8
  402aa0:	f88d 3007 	strb.w	r3, [sp, #7]
  402aa4:	e7f2      	b.n	402a8c <ili9488_set_display_direction+0xc>
  402aa6:	bf00      	nop
  402aa8:	004029b1 	.word	0x004029b1

00402aac <ili9488_set_window>:
 * \Param y start position.
 * \Param width  Width of window.
 * \Param height Height of window.
 */
void ili9488_set_window(uint16_t x, uint16_t y, uint16_t width, uint16_t height )
{
  402aac:	b510      	push	{r4, lr}
  402aae:	b084      	sub	sp, #16
	uint32_t cnt = 0;
	ili9488_color_t buf[4];

	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	col_start  =  x ;
  402ab0:	f8ad 000e 	strh.w	r0, [sp, #14]
	col_end    =  width + x - 1;
  402ab4:	3a01      	subs	r2, #1
  402ab6:	4402      	add	r2, r0
  402ab8:	f8ad 200c 	strh.w	r2, [sp, #12]

	row_start = y ;
  402abc:	f8ad 100a 	strh.w	r1, [sp, #10]
	row_end   = height + y - 1;
  402ac0:	3b01      	subs	r3, #1
  402ac2:	4419      	add	r1, r3
  402ac4:	f8ad 1008 	strh.w	r1, [sp, #8]

	buf[0] = get_8b_to_16b(col_start);
  402ac8:	0a03      	lsrs	r3, r0, #8
  402aca:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = get_0b_to_8b(col_start);
  402ace:	f88d 0005 	strb.w	r0, [sp, #5]
	buf[2] = get_8b_to_16b(col_end);
  402ad2:	f3c2 2307 	ubfx	r3, r2, #8, #8
  402ad6:	f88d 3006 	strb.w	r3, [sp, #6]
	buf[3] = get_0b_to_8b(col_end);
  402ada:	f88d 2007 	strb.w	r2, [sp, #7]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  402ade:	2204      	movs	r2, #4
  402ae0:	eb0d 0102 	add.w	r1, sp, r2
  402ae4:	202a      	movs	r0, #42	; 0x2a
  402ae6:	4c10      	ldr	r4, [pc, #64]	; (402b28 <ili9488_set_window+0x7c>)
  402ae8:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  402aea:	2200      	movs	r2, #0
  402aec:	4611      	mov	r1, r2
  402aee:	4610      	mov	r0, r2
  402af0:	47a0      	blx	r4

	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(row_start);
  402af2:	f89d 300b 	ldrb.w	r3, [sp, #11]
  402af6:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = get_0b_to_8b(row_start);
  402afa:	f89d 300a 	ldrb.w	r3, [sp, #10]
  402afe:	f88d 3005 	strb.w	r3, [sp, #5]
	buf[2] = get_8b_to_16b(row_end);
  402b02:	f89d 3009 	ldrb.w	r3, [sp, #9]
  402b06:	f88d 3006 	strb.w	r3, [sp, #6]
	buf[3] = get_0b_to_8b(row_end);
  402b0a:	f89d 3008 	ldrb.w	r3, [sp, #8]
  402b0e:	f88d 3007 	strb.w	r3, [sp, #7]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  402b12:	2204      	movs	r2, #4
  402b14:	eb0d 0102 	add.w	r1, sp, r2
  402b18:	202b      	movs	r0, #43	; 0x2b
  402b1a:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  402b1c:	2200      	movs	r2, #0
  402b1e:	4611      	mov	r1, r2
  402b20:	4610      	mov	r0, r2
  402b22:	47a0      	blx	r4
}
  402b24:	b004      	add	sp, #16
  402b26:	bd10      	pop	{r4, pc}
  402b28:	004029b1 	.word	0x004029b1

00402b2c <ili9488_display_on>:

/**
 * \brief Turn on the LCD.
 */
void ili9488_display_on(void)
{
  402b2c:	b508      	push	{r3, lr}
	ili9488_write_register(ILI9488_CMD_DISPLAY_ON, 0, 0);
  402b2e:	2200      	movs	r2, #0
  402b30:	4611      	mov	r1, r2
  402b32:	2029      	movs	r0, #41	; 0x29
  402b34:	4b01      	ldr	r3, [pc, #4]	; (402b3c <ili9488_display_on+0x10>)
  402b36:	4798      	blx	r3
  402b38:	bd08      	pop	{r3, pc}
  402b3a:	bf00      	nop
  402b3c:	004029b1 	.word	0x004029b1

00402b40 <ili9488_set_foreground_color>:
 * \brief Set foreground color.
 *
 * \param ul_color foreground color.
 */
void ili9488_set_foreground_color(uint32_t ul_color)
{
  402b40:	b410      	push	{r4}
		g_ul_pixel_cache[i] = ul_color;
	}
#endif
#ifdef ILI9488_SPIMODE
	for (i = 0; i < LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT; ) {
		g_ul_pixel_cache[i++] = ul_color>>16;
  402b42:	f3c0 4407 	ubfx	r4, r0, #16, #8
		g_ul_pixel_cache[i++] = ul_color>>8;
  402b46:	f3c0 2107 	ubfx	r1, r0, #8, #8
  402b4a:	4b06      	ldr	r3, [pc, #24]	; (402b64 <ili9488_set_foreground_color+0x24>)
  402b4c:	f503 7270 	add.w	r2, r3, #960	; 0x3c0
		g_ul_pixel_cache[i++] = ul_color>>16;
  402b50:	701c      	strb	r4, [r3, #0]
		g_ul_pixel_cache[i++] = ul_color>>8;
  402b52:	7059      	strb	r1, [r3, #1]
		g_ul_pixel_cache[i++] = ul_color&0xFF;
  402b54:	7098      	strb	r0, [r3, #2]
  402b56:	3303      	adds	r3, #3
	for (i = 0; i < LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT; ) {
  402b58:	4293      	cmp	r3, r2
  402b5a:	d1f9      	bne.n	402b50 <ili9488_set_foreground_color+0x10>
	}
#endif
}
  402b5c:	f85d 4b04 	ldr.w	r4, [sp], #4
  402b60:	4770      	bx	lr
  402b62:	bf00      	nop
  402b64:	2040c32c 	.word	0x2040c32c

00402b68 <ili9488_set_cursor_position>:
 *
 * \param x X coordinate of upper-left corner on LCD.
 * \param y Y coordinate of upper-left corner on LCD.
 */
void ili9488_set_cursor_position(uint16_t x, uint16_t y)
{
  402b68:	b510      	push	{r4, lr}
  402b6a:	b084      	sub	sp, #16
  402b6c:	f8ad 0006 	strh.w	r0, [sp, #6]
  402b70:	f8ad 1004 	strh.w	r1, [sp, #4]
	uint32_t cnt = 0;

	ili9488_color_t buf[4];
	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	buf[0] = get_8b_to_16b(x);
  402b74:	0a03      	lsrs	r3, r0, #8
  402b76:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[1] = get_0b_to_8b(x);
  402b7a:	b2c0      	uxtb	r0, r0
  402b7c:	f88d 000d 	strb.w	r0, [sp, #13]
	buf[2] = get_8b_to_16b(x);
  402b80:	f88d 300e 	strb.w	r3, [sp, #14]
	buf[3] = get_0b_to_8b(x);
  402b84:	f88d 000f 	strb.w	r0, [sp, #15]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  402b88:	2204      	movs	r2, #4
  402b8a:	a903      	add	r1, sp, #12
  402b8c:	202a      	movs	r0, #42	; 0x2a
  402b8e:	4c0e      	ldr	r4, [pc, #56]	; (402bc8 <ili9488_set_cursor_position+0x60>)
  402b90:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  402b92:	2200      	movs	r2, #0
  402b94:	4611      	mov	r1, r2
  402b96:	4610      	mov	r0, r2
  402b98:	47a0      	blx	r4


	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(y);
  402b9a:	f89d 2005 	ldrb.w	r2, [sp, #5]
  402b9e:	f88d 200c 	strb.w	r2, [sp, #12]
	buf[1] = get_0b_to_8b(y);
  402ba2:	f89d 3004 	ldrb.w	r3, [sp, #4]
  402ba6:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[2] = get_8b_to_16b(y);
  402baa:	f88d 200e 	strb.w	r2, [sp, #14]
	buf[3] = get_0b_to_8b(y);
  402bae:	f88d 300f 	strb.w	r3, [sp, #15]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  402bb2:	2204      	movs	r2, #4
  402bb4:	a903      	add	r1, sp, #12
  402bb6:	202b      	movs	r0, #43	; 0x2b
  402bb8:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  402bba:	2200      	movs	r2, #0
  402bbc:	4611      	mov	r1, r2
  402bbe:	4610      	mov	r0, r2
  402bc0:	47a0      	blx	r4
}
  402bc2:	b004      	add	sp, #16
  402bc4:	bd10      	pop	{r4, pc}
  402bc6:	bf00      	nop
  402bc8:	004029b1 	.word	0x004029b1

00402bcc <ili9488_init>:
{
  402bcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402bd0:	b087      	sub	sp, #28
  402bd2:	4681      	mov	r9, r0
	struct spi_device ILI9488_SPI_DEVICE = {
  402bd4:	2703      	movs	r7, #3
  402bd6:	ae06      	add	r6, sp, #24
  402bd8:	f846 7d08 	str.w	r7, [r6, #-8]!
	spi_master_init(BOARD_ILI9488_SPI);
  402bdc:	4d5d      	ldr	r5, [pc, #372]	; (402d54 <ili9488_init+0x188>)
  402bde:	4628      	mov	r0, r5
  402be0:	4b5d      	ldr	r3, [pc, #372]	; (402d58 <ili9488_init+0x18c>)
  402be2:	4798      	blx	r3
	spi_master_setup_device(BOARD_ILI9488_SPI, &ILI9488_SPI_DEVICE, SPI_MODE_3, ILI9488_SPI_BAUDRATE, 0);
  402be4:	2400      	movs	r4, #0
  402be6:	9400      	str	r4, [sp, #0]
  402be8:	4b5c      	ldr	r3, [pc, #368]	; (402d5c <ili9488_init+0x190>)
  402bea:	463a      	mov	r2, r7
  402bec:	4631      	mov	r1, r6
  402bee:	4628      	mov	r0, r5
  402bf0:	f8df 8198 	ldr.w	r8, [pc, #408]	; 402d8c <ili9488_init+0x1c0>
  402bf4:	47c0      	blx	r8
	spi_configure_cs_behavior(BOARD_ILI9488_SPI, BOARD_ILI9488_SPI_NPCS, SPI_CS_RISE_NO_TX);
  402bf6:	4622      	mov	r2, r4
  402bf8:	4639      	mov	r1, r7
  402bfa:	4628      	mov	r0, r5
  402bfc:	4b58      	ldr	r3, [pc, #352]	; (402d60 <ili9488_init+0x194>)
  402bfe:	4798      	blx	r3
	spi_select_device(BOARD_ILI9488_SPI, &ILI9488_SPI_DEVICE);
  402c00:	4631      	mov	r1, r6
  402c02:	4628      	mov	r0, r5
  402c04:	4b57      	ldr	r3, [pc, #348]	; (402d64 <ili9488_init+0x198>)
  402c06:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  402c08:	2001      	movs	r0, #1
  402c0a:	6028      	str	r0, [r5, #0]
 * \param p_spi Pointer to an SPI instance.
 * \param ul_sources Interrupts to be enabled.
 */
static inline void spi_enable_interrupt(Spi *p_spi, uint32_t ul_sources)
{
	p_spi->SPI_IER = ul_sources;
  402c0c:	6168      	str	r0, [r5, #20]
	ili9488_write_register(ILI9488_CMD_SOFTWARE_RESET, 0x0000, 0);
  402c0e:	4622      	mov	r2, r4
  402c10:	4621      	mov	r1, r4
  402c12:	4e55      	ldr	r6, [pc, #340]	; (402d68 <ili9488_init+0x19c>)
  402c14:	47b0      	blx	r6
	ili9488_delay(200);
  402c16:	20c8      	movs	r0, #200	; 0xc8
  402c18:	4d54      	ldr	r5, [pc, #336]	; (402d6c <ili9488_init+0x1a0>)
  402c1a:	47a8      	blx	r5
	ili9488_write_register(ILI9488_CMD_SLEEP_OUT, 0x0000, 0);
  402c1c:	4622      	mov	r2, r4
  402c1e:	4621      	mov	r1, r4
  402c20:	2011      	movs	r0, #17
  402c22:	47b0      	blx	r6
	ili9488_delay(200);
  402c24:	20c8      	movs	r0, #200	; 0xc8
  402c26:	47a8      	blx	r5
	reg = 0x81;
  402c28:	2381      	movs	r3, #129	; 0x81
  402c2a:	f88d 300a 	strb.w	r3, [sp, #10]
	param = 0x0;
  402c2e:	f88d 400b 	strb.w	r4, [sp, #11]
  402c32:	2610      	movs	r6, #16
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &reg, 1);
  402c34:	f04f 0801 	mov.w	r8, #1
  402c38:	4f4b      	ldr	r7, [pc, #300]	; (402d68 <ili9488_init+0x19c>)
		for(j = 0; j < 0xFF; j++);
  402c3a:	4625      	mov	r5, r4
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &reg, 1);
  402c3c:	4642      	mov	r2, r8
  402c3e:	f10d 010a 	add.w	r1, sp, #10
  402c42:	20fb      	movs	r0, #251	; 0xfb
  402c44:	47b8      	blx	r7
		reg++;
  402c46:	f89d 300a 	ldrb.w	r3, [sp, #10]
  402c4a:	3301      	adds	r3, #1
  402c4c:	f88d 300a 	strb.w	r3, [sp, #10]
		for(j = 0; j < 0xFF; j++);
  402c50:	9503      	str	r5, [sp, #12]
  402c52:	9b03      	ldr	r3, [sp, #12]
  402c54:	2bfe      	cmp	r3, #254	; 0xfe
  402c56:	d805      	bhi.n	402c64 <ili9488_init+0x98>
  402c58:	9b03      	ldr	r3, [sp, #12]
  402c5a:	3301      	adds	r3, #1
  402c5c:	9303      	str	r3, [sp, #12]
  402c5e:	9b03      	ldr	r3, [sp, #12]
  402c60:	2bfe      	cmp	r3, #254	; 0xfe
  402c62:	d9f9      	bls.n	402c58 <ili9488_init+0x8c>
		ili9488_write_register(ILI9488_CMD_READ_ID4, 0, 0);
  402c64:	462a      	mov	r2, r5
  402c66:	4629      	mov	r1, r5
  402c68:	20d3      	movs	r0, #211	; 0xd3
  402c6a:	47b8      	blx	r7
			pio_set_pin_high(LCD_SPI_CDS_PIO);
  402c6c:	2006      	movs	r0, #6
  402c6e:	4b40      	ldr	r3, [pc, #256]	; (402d70 <ili9488_init+0x1a4>)
  402c70:	4798      	blx	r3
			spi_read_packet(BOARD_ILI9488_SPI, &chipidBuf, 1);
  402c72:	4642      	mov	r2, r8
  402c74:	f10d 0109 	add.w	r1, sp, #9
  402c78:	4836      	ldr	r0, [pc, #216]	; (402d54 <ili9488_init+0x188>)
  402c7a:	4b3e      	ldr	r3, [pc, #248]	; (402d74 <ili9488_init+0x1a8>)
  402c7c:	4798      	blx	r3
			for(j = 0; j < 0xFF; j++);
  402c7e:	9503      	str	r5, [sp, #12]
  402c80:	9b03      	ldr	r3, [sp, #12]
  402c82:	2bfe      	cmp	r3, #254	; 0xfe
  402c84:	d805      	bhi.n	402c92 <ili9488_init+0xc6>
  402c86:	9b03      	ldr	r3, [sp, #12]
  402c88:	3301      	adds	r3, #1
  402c8a:	9303      	str	r3, [sp, #12]
  402c8c:	9b03      	ldr	r3, [sp, #12]
  402c8e:	2bfe      	cmp	r3, #254	; 0xfe
  402c90:	d9f9      	bls.n	402c86 <ili9488_init+0xba>
		chipid |= (chipidBuf & 0xFF) << ((i - 1) << 3);
  402c92:	f89d 3009 	ldrb.w	r3, [sp, #9]
  402c96:	40b3      	lsls	r3, r6
  402c98:	431c      	orrs	r4, r3
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &param, 1);
  402c9a:	4642      	mov	r2, r8
  402c9c:	f10d 010b 	add.w	r1, sp, #11
  402ca0:	20fb      	movs	r0, #251	; 0xfb
  402ca2:	47b8      	blx	r7
		for(j = 0; j < 0xFFF; j++);
  402ca4:	9503      	str	r5, [sp, #12]
  402ca6:	9a03      	ldr	r2, [sp, #12]
  402ca8:	f640 73fe 	movw	r3, #4094	; 0xffe
  402cac:	429a      	cmp	r2, r3
  402cae:	d806      	bhi.n	402cbe <ili9488_init+0xf2>
  402cb0:	461a      	mov	r2, r3
  402cb2:	9b03      	ldr	r3, [sp, #12]
  402cb4:	3301      	adds	r3, #1
  402cb6:	9303      	str	r3, [sp, #12]
  402cb8:	9b03      	ldr	r3, [sp, #12]
  402cba:	4293      	cmp	r3, r2
  402cbc:	d9f9      	bls.n	402cb2 <ili9488_init+0xe6>
  402cbe:	3e08      	subs	r6, #8
	for (i = 3; i > 0; i--) {
  402cc0:	f116 0f08 	cmn.w	r6, #8
  402cc4:	d1ba      	bne.n	402c3c <ili9488_init+0x70>
	if (chipid != ILI9488_DEVICE_CODE) {
  402cc6:	f249 4388 	movw	r3, #38024	; 0x9488
  402cca:	429c      	cmp	r4, r3
  402ccc:	d003      	beq.n	402cd6 <ili9488_init+0x10a>
		return 1;
  402cce:	2001      	movs	r0, #1
}
  402cd0:	b007      	add	sp, #28
  402cd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	param = 0x48;
  402cd6:	ad06      	add	r5, sp, #24
  402cd8:	2348      	movs	r3, #72	; 0x48
  402cda:	f805 3d01 	strb.w	r3, [r5, #-1]!
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &param, 1);
  402cde:	2201      	movs	r2, #1
  402ce0:	4629      	mov	r1, r5
  402ce2:	2036      	movs	r0, #54	; 0x36
  402ce4:	4e20      	ldr	r6, [pc, #128]	; (402d68 <ili9488_init+0x19c>)
  402ce6:	47b0      	blx	r6
	ili9488_delay(100);
  402ce8:	2064      	movs	r0, #100	; 0x64
  402cea:	4c20      	ldr	r4, [pc, #128]	; (402d6c <ili9488_init+0x1a0>)
  402cec:	47a0      	blx	r4
	param = 0x04;
  402cee:	2304      	movs	r3, #4
  402cf0:	f88d 3017 	strb.w	r3, [sp, #23]
	ili9488_write_register(ILI9488_CMD_CABC_CONTROL_9, &param, 1);
  402cf4:	2201      	movs	r2, #1
  402cf6:	4629      	mov	r1, r5
  402cf8:	20cf      	movs	r0, #207	; 0xcf
  402cfa:	47b0      	blx	r6
	ili9488_delay(100);
  402cfc:	2064      	movs	r0, #100	; 0x64
  402cfe:	47a0      	blx	r4
	param = 0x06;
  402d00:	2306      	movs	r3, #6
  402d02:	f88d 3017 	strb.w	r3, [sp, #23]
	ili9488_write_register(ILI9488_CMD_COLMOD_PIXEL_FORMAT_SET, &param, 1);
  402d06:	2201      	movs	r2, #1
  402d08:	4629      	mov	r1, r5
  402d0a:	203a      	movs	r0, #58	; 0x3a
  402d0c:	47b0      	blx	r6
	ili9488_delay(100);
  402d0e:	2064      	movs	r0, #100	; 0x64
  402d10:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NORMAL_DISP_MODE_ON, 0, 0);
  402d12:	2200      	movs	r2, #0
  402d14:	4611      	mov	r1, r2
  402d16:	2013      	movs	r0, #19
  402d18:	47b0      	blx	r6
	ili9488_delay(100);
  402d1a:	2064      	movs	r0, #100	; 0x64
  402d1c:	47a0      	blx	r4
	ili9488_display_on();
  402d1e:	4b16      	ldr	r3, [pc, #88]	; (402d78 <ili9488_init+0x1ac>)
  402d20:	4798      	blx	r3
	ili9488_delay(100);
  402d22:	2064      	movs	r0, #100	; 0x64
  402d24:	47a0      	blx	r4
	ili9488_set_display_direction(LANDSCAPE);
  402d26:	2000      	movs	r0, #0
  402d28:	4b14      	ldr	r3, [pc, #80]	; (402d7c <ili9488_init+0x1b0>)
  402d2a:	4798      	blx	r3
	ili9488_delay(100);
  402d2c:	2064      	movs	r0, #100	; 0x64
  402d2e:	47a0      	blx	r4
	ili9488_set_window(0, 0,p_opt->ul_width,p_opt->ul_height);
  402d30:	f8b9 3004 	ldrh.w	r3, [r9, #4]
  402d34:	f8b9 2000 	ldrh.w	r2, [r9]
  402d38:	2100      	movs	r1, #0
  402d3a:	4608      	mov	r0, r1
  402d3c:	4c10      	ldr	r4, [pc, #64]	; (402d80 <ili9488_init+0x1b4>)
  402d3e:	47a0      	blx	r4
	ili9488_set_foreground_color(p_opt->foreground_color);
  402d40:	f8d9 0008 	ldr.w	r0, [r9, #8]
  402d44:	4b0f      	ldr	r3, [pc, #60]	; (402d84 <ili9488_init+0x1b8>)
  402d46:	4798      	blx	r3
	ili9488_set_cursor_position(0, 0);
  402d48:	2100      	movs	r1, #0
  402d4a:	4608      	mov	r0, r1
  402d4c:	4b0e      	ldr	r3, [pc, #56]	; (402d88 <ili9488_init+0x1bc>)
  402d4e:	4798      	blx	r3
	return 0;
  402d50:	2000      	movs	r0, #0
  402d52:	e7bd      	b.n	402cd0 <ili9488_init+0x104>
  402d54:	40008000 	.word	0x40008000
  402d58:	00402445 	.word	0x00402445
  402d5c:	01312d00 	.word	0x01312d00
  402d60:	004033f9 	.word	0x004033f9
  402d64:	00402519 	.word	0x00402519
  402d68:	004029b1 	.word	0x004029b1
  402d6c:	00402a65 	.word	0x00402a65
  402d70:	00402fd9 	.word	0x00402fd9
  402d74:	0040257f 	.word	0x0040257f
  402d78:	00402b2d 	.word	0x00402b2d
  402d7c:	00402a81 	.word	0x00402a81
  402d80:	00402aad 	.word	0x00402aad
  402d84:	00402b41 	.word	0x00402b41
  402d88:	00402b69 	.word	0x00402b69
  402d8c:	00402499 	.word	0x00402499

00402d90 <ili9488_draw_filled_rectangle>:
 * \param ul_x2 X coordinate of lower-right corner on LCD.
 * \param ul_y2 Y coordinate of lower-right corner on LCD.
 */
void ili9488_draw_filled_rectangle(uint32_t ul_x1, uint32_t ul_y1,
		uint32_t ul_x2, uint32_t ul_y2)
{
  402d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402d94:	b084      	sub	sp, #16
  402d96:	9003      	str	r0, [sp, #12]
  402d98:	9102      	str	r1, [sp, #8]
  402d9a:	9201      	str	r2, [sp, #4]
  402d9c:	aa04      	add	r2, sp, #16
  402d9e:	f842 3d10 	str.w	r3, [r2, #-16]!
	uint32_t size, blocks;

	/* Swap coordinates if necessary */
	ili9488_check_box_coordinates(&ul_x1, &ul_y1, &ul_x2, &ul_y2);
  402da2:	4613      	mov	r3, r2
  402da4:	aa01      	add	r2, sp, #4
  402da6:	a902      	add	r1, sp, #8
  402da8:	a803      	add	r0, sp, #12
  402daa:	4c22      	ldr	r4, [pc, #136]	; (402e34 <ili9488_draw_filled_rectangle+0xa4>)
  402dac:	47a0      	blx	r4

	/* Determine the refresh window area */
	ili9488_set_window(ul_x1, ul_y1, (ul_x2 - ul_x1) + 1, (ul_y2 - ul_y1) + 1);
  402dae:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  402db2:	f8bd 1008 	ldrh.w	r1, [sp, #8]
  402db6:	9b00      	ldr	r3, [sp, #0]
  402db8:	3301      	adds	r3, #1
  402dba:	1a5b      	subs	r3, r3, r1
  402dbc:	9a01      	ldr	r2, [sp, #4]
  402dbe:	3201      	adds	r2, #1
  402dc0:	1a12      	subs	r2, r2, r0
  402dc2:	b29b      	uxth	r3, r3
  402dc4:	b292      	uxth	r2, r2
  402dc6:	4c1c      	ldr	r4, [pc, #112]	; (402e38 <ili9488_draw_filled_rectangle+0xa8>)
  402dc8:	47a0      	blx	r4

	/* Prepare to write in GRAM */
	ili9488_write_ram_prepare();
  402dca:	4b1c      	ldr	r3, [pc, #112]	; (402e3c <ili9488_draw_filled_rectangle+0xac>)
  402dcc:	4798      	blx	r3

	size = (ul_x2 - ul_x1 + 1) * (ul_y2 - ul_y1 + 1);
  402dce:	9903      	ldr	r1, [sp, #12]
  402dd0:	9d01      	ldr	r5, [sp, #4]
  402dd2:	1a69      	subs	r1, r5, r1
  402dd4:	9d00      	ldr	r5, [sp, #0]
  402dd6:	3501      	adds	r5, #1
  402dd8:	9b02      	ldr	r3, [sp, #8]
  402dda:	1aed      	subs	r5, r5, r3
  402ddc:	fb01 5505 	mla	r5, r1, r5, r5
	/* Send pixels blocks => one SPI IT / block */
	blocks = size / LCD_DATA_CACHE_SIZE;
  402de0:	4b17      	ldr	r3, [pc, #92]	; (402e40 <ili9488_draw_filled_rectangle+0xb0>)
  402de2:	fba3 2305 	umull	r2, r3, r3, r5
  402de6:	0a1b      	lsrs	r3, r3, #8
	while (blocks--) {
  402de8:	b163      	cbz	r3, 402e04 <ili9488_draw_filled_rectangle+0x74>
  402dea:	1e5c      	subs	r4, r3, #1
		ili9488_write_ram_buffer(g_ul_pixel_cache, LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT);
  402dec:	f8df 8058 	ldr.w	r8, [pc, #88]	; 402e48 <ili9488_draw_filled_rectangle+0xb8>
  402df0:	f44f 7770 	mov.w	r7, #960	; 0x3c0
  402df4:	4e13      	ldr	r6, [pc, #76]	; (402e44 <ili9488_draw_filled_rectangle+0xb4>)
  402df6:	4639      	mov	r1, r7
  402df8:	4640      	mov	r0, r8
  402dfa:	47b0      	blx	r6
	while (blocks--) {
  402dfc:	3c01      	subs	r4, #1
  402dfe:	f1b4 3fff 	cmp.w	r4, #4294967295
  402e02:	d1f8      	bne.n	402df6 <ili9488_draw_filled_rectangle+0x66>
	}

	/* Send remaining pixels */
	ili9488_write_ram_buffer(g_ul_pixel_cache, (size % LCD_DATA_CACHE_SIZE) * LCD_DATA_COLOR_UNIT);
  402e04:	490e      	ldr	r1, [pc, #56]	; (402e40 <ili9488_draw_filled_rectangle+0xb0>)
  402e06:	fba1 3105 	umull	r3, r1, r1, r5
  402e0a:	0a09      	lsrs	r1, r1, #8
  402e0c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  402e10:	eba5 1181 	sub.w	r1, r5, r1, lsl #6
  402e14:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  402e18:	480b      	ldr	r0, [pc, #44]	; (402e48 <ili9488_draw_filled_rectangle+0xb8>)
  402e1a:	4b0a      	ldr	r3, [pc, #40]	; (402e44 <ili9488_draw_filled_rectangle+0xb4>)
  402e1c:	4798      	blx	r3

	/* Reset the refresh window area */
	ili9488_set_window(0, 0, ILI9488_LCD_WIDTH, ILI9488_LCD_HEIGHT);
  402e1e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  402e22:	f44f 72a0 	mov.w	r2, #320	; 0x140
  402e26:	2100      	movs	r1, #0
  402e28:	4608      	mov	r0, r1
  402e2a:	4c03      	ldr	r4, [pc, #12]	; (402e38 <ili9488_draw_filled_rectangle+0xa8>)
  402e2c:	47a0      	blx	r4

}
  402e2e:	b004      	add	sp, #16
  402e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402e34:	0040291d 	.word	0x0040291d
  402e38:	00402aad 	.word	0x00402aad
  402e3c:	00402975 	.word	0x00402975
  402e40:	cccccccd 	.word	0xcccccccd
  402e44:	00402a25 	.word	0x00402a25
  402e48:	2040c32c 	.word	0x2040c32c

00402e4c <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  402e4c:	6301      	str	r1, [r0, #48]	; 0x30
  402e4e:	4770      	bx	lr

00402e50 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  402e50:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  402e52:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  402e56:	d03a      	beq.n	402ece <pio_set_peripheral+0x7e>
  402e58:	d813      	bhi.n	402e82 <pio_set_peripheral+0x32>
  402e5a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  402e5e:	d025      	beq.n	402eac <pio_set_peripheral+0x5c>
  402e60:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  402e64:	d10a      	bne.n	402e7c <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402e66:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402e68:	4313      	orrs	r3, r2
  402e6a:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402e6c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402e6e:	6f41      	ldr	r1, [r0, #116]	; 0x74
  402e70:	400b      	ands	r3, r1
  402e72:	ea23 0302 	bic.w	r3, r3, r2
  402e76:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  402e78:	6042      	str	r2, [r0, #4]
  402e7a:	4770      	bx	lr
	switch (ul_type) {
  402e7c:	2900      	cmp	r1, #0
  402e7e:	d1fb      	bne.n	402e78 <pio_set_peripheral+0x28>
  402e80:	4770      	bx	lr
  402e82:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  402e86:	d021      	beq.n	402ecc <pio_set_peripheral+0x7c>
  402e88:	d809      	bhi.n	402e9e <pio_set_peripheral+0x4e>
  402e8a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  402e8e:	d1f3      	bne.n	402e78 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  402e90:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402e92:	4313      	orrs	r3, r2
  402e94:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  402e96:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402e98:	4313      	orrs	r3, r2
  402e9a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402e9c:	e7ec      	b.n	402e78 <pio_set_peripheral+0x28>
	switch (ul_type) {
  402e9e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  402ea2:	d013      	beq.n	402ecc <pio_set_peripheral+0x7c>
  402ea4:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  402ea8:	d010      	beq.n	402ecc <pio_set_peripheral+0x7c>
  402eaa:	e7e5      	b.n	402e78 <pio_set_peripheral+0x28>
{
  402eac:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  402eae:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402eb0:	6f04      	ldr	r4, [r0, #112]	; 0x70
  402eb2:	43d3      	mvns	r3, r2
  402eb4:	4021      	ands	r1, r4
  402eb6:	461c      	mov	r4, r3
  402eb8:	4019      	ands	r1, r3
  402eba:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  402ebc:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402ebe:	6f41      	ldr	r1, [r0, #116]	; 0x74
  402ec0:	400b      	ands	r3, r1
  402ec2:	4023      	ands	r3, r4
  402ec4:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  402ec6:	6042      	str	r2, [r0, #4]
}
  402ec8:	f85d 4b04 	ldr.w	r4, [sp], #4
  402ecc:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  402ece:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402ed0:	6f01      	ldr	r1, [r0, #112]	; 0x70
  402ed2:	400b      	ands	r3, r1
  402ed4:	ea23 0302 	bic.w	r3, r3, r2
  402ed8:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  402eda:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402edc:	4313      	orrs	r3, r2
  402ede:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402ee0:	e7ca      	b.n	402e78 <pio_set_peripheral+0x28>

00402ee2 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  402ee2:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  402ee4:	f012 0f01 	tst.w	r2, #1
  402ee8:	d10d      	bne.n	402f06 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  402eea:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  402eec:	f012 0f0a 	tst.w	r2, #10
  402ef0:	d00b      	beq.n	402f0a <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  402ef2:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  402ef4:	f012 0f02 	tst.w	r2, #2
  402ef8:	d109      	bne.n	402f0e <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  402efa:	f012 0f08 	tst.w	r2, #8
  402efe:	d008      	beq.n	402f12 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  402f00:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  402f04:	e005      	b.n	402f12 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  402f06:	6641      	str	r1, [r0, #100]	; 0x64
  402f08:	e7f0      	b.n	402eec <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  402f0a:	6241      	str	r1, [r0, #36]	; 0x24
  402f0c:	e7f2      	b.n	402ef4 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  402f0e:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  402f12:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  402f14:	6001      	str	r1, [r0, #0]
  402f16:	4770      	bx	lr

00402f18 <pio_set_output>:
{
  402f18:	b410      	push	{r4}
  402f1a:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  402f1c:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  402f1e:	b94c      	cbnz	r4, 402f34 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  402f20:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  402f22:	b14b      	cbz	r3, 402f38 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  402f24:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  402f26:	b94a      	cbnz	r2, 402f3c <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  402f28:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  402f2a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  402f2c:	6001      	str	r1, [r0, #0]
}
  402f2e:	f85d 4b04 	ldr.w	r4, [sp], #4
  402f32:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  402f34:	6641      	str	r1, [r0, #100]	; 0x64
  402f36:	e7f4      	b.n	402f22 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  402f38:	6541      	str	r1, [r0, #84]	; 0x54
  402f3a:	e7f4      	b.n	402f26 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  402f3c:	6301      	str	r1, [r0, #48]	; 0x30
  402f3e:	e7f4      	b.n	402f2a <pio_set_output+0x12>

00402f40 <pio_configure>:
{
  402f40:	b570      	push	{r4, r5, r6, lr}
  402f42:	b082      	sub	sp, #8
  402f44:	4605      	mov	r5, r0
  402f46:	4616      	mov	r6, r2
  402f48:	461c      	mov	r4, r3
	switch (ul_type) {
  402f4a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  402f4e:	d014      	beq.n	402f7a <pio_configure+0x3a>
  402f50:	d90a      	bls.n	402f68 <pio_configure+0x28>
  402f52:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  402f56:	d024      	beq.n	402fa2 <pio_configure+0x62>
  402f58:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  402f5c:	d021      	beq.n	402fa2 <pio_configure+0x62>
  402f5e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  402f62:	d017      	beq.n	402f94 <pio_configure+0x54>
		return 0;
  402f64:	2000      	movs	r0, #0
  402f66:	e01a      	b.n	402f9e <pio_configure+0x5e>
	switch (ul_type) {
  402f68:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  402f6c:	d005      	beq.n	402f7a <pio_configure+0x3a>
  402f6e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  402f72:	d002      	beq.n	402f7a <pio_configure+0x3a>
  402f74:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  402f78:	d1f4      	bne.n	402f64 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  402f7a:	4632      	mov	r2, r6
  402f7c:	4628      	mov	r0, r5
  402f7e:	4b11      	ldr	r3, [pc, #68]	; (402fc4 <pio_configure+0x84>)
  402f80:	4798      	blx	r3
	if (ul_pull_up_enable) {
  402f82:	f014 0f01 	tst.w	r4, #1
  402f86:	d102      	bne.n	402f8e <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  402f88:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  402f8a:	2001      	movs	r0, #1
  402f8c:	e007      	b.n	402f9e <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  402f8e:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  402f90:	2001      	movs	r0, #1
  402f92:	e004      	b.n	402f9e <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  402f94:	461a      	mov	r2, r3
  402f96:	4631      	mov	r1, r6
  402f98:	4b0b      	ldr	r3, [pc, #44]	; (402fc8 <pio_configure+0x88>)
  402f9a:	4798      	blx	r3
	return 1;
  402f9c:	2001      	movs	r0, #1
}
  402f9e:	b002      	add	sp, #8
  402fa0:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  402fa2:	f004 0301 	and.w	r3, r4, #1
  402fa6:	9300      	str	r3, [sp, #0]
  402fa8:	f3c4 0380 	ubfx	r3, r4, #2, #1
  402fac:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  402fb0:	bf14      	ite	ne
  402fb2:	2200      	movne	r2, #0
  402fb4:	2201      	moveq	r2, #1
  402fb6:	4631      	mov	r1, r6
  402fb8:	4628      	mov	r0, r5
  402fba:	4c04      	ldr	r4, [pc, #16]	; (402fcc <pio_configure+0x8c>)
  402fbc:	47a0      	blx	r4
	return 1;
  402fbe:	2001      	movs	r0, #1
		break;
  402fc0:	e7ed      	b.n	402f9e <pio_configure+0x5e>
  402fc2:	bf00      	nop
  402fc4:	00402e51 	.word	0x00402e51
  402fc8:	00402ee3 	.word	0x00402ee3
  402fcc:	00402f19 	.word	0x00402f19

00402fd0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  402fd0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  402fd2:	4770      	bx	lr

00402fd4 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  402fd4:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  402fd6:	4770      	bx	lr

00402fd8 <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  402fd8:	4b05      	ldr	r3, [pc, #20]	; (402ff0 <pio_set_pin_high+0x18>)
  402fda:	eb03 1350 	add.w	r3, r3, r0, lsr #5
  402fde:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  402fe0:	f000 001f 	and.w	r0, r0, #31
  402fe4:	2201      	movs	r2, #1
  402fe6:	fa02 f000 	lsl.w	r0, r2, r0
  402fea:	6318      	str	r0, [r3, #48]	; 0x30
  402fec:	4770      	bx	lr
  402fee:	bf00      	nop
  402ff0:	00200707 	.word	0x00200707

00402ff4 <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  402ff4:	4b05      	ldr	r3, [pc, #20]	; (40300c <pio_set_pin_low+0x18>)
  402ff6:	eb03 1350 	add.w	r3, r3, r0, lsr #5
  402ffa:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  402ffc:	f000 001f 	and.w	r0, r0, #31
  403000:	2201      	movs	r2, #1
  403002:	fa02 f000 	lsl.w	r0, r2, r0
  403006:	6358      	str	r0, [r3, #52]	; 0x34
  403008:	4770      	bx	lr
  40300a:	bf00      	nop
  40300c:	00200707 	.word	0x00200707

00403010 <pio_configure_pin>:
{
  403010:	b570      	push	{r4, r5, r6, lr}
  403012:	b082      	sub	sp, #8
  403014:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  403016:	4c46      	ldr	r4, [pc, #280]	; (403130 <pio_configure_pin+0x120>)
  403018:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  40301c:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  40301e:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  403022:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  403026:	d059      	beq.n	4030dc <pio_configure_pin+0xcc>
  403028:	d80a      	bhi.n	403040 <pio_configure_pin+0x30>
  40302a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40302e:	d02f      	beq.n	403090 <pio_configure_pin+0x80>
  403030:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  403034:	d03f      	beq.n	4030b6 <pio_configure_pin+0xa6>
  403036:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40303a:	d016      	beq.n	40306a <pio_configure_pin+0x5a>
		return 0;
  40303c:	2000      	movs	r0, #0
  40303e:	e012      	b.n	403066 <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  403040:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  403044:	d05d      	beq.n	403102 <pio_configure_pin+0xf2>
  403046:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40304a:	d05a      	beq.n	403102 <pio_configure_pin+0xf2>
  40304c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  403050:	d1f4      	bne.n	40303c <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  403052:	f000 011f 	and.w	r1, r0, #31
  403056:	2601      	movs	r6, #1
  403058:	462a      	mov	r2, r5
  40305a:	fa06 f101 	lsl.w	r1, r6, r1
  40305e:	4620      	mov	r0, r4
  403060:	4b34      	ldr	r3, [pc, #208]	; (403134 <pio_configure_pin+0x124>)
  403062:	4798      	blx	r3
	return 1;
  403064:	4630      	mov	r0, r6
}
  403066:	b002      	add	sp, #8
  403068:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  40306a:	f000 001f 	and.w	r0, r0, #31
  40306e:	2601      	movs	r6, #1
  403070:	4086      	lsls	r6, r0
  403072:	4632      	mov	r2, r6
  403074:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403078:	4620      	mov	r0, r4
  40307a:	4b2f      	ldr	r3, [pc, #188]	; (403138 <pio_configure_pin+0x128>)
  40307c:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40307e:	f015 0f01 	tst.w	r5, #1
  403082:	d102      	bne.n	40308a <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  403084:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  403086:	2001      	movs	r0, #1
  403088:	e7ed      	b.n	403066 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  40308a:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  40308c:	2001      	movs	r0, #1
  40308e:	e7ea      	b.n	403066 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  403090:	f000 001f 	and.w	r0, r0, #31
  403094:	2601      	movs	r6, #1
  403096:	4086      	lsls	r6, r0
  403098:	4632      	mov	r2, r6
  40309a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40309e:	4620      	mov	r0, r4
  4030a0:	4b25      	ldr	r3, [pc, #148]	; (403138 <pio_configure_pin+0x128>)
  4030a2:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4030a4:	f015 0f01 	tst.w	r5, #1
  4030a8:	d102      	bne.n	4030b0 <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  4030aa:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4030ac:	2001      	movs	r0, #1
  4030ae:	e7da      	b.n	403066 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4030b0:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4030b2:	2001      	movs	r0, #1
  4030b4:	e7d7      	b.n	403066 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4030b6:	f000 001f 	and.w	r0, r0, #31
  4030ba:	2601      	movs	r6, #1
  4030bc:	4086      	lsls	r6, r0
  4030be:	4632      	mov	r2, r6
  4030c0:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4030c4:	4620      	mov	r0, r4
  4030c6:	4b1c      	ldr	r3, [pc, #112]	; (403138 <pio_configure_pin+0x128>)
  4030c8:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4030ca:	f015 0f01 	tst.w	r5, #1
  4030ce:	d102      	bne.n	4030d6 <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  4030d0:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4030d2:	2001      	movs	r0, #1
  4030d4:	e7c7      	b.n	403066 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4030d6:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4030d8:	2001      	movs	r0, #1
  4030da:	e7c4      	b.n	403066 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4030dc:	f000 001f 	and.w	r0, r0, #31
  4030e0:	2601      	movs	r6, #1
  4030e2:	4086      	lsls	r6, r0
  4030e4:	4632      	mov	r2, r6
  4030e6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4030ea:	4620      	mov	r0, r4
  4030ec:	4b12      	ldr	r3, [pc, #72]	; (403138 <pio_configure_pin+0x128>)
  4030ee:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4030f0:	f015 0f01 	tst.w	r5, #1
  4030f4:	d102      	bne.n	4030fc <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  4030f6:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4030f8:	2001      	movs	r0, #1
  4030fa:	e7b4      	b.n	403066 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4030fc:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4030fe:	2001      	movs	r0, #1
  403100:	e7b1      	b.n	403066 <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  403102:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  403106:	f000 011f 	and.w	r1, r0, #31
  40310a:	2601      	movs	r6, #1
  40310c:	ea05 0306 	and.w	r3, r5, r6
  403110:	9300      	str	r3, [sp, #0]
  403112:	f3c5 0380 	ubfx	r3, r5, #2, #1
  403116:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  40311a:	bf14      	ite	ne
  40311c:	2200      	movne	r2, #0
  40311e:	2201      	moveq	r2, #1
  403120:	fa06 f101 	lsl.w	r1, r6, r1
  403124:	4620      	mov	r0, r4
  403126:	4c05      	ldr	r4, [pc, #20]	; (40313c <pio_configure_pin+0x12c>)
  403128:	47a0      	blx	r4
	return 1;
  40312a:	4630      	mov	r0, r6
		break;
  40312c:	e79b      	b.n	403066 <pio_configure_pin+0x56>
  40312e:	bf00      	nop
  403130:	00200707 	.word	0x00200707
  403134:	00402ee3 	.word	0x00402ee3
  403138:	00402e51 	.word	0x00402e51
  40313c:	00402f19 	.word	0x00402f19

00403140 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  403140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403144:	4604      	mov	r4, r0
  403146:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  403148:	4b0e      	ldr	r3, [pc, #56]	; (403184 <pio_handler_process+0x44>)
  40314a:	4798      	blx	r3
  40314c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40314e:	4620      	mov	r0, r4
  403150:	4b0d      	ldr	r3, [pc, #52]	; (403188 <pio_handler_process+0x48>)
  403152:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  403154:	4005      	ands	r5, r0
  403156:	d013      	beq.n	403180 <pio_handler_process+0x40>
  403158:	4c0c      	ldr	r4, [pc, #48]	; (40318c <pio_handler_process+0x4c>)
  40315a:	f104 0660 	add.w	r6, r4, #96	; 0x60
  40315e:	e003      	b.n	403168 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  403160:	42b4      	cmp	r4, r6
  403162:	d00d      	beq.n	403180 <pio_handler_process+0x40>
  403164:	3410      	adds	r4, #16
		while (status != 0) {
  403166:	b15d      	cbz	r5, 403180 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  403168:	6820      	ldr	r0, [r4, #0]
  40316a:	4540      	cmp	r0, r8
  40316c:	d1f8      	bne.n	403160 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40316e:	6861      	ldr	r1, [r4, #4]
  403170:	4229      	tst	r1, r5
  403172:	d0f5      	beq.n	403160 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  403174:	68e3      	ldr	r3, [r4, #12]
  403176:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  403178:	6863      	ldr	r3, [r4, #4]
  40317a:	ea25 0503 	bic.w	r5, r5, r3
  40317e:	e7ef      	b.n	403160 <pio_handler_process+0x20>
  403180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403184:	00402fd1 	.word	0x00402fd1
  403188:	00402fd5 	.word	0x00402fd5
  40318c:	2040c6ec 	.word	0x2040c6ec

00403190 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  403190:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  403192:	210a      	movs	r1, #10
  403194:	4801      	ldr	r0, [pc, #4]	; (40319c <PIOA_Handler+0xc>)
  403196:	4b02      	ldr	r3, [pc, #8]	; (4031a0 <PIOA_Handler+0x10>)
  403198:	4798      	blx	r3
  40319a:	bd08      	pop	{r3, pc}
  40319c:	400e0e00 	.word	0x400e0e00
  4031a0:	00403141 	.word	0x00403141

004031a4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4031a4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4031a6:	210b      	movs	r1, #11
  4031a8:	4801      	ldr	r0, [pc, #4]	; (4031b0 <PIOB_Handler+0xc>)
  4031aa:	4b02      	ldr	r3, [pc, #8]	; (4031b4 <PIOB_Handler+0x10>)
  4031ac:	4798      	blx	r3
  4031ae:	bd08      	pop	{r3, pc}
  4031b0:	400e1000 	.word	0x400e1000
  4031b4:	00403141 	.word	0x00403141

004031b8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4031b8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4031ba:	210c      	movs	r1, #12
  4031bc:	4801      	ldr	r0, [pc, #4]	; (4031c4 <PIOC_Handler+0xc>)
  4031be:	4b02      	ldr	r3, [pc, #8]	; (4031c8 <PIOC_Handler+0x10>)
  4031c0:	4798      	blx	r3
  4031c2:	bd08      	pop	{r3, pc}
  4031c4:	400e1200 	.word	0x400e1200
  4031c8:	00403141 	.word	0x00403141

004031cc <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4031cc:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4031ce:	2110      	movs	r1, #16
  4031d0:	4801      	ldr	r0, [pc, #4]	; (4031d8 <PIOD_Handler+0xc>)
  4031d2:	4b02      	ldr	r3, [pc, #8]	; (4031dc <PIOD_Handler+0x10>)
  4031d4:	4798      	blx	r3
  4031d6:	bd08      	pop	{r3, pc}
  4031d8:	400e1400 	.word	0x400e1400
  4031dc:	00403141 	.word	0x00403141

004031e0 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4031e0:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  4031e2:	2111      	movs	r1, #17
  4031e4:	4801      	ldr	r0, [pc, #4]	; (4031ec <PIOE_Handler+0xc>)
  4031e6:	4b02      	ldr	r3, [pc, #8]	; (4031f0 <PIOE_Handler+0x10>)
  4031e8:	4798      	blx	r3
  4031ea:	bd08      	pop	{r3, pc}
  4031ec:	400e1600 	.word	0x400e1600
  4031f0:	00403141 	.word	0x00403141

004031f4 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4031f4:	2803      	cmp	r0, #3
  4031f6:	d011      	beq.n	40321c <pmc_mck_set_division+0x28>
  4031f8:	2804      	cmp	r0, #4
  4031fa:	d012      	beq.n	403222 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4031fc:	2802      	cmp	r0, #2
  4031fe:	bf0c      	ite	eq
  403200:	f44f 7180 	moveq.w	r1, #256	; 0x100
  403204:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  403206:	4a08      	ldr	r2, [pc, #32]	; (403228 <pmc_mck_set_division+0x34>)
  403208:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40320a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40320e:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  403210:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  403212:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403214:	f013 0f08 	tst.w	r3, #8
  403218:	d0fb      	beq.n	403212 <pmc_mck_set_division+0x1e>
}
  40321a:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  40321c:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  403220:	e7f1      	b.n	403206 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  403222:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  403226:	e7ee      	b.n	403206 <pmc_mck_set_division+0x12>
  403228:	400e0600 	.word	0x400e0600

0040322c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40322c:	4a17      	ldr	r2, [pc, #92]	; (40328c <pmc_switch_mck_to_pllack+0x60>)
  40322e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  403234:	4318      	orrs	r0, r3
  403236:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403238:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40323a:	f013 0f08 	tst.w	r3, #8
  40323e:	d10a      	bne.n	403256 <pmc_switch_mck_to_pllack+0x2a>
  403240:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  403244:	4911      	ldr	r1, [pc, #68]	; (40328c <pmc_switch_mck_to_pllack+0x60>)
  403246:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  403248:	f012 0f08 	tst.w	r2, #8
  40324c:	d103      	bne.n	403256 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40324e:	3b01      	subs	r3, #1
  403250:	d1f9      	bne.n	403246 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  403252:	2001      	movs	r0, #1
  403254:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  403256:	4a0d      	ldr	r2, [pc, #52]	; (40328c <pmc_switch_mck_to_pllack+0x60>)
  403258:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40325a:	f023 0303 	bic.w	r3, r3, #3
  40325e:	f043 0302 	orr.w	r3, r3, #2
  403262:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403264:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403266:	f013 0f08 	tst.w	r3, #8
  40326a:	d10a      	bne.n	403282 <pmc_switch_mck_to_pllack+0x56>
  40326c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  403270:	4906      	ldr	r1, [pc, #24]	; (40328c <pmc_switch_mck_to_pllack+0x60>)
  403272:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  403274:	f012 0f08 	tst.w	r2, #8
  403278:	d105      	bne.n	403286 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40327a:	3b01      	subs	r3, #1
  40327c:	d1f9      	bne.n	403272 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40327e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  403280:	4770      	bx	lr
	return 0;
  403282:	2000      	movs	r0, #0
  403284:	4770      	bx	lr
  403286:	2000      	movs	r0, #0
  403288:	4770      	bx	lr
  40328a:	bf00      	nop
  40328c:	400e0600 	.word	0x400e0600

00403290 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  403290:	b9a0      	cbnz	r0, 4032bc <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  403292:	480e      	ldr	r0, [pc, #56]	; (4032cc <pmc_switch_mainck_to_xtal+0x3c>)
  403294:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  403296:	0209      	lsls	r1, r1, #8
  403298:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40329a:	4a0d      	ldr	r2, [pc, #52]	; (4032d0 <pmc_switch_mainck_to_xtal+0x40>)
  40329c:	401a      	ands	r2, r3
  40329e:	4b0d      	ldr	r3, [pc, #52]	; (4032d4 <pmc_switch_mainck_to_xtal+0x44>)
  4032a0:	4313      	orrs	r3, r2
  4032a2:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4032a4:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4032a6:	4602      	mov	r2, r0
  4032a8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4032aa:	f013 0f01 	tst.w	r3, #1
  4032ae:	d0fb      	beq.n	4032a8 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4032b0:	4a06      	ldr	r2, [pc, #24]	; (4032cc <pmc_switch_mainck_to_xtal+0x3c>)
  4032b2:	6a11      	ldr	r1, [r2, #32]
  4032b4:	4b08      	ldr	r3, [pc, #32]	; (4032d8 <pmc_switch_mainck_to_xtal+0x48>)
  4032b6:	430b      	orrs	r3, r1
  4032b8:	6213      	str	r3, [r2, #32]
  4032ba:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4032bc:	4903      	ldr	r1, [pc, #12]	; (4032cc <pmc_switch_mainck_to_xtal+0x3c>)
  4032be:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4032c0:	4a06      	ldr	r2, [pc, #24]	; (4032dc <pmc_switch_mainck_to_xtal+0x4c>)
  4032c2:	401a      	ands	r2, r3
  4032c4:	4b06      	ldr	r3, [pc, #24]	; (4032e0 <pmc_switch_mainck_to_xtal+0x50>)
  4032c6:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4032c8:	620b      	str	r3, [r1, #32]
  4032ca:	4770      	bx	lr
  4032cc:	400e0600 	.word	0x400e0600
  4032d0:	ffc8fffc 	.word	0xffc8fffc
  4032d4:	00370001 	.word	0x00370001
  4032d8:	01370000 	.word	0x01370000
  4032dc:	fec8fffc 	.word	0xfec8fffc
  4032e0:	01370002 	.word	0x01370002

004032e4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4032e4:	4b02      	ldr	r3, [pc, #8]	; (4032f0 <pmc_osc_is_ready_mainck+0xc>)
  4032e6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4032e8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4032ec:	4770      	bx	lr
  4032ee:	bf00      	nop
  4032f0:	400e0600 	.word	0x400e0600

004032f4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4032f4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4032f8:	4b01      	ldr	r3, [pc, #4]	; (403300 <pmc_disable_pllack+0xc>)
  4032fa:	629a      	str	r2, [r3, #40]	; 0x28
  4032fc:	4770      	bx	lr
  4032fe:	bf00      	nop
  403300:	400e0600 	.word	0x400e0600

00403304 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  403304:	4b02      	ldr	r3, [pc, #8]	; (403310 <pmc_is_locked_pllack+0xc>)
  403306:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  403308:	f000 0002 	and.w	r0, r0, #2
  40330c:	4770      	bx	lr
  40330e:	bf00      	nop
  403310:	400e0600 	.word	0x400e0600

00403314 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  403314:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  403318:	4b05      	ldr	r3, [pc, #20]	; (403330 <pmc_enable_periph_clk+0x1c>)
  40331a:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  40331e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  403322:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  403326:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  40332a:	2000      	movs	r0, #0
  40332c:	4770      	bx	lr
  40332e:	bf00      	nop
  403330:	400e0600 	.word	0x400e0600

00403334 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  403334:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  403336:	4b07      	ldr	r3, [pc, #28]	; (403354 <spi_enable_clock+0x20>)
  403338:	4298      	cmp	r0, r3
  40333a:	d003      	beq.n	403344 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  40333c:	4b06      	ldr	r3, [pc, #24]	; (403358 <spi_enable_clock+0x24>)
  40333e:	4298      	cmp	r0, r3
  403340:	d004      	beq.n	40334c <spi_enable_clock+0x18>
  403342:	bd08      	pop	{r3, pc}
  403344:	2015      	movs	r0, #21
  403346:	4b05      	ldr	r3, [pc, #20]	; (40335c <spi_enable_clock+0x28>)
  403348:	4798      	blx	r3
  40334a:	bd08      	pop	{r3, pc}
  40334c:	202a      	movs	r0, #42	; 0x2a
  40334e:	4b03      	ldr	r3, [pc, #12]	; (40335c <spi_enable_clock+0x28>)
  403350:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  403352:	e7f6      	b.n	403342 <spi_enable_clock+0xe>
  403354:	40008000 	.word	0x40008000
  403358:	40058000 	.word	0x40058000
  40335c:	00403315 	.word	0x00403315

00403360 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  403360:	6843      	ldr	r3, [r0, #4]
  403362:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  403366:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  403368:	6843      	ldr	r3, [r0, #4]
  40336a:	0409      	lsls	r1, r1, #16
  40336c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  403370:	4319      	orrs	r1, r3
  403372:	6041      	str	r1, [r0, #4]
  403374:	4770      	bx	lr

00403376 <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  403376:	6843      	ldr	r3, [r0, #4]
  403378:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  40337c:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  40337e:	6843      	ldr	r3, [r0, #4]
  403380:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  403384:	6041      	str	r1, [r0, #4]
  403386:	4770      	bx	lr

00403388 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  403388:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  40338a:	f643 2499 	movw	r4, #15001	; 0x3a99
  40338e:	6905      	ldr	r5, [r0, #16]
  403390:	f015 0f02 	tst.w	r5, #2
  403394:	d103      	bne.n	40339e <spi_write+0x16>
		if (!timeout--) {
  403396:	3c01      	subs	r4, #1
  403398:	d1f9      	bne.n	40338e <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  40339a:	2001      	movs	r0, #1
  40339c:	e00c      	b.n	4033b8 <spi_write+0x30>
	if (p_spi->SPI_MR & SPI_MR_PS) {
  40339e:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  4033a0:	f014 0f02 	tst.w	r4, #2
  4033a4:	d006      	beq.n	4033b4 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  4033a6:	0412      	lsls	r2, r2, #16
  4033a8:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  4033ac:	4311      	orrs	r1, r2
		if (uc_last) {
  4033ae:	b10b      	cbz	r3, 4033b4 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  4033b0:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  4033b4:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  4033b6:	2000      	movs	r0, #0
}
  4033b8:	bc30      	pop	{r4, r5}
  4033ba:	4770      	bx	lr

004033bc <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  4033bc:	b932      	cbnz	r2, 4033cc <spi_set_clock_polarity+0x10>
  4033be:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4033c2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4033c4:	f023 0301 	bic.w	r3, r3, #1
  4033c8:	6303      	str	r3, [r0, #48]	; 0x30
  4033ca:	4770      	bx	lr
  4033cc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4033d0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4033d2:	f043 0301 	orr.w	r3, r3, #1
  4033d6:	6303      	str	r3, [r0, #48]	; 0x30
  4033d8:	4770      	bx	lr

004033da <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  4033da:	b932      	cbnz	r2, 4033ea <spi_set_clock_phase+0x10>
  4033dc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  4033e0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4033e2:	f023 0302 	bic.w	r3, r3, #2
  4033e6:	6303      	str	r3, [r0, #48]	; 0x30
  4033e8:	4770      	bx	lr
  4033ea:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  4033ee:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4033f0:	f043 0302 	orr.w	r3, r3, #2
  4033f4:	6303      	str	r3, [r0, #48]	; 0x30
  4033f6:	4770      	bx	lr

004033f8 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  4033f8:	2a04      	cmp	r2, #4
  4033fa:	d003      	beq.n	403404 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  4033fc:	b16a      	cbz	r2, 40341a <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  4033fe:	2a08      	cmp	r2, #8
  403400:	d016      	beq.n	403430 <spi_configure_cs_behavior+0x38>
  403402:	4770      	bx	lr
  403404:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  403408:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40340a:	f023 0308 	bic.w	r3, r3, #8
  40340e:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  403410:	6b03      	ldr	r3, [r0, #48]	; 0x30
  403412:	f043 0304 	orr.w	r3, r3, #4
  403416:	6303      	str	r3, [r0, #48]	; 0x30
  403418:	4770      	bx	lr
  40341a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40341e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  403420:	f023 0308 	bic.w	r3, r3, #8
  403424:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  403426:	6b03      	ldr	r3, [r0, #48]	; 0x30
  403428:	f023 0304 	bic.w	r3, r3, #4
  40342c:	6303      	str	r3, [r0, #48]	; 0x30
  40342e:	4770      	bx	lr
  403430:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  403434:	6b03      	ldr	r3, [r0, #48]	; 0x30
  403436:	f043 0308 	orr.w	r3, r3, #8
  40343a:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  40343c:	e7e1      	b.n	403402 <spi_configure_cs_behavior+0xa>

0040343e <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  40343e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  403442:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  403444:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  403448:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  40344a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40344c:	431a      	orrs	r2, r3
  40344e:	630a      	str	r2, [r1, #48]	; 0x30
  403450:	4770      	bx	lr

00403452 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  403452:	1e43      	subs	r3, r0, #1
  403454:	4419      	add	r1, r3
  403456:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  40345a:	1e43      	subs	r3, r0, #1
  40345c:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  40345e:	bf94      	ite	ls
  403460:	b200      	sxthls	r0, r0
		return -1;
  403462:	f04f 30ff 	movhi.w	r0, #4294967295
}
  403466:	4770      	bx	lr

00403468 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  403468:	b17a      	cbz	r2, 40348a <spi_set_baudrate_div+0x22>
{
  40346a:	b410      	push	{r4}
  40346c:	4614      	mov	r4, r2
  40346e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  403472:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  403474:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  403478:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  40347a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  40347c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  403480:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  403482:	2000      	movs	r0, #0
}
  403484:	f85d 4b04 	ldr.w	r4, [sp], #4
  403488:	4770      	bx	lr
        return -1;
  40348a:	f04f 30ff 	mov.w	r0, #4294967295
  40348e:	4770      	bx	lr

00403490 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  403490:	b410      	push	{r4}
  403492:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  403496:	6b08      	ldr	r0, [r1, #48]	; 0x30
  403498:	b280      	uxth	r0, r0
  40349a:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  40349c:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  40349e:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  4034a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4034a6:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  4034a8:	f85d 4b04 	ldr.w	r4, [sp], #4
  4034ac:	4770      	bx	lr
	...

004034b0 <twihs_set_speed>:
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  4034b0:	4b28      	ldr	r3, [pc, #160]	; (403554 <twihs_set_speed+0xa4>)
  4034b2:	4299      	cmp	r1, r3
  4034b4:	d84b      	bhi.n	40354e <twihs_set_speed+0x9e>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  4034b6:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  4034ba:	4299      	cmp	r1, r3
  4034bc:	d92d      	bls.n	40351a <twihs_set_speed+0x6a>
{
  4034be:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4034c0:	4c25      	ldr	r4, [pc, #148]	; (403558 <twihs_set_speed+0xa8>)
  4034c2:	fba4 3402 	umull	r3, r4, r4, r2
  4034c6:	0ba4      	lsrs	r4, r4, #14
  4034c8:	3c03      	subs	r4, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4034ca:	4b24      	ldr	r3, [pc, #144]	; (40355c <twihs_set_speed+0xac>)
  4034cc:	440b      	add	r3, r1
  4034ce:	009b      	lsls	r3, r3, #2
  4034d0:	fbb2 f2f3 	udiv	r2, r2, r3
  4034d4:	3a03      	subs	r2, #3
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4034d6:	2cff      	cmp	r4, #255	; 0xff
  4034d8:	d91d      	bls.n	403516 <twihs_set_speed+0x66>
  4034da:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  4034dc:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWIHS_CLK_DIVIDER;
  4034de:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4034e0:	2cff      	cmp	r4, #255	; 0xff
  4034e2:	d901      	bls.n	4034e8 <twihs_set_speed+0x38>
  4034e4:	2906      	cmp	r1, #6
  4034e6:	d9f9      	bls.n	4034dc <twihs_set_speed+0x2c>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4034e8:	2aff      	cmp	r2, #255	; 0xff
  4034ea:	d907      	bls.n	4034fc <twihs_set_speed+0x4c>
  4034ec:	2906      	cmp	r1, #6
  4034ee:	d805      	bhi.n	4034fc <twihs_set_speed+0x4c>
			/* Increase clock divider */
			ckdiv++;
  4034f0:	3101      	adds	r1, #1
			/* Divide cldiv value */
			chdiv /= TWIHS_CLK_DIVIDER;
  4034f2:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4034f4:	2aff      	cmp	r2, #255	; 0xff
  4034f6:	d901      	bls.n	4034fc <twihs_set_speed+0x4c>
  4034f8:	2906      	cmp	r1, #6
  4034fa:	d9f9      	bls.n	4034f0 <twihs_set_speed+0x40>
		}

		/* set clock waveform generator register */
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  4034fc:	0213      	lsls	r3, r2, #8
  4034fe:	b29b      	uxth	r3, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  403500:	0409      	lsls	r1, r1, #16
  403502:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  403506:	430b      	orrs	r3, r1
  403508:	b2e4      	uxtb	r4, r4
  40350a:	4323      	orrs	r3, r4
		p_twihs->TWIHS_CWGR =
  40350c:	6103      	str	r3, [r0, #16]
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
				TWIHS_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  40350e:	2000      	movs	r0, #0
}
  403510:	f85d 4b04 	ldr.w	r4, [sp], #4
  403514:	4770      	bx	lr
	uint32_t ckdiv = 0;
  403516:	2100      	movs	r1, #0
  403518:	e7e6      	b.n	4034e8 <twihs_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  40351a:	0049      	lsls	r1, r1, #1
  40351c:	fbb2 f2f1 	udiv	r2, r2, r1
  403520:	3a03      	subs	r2, #3
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  403522:	2aff      	cmp	r2, #255	; 0xff
  403524:	d911      	bls.n	40354a <twihs_set_speed+0x9a>
  403526:	2300      	movs	r3, #0
			ckdiv++;
  403528:	3301      	adds	r3, #1
			c_lh_div /= TWIHS_CLK_DIVIDER;
  40352a:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  40352c:	2aff      	cmp	r2, #255	; 0xff
  40352e:	d901      	bls.n	403534 <twihs_set_speed+0x84>
  403530:	2b06      	cmp	r3, #6
  403532:	d9f9      	bls.n	403528 <twihs_set_speed+0x78>
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  403534:	0211      	lsls	r1, r2, #8
  403536:	b289      	uxth	r1, r1
				TWIHS_CWGR_CKDIV(ckdiv);
  403538:	041b      	lsls	r3, r3, #16
  40353a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  40353e:	430b      	orrs	r3, r1
  403540:	b2d2      	uxtb	r2, r2
  403542:	431a      	orrs	r2, r3
		p_twihs->TWIHS_CWGR =
  403544:	6102      	str	r2, [r0, #16]
	return PASS;
  403546:	2000      	movs	r0, #0
  403548:	4770      	bx	lr
	uint32_t ckdiv = 0;
  40354a:	2300      	movs	r3, #0
  40354c:	e7f2      	b.n	403534 <twihs_set_speed+0x84>
		return FAIL;
  40354e:	2001      	movs	r0, #1
  403550:	4770      	bx	lr
  403552:	bf00      	nop
  403554:	00061a80 	.word	0x00061a80
  403558:	057619f1 	.word	0x057619f1
  40355c:	3ffd1200 	.word	0x3ffd1200

00403560 <twihs_master_init>:
{
  403560:	b508      	push	{r3, lr}
	p_twihs->TWIHS_IDR = ~0UL;
  403562:	f04f 32ff 	mov.w	r2, #4294967295
  403566:	6282      	str	r2, [r0, #40]	; 0x28
	p_twihs->TWIHS_SR;
  403568:	6a02      	ldr	r2, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  40356a:	2280      	movs	r2, #128	; 0x80
  40356c:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_RHR;
  40356e:	6b02      	ldr	r2, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  403570:	2208      	movs	r2, #8
  403572:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  403574:	2220      	movs	r2, #32
  403576:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  403578:	2204      	movs	r2, #4
  40357a:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  40357c:	680a      	ldr	r2, [r1, #0]
  40357e:	6849      	ldr	r1, [r1, #4]
  403580:	4b03      	ldr	r3, [pc, #12]	; (403590 <twihs_master_init+0x30>)
  403582:	4798      	blx	r3
}
  403584:	2801      	cmp	r0, #1
  403586:	bf14      	ite	ne
  403588:	2000      	movne	r0, #0
  40358a:	2001      	moveq	r0, #1
  40358c:	bd08      	pop	{r3, pc}
  40358e:	bf00      	nop
  403590:	004034b1 	.word	0x004034b1

00403594 <twihs_master_read>:
	uint32_t status, cnt = p_packet->length;
  403594:	68ca      	ldr	r2, [r1, #12]
	if (cnt == 0) {
  403596:	2a00      	cmp	r2, #0
  403598:	d04c      	beq.n	403634 <twihs_master_read+0xa0>
{
  40359a:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  40359c:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  40359e:	2600      	movs	r6, #0
  4035a0:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  4035a2:	684b      	ldr	r3, [r1, #4]
  4035a4:	021b      	lsls	r3, r3, #8
  4035a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  4035aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  4035ae:	7c0d      	ldrb	r5, [r1, #16]
  4035b0:	042d      	lsls	r5, r5, #16
  4035b2:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  4035b6:	432b      	orrs	r3, r5
  4035b8:	6043      	str	r3, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  4035ba:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4035bc:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  4035be:	b15d      	cbz	r5, 4035d8 <twihs_master_read+0x44>
	val = addr[0];
  4035c0:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  4035c2:	2d01      	cmp	r5, #1
  4035c4:	dd02      	ble.n	4035cc <twihs_master_read+0x38>
		val |= addr[1];
  4035c6:	784e      	ldrb	r6, [r1, #1]
  4035c8:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
	if (len > 2) {
  4035cc:	2d02      	cmp	r5, #2
  4035ce:	dd04      	ble.n	4035da <twihs_master_read+0x46>
		val |= addr[2];
  4035d0:	7889      	ldrb	r1, [r1, #2]
  4035d2:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  4035d6:	e000      	b.n	4035da <twihs_master_read+0x46>
		return 0;
  4035d8:	2300      	movs	r3, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4035da:	60c3      	str	r3, [r0, #12]
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  4035dc:	2301      	movs	r3, #1
  4035de:	6003      	str	r3, [r0, #0]
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  4035e0:	2502      	movs	r5, #2
  4035e2:	e012      	b.n	40360a <twihs_master_read+0x76>
  4035e4:	6005      	str	r5, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  4035e6:	f013 0f02 	tst.w	r3, #2
  4035ea:	d01b      	beq.n	403624 <twihs_master_read+0x90>
		*buffer++ = p_twihs->TWIHS_RHR;
  4035ec:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4035ee:	7023      	strb	r3, [r4, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  4035f0:	6a03      	ldr	r3, [r0, #32]
  4035f2:	f013 0f01 	tst.w	r3, #1
  4035f6:	d0fb      	beq.n	4035f0 <twihs_master_read+0x5c>
	p_twihs->TWIHS_SR;
  4035f8:	6a03      	ldr	r3, [r0, #32]
	return TWIHS_SUCCESS;
  4035fa:	2000      	movs	r0, #0
}
  4035fc:	bc70      	pop	{r4, r5, r6}
  4035fe:	4770      	bx	lr
		*buffer++ = p_twihs->TWIHS_RHR;
  403600:	6b03      	ldr	r3, [r0, #48]	; 0x30
  403602:	f804 3b01 	strb.w	r3, [r4], #1
	while (cnt > 0) {
  403606:	3a01      	subs	r2, #1
  403608:	d0f2      	beq.n	4035f0 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  40360a:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  40360c:	f413 7f80 	tst.w	r3, #256	; 0x100
  403610:	d114      	bne.n	40363c <twihs_master_read+0xa8>
  403612:	f247 5130 	movw	r1, #30000	; 0x7530
		if (cnt == 1) {
  403616:	2a01      	cmp	r2, #1
  403618:	d0e4      	beq.n	4035e4 <twihs_master_read+0x50>
		if (!(status & TWIHS_SR_RXRDY)) {
  40361a:	f013 0f02 	tst.w	r3, #2
  40361e:	d1ef      	bne.n	403600 <twihs_master_read+0x6c>
	while (cnt > 0) {
  403620:	2a00      	cmp	r2, #0
  403622:	d0e5      	beq.n	4035f0 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  403624:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  403626:	f413 7f80 	tst.w	r3, #256	; 0x100
  40362a:	d105      	bne.n	403638 <twihs_master_read+0xa4>
		if (!timeout--) {
  40362c:	3901      	subs	r1, #1
  40362e:	d1f2      	bne.n	403616 <twihs_master_read+0x82>
			return TWIHS_ERROR_TIMEOUT;
  403630:	2009      	movs	r0, #9
  403632:	e7e3      	b.n	4035fc <twihs_master_read+0x68>
		return TWIHS_INVALID_ARGUMENT;
  403634:	2001      	movs	r0, #1
  403636:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  403638:	2005      	movs	r0, #5
  40363a:	e7df      	b.n	4035fc <twihs_master_read+0x68>
  40363c:	2005      	movs	r0, #5
  40363e:	e7dd      	b.n	4035fc <twihs_master_read+0x68>

00403640 <twihs_master_write>:
	uint32_t status, cnt = p_packet->length;
  403640:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  403642:	2b00      	cmp	r3, #0
  403644:	d043      	beq.n	4036ce <twihs_master_write+0x8e>
{
  403646:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  403648:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  40364a:	2600      	movs	r6, #0
  40364c:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  40364e:	7c0a      	ldrb	r2, [r1, #16]
  403650:	0412      	lsls	r2, r2, #16
  403652:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  403656:	684d      	ldr	r5, [r1, #4]
  403658:	022d      	lsls	r5, r5, #8
  40365a:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  40365e:	432a      	orrs	r2, r5
  403660:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  403662:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  403664:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  403666:	b15d      	cbz	r5, 403680 <twihs_master_write+0x40>
	val = addr[0];
  403668:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  40366a:	2d01      	cmp	r5, #1
  40366c:	dd02      	ble.n	403674 <twihs_master_write+0x34>
		val |= addr[1];
  40366e:	784e      	ldrb	r6, [r1, #1]
  403670:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  403674:	2d02      	cmp	r5, #2
  403676:	dd04      	ble.n	403682 <twihs_master_write+0x42>
		val |= addr[2];
  403678:	7889      	ldrb	r1, [r1, #2]
  40367a:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  40367e:	e000      	b.n	403682 <twihs_master_write+0x42>
		return 0;
  403680:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  403682:	60c2      	str	r2, [r0, #12]
  403684:	e004      	b.n	403690 <twihs_master_write+0x50>
		p_twihs->TWIHS_THR = *buffer++;
  403686:	f814 2b01 	ldrb.w	r2, [r4], #1
  40368a:	6342      	str	r2, [r0, #52]	; 0x34
	while (cnt > 0) {
  40368c:	3b01      	subs	r3, #1
  40368e:	d00f      	beq.n	4036b0 <twihs_master_write+0x70>
		status = p_twihs->TWIHS_SR;
  403690:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  403692:	f412 7f80 	tst.w	r2, #256	; 0x100
  403696:	d11e      	bne.n	4036d6 <twihs_master_write+0x96>
		if (!(status & TWIHS_SR_TXRDY)) {
  403698:	f012 0f04 	tst.w	r2, #4
  40369c:	d1f3      	bne.n	403686 <twihs_master_write+0x46>
		status = p_twihs->TWIHS_SR;
  40369e:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4036a0:	f412 7f80 	tst.w	r2, #256	; 0x100
  4036a4:	d115      	bne.n	4036d2 <twihs_master_write+0x92>
		if (!(status & TWIHS_SR_TXRDY)) {
  4036a6:	f012 0f04 	tst.w	r2, #4
  4036aa:	d1ec      	bne.n	403686 <twihs_master_write+0x46>
	while (cnt > 0) {
  4036ac:	2b00      	cmp	r3, #0
  4036ae:	d1f6      	bne.n	40369e <twihs_master_write+0x5e>
		status = p_twihs->TWIHS_SR;
  4036b0:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4036b2:	f413 7f80 	tst.w	r3, #256	; 0x100
  4036b6:	d111      	bne.n	4036dc <twihs_master_write+0x9c>
		if (status & TWIHS_SR_TXRDY) {
  4036b8:	f013 0f04 	tst.w	r3, #4
  4036bc:	d0f8      	beq.n	4036b0 <twihs_master_write+0x70>
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  4036be:	2302      	movs	r3, #2
  4036c0:	6003      	str	r3, [r0, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  4036c2:	6a03      	ldr	r3, [r0, #32]
  4036c4:	f013 0f01 	tst.w	r3, #1
  4036c8:	d0fb      	beq.n	4036c2 <twihs_master_write+0x82>
	return TWIHS_SUCCESS;
  4036ca:	2000      	movs	r0, #0
  4036cc:	e004      	b.n	4036d8 <twihs_master_write+0x98>
		return TWIHS_INVALID_ARGUMENT;
  4036ce:	2001      	movs	r0, #1
  4036d0:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  4036d2:	2005      	movs	r0, #5
  4036d4:	e000      	b.n	4036d8 <twihs_master_write+0x98>
  4036d6:	2005      	movs	r0, #5
}
  4036d8:	bc70      	pop	{r4, r5, r6}
  4036da:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  4036dc:	2005      	movs	r0, #5
  4036de:	e7fb      	b.n	4036d8 <twihs_master_write+0x98>

004036e0 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4036e0:	6943      	ldr	r3, [r0, #20]
  4036e2:	f013 0f02 	tst.w	r3, #2
  4036e6:	d002      	beq.n	4036ee <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4036e8:	61c1      	str	r1, [r0, #28]
	return 0;
  4036ea:	2000      	movs	r0, #0
  4036ec:	4770      	bx	lr
		return 1;
  4036ee:	2001      	movs	r0, #1
}
  4036f0:	4770      	bx	lr

004036f2 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4036f2:	6943      	ldr	r3, [r0, #20]
  4036f4:	f013 0f01 	tst.w	r3, #1
  4036f8:	d003      	beq.n	403702 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4036fa:	6983      	ldr	r3, [r0, #24]
  4036fc:	700b      	strb	r3, [r1, #0]
	return 0;
  4036fe:	2000      	movs	r0, #0
  403700:	4770      	bx	lr
		return 1;
  403702:	2001      	movs	r0, #1
}
  403704:	4770      	bx	lr

00403706 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  403706:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  403708:	010b      	lsls	r3, r1, #4
  40370a:	4293      	cmp	r3, r2
  40370c:	d914      	bls.n	403738 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40370e:	00c9      	lsls	r1, r1, #3
  403710:	084b      	lsrs	r3, r1, #1
  403712:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  403716:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  40371a:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40371c:	1e5c      	subs	r4, r3, #1
  40371e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  403722:	428c      	cmp	r4, r1
  403724:	d901      	bls.n	40372a <usart_set_async_baudrate+0x24>
		return 1;
  403726:	2001      	movs	r0, #1
  403728:	e017      	b.n	40375a <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  40372a:	6841      	ldr	r1, [r0, #4]
  40372c:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  403730:	6041      	str	r1, [r0, #4]
  403732:	e00c      	b.n	40374e <usart_set_async_baudrate+0x48>
		return 1;
  403734:	2001      	movs	r0, #1
  403736:	e010      	b.n	40375a <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  403738:	0859      	lsrs	r1, r3, #1
  40373a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  40373e:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  403742:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  403744:	1e5c      	subs	r4, r3, #1
  403746:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  40374a:	428c      	cmp	r4, r1
  40374c:	d8f2      	bhi.n	403734 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  40374e:	0412      	lsls	r2, r2, #16
  403750:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  403754:	431a      	orrs	r2, r3
  403756:	6202      	str	r2, [r0, #32]

	return 0;
  403758:	2000      	movs	r0, #0
}
  40375a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40375e:	4770      	bx	lr

00403760 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  403760:	4b08      	ldr	r3, [pc, #32]	; (403784 <usart_reset+0x24>)
  403762:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  403766:	2300      	movs	r3, #0
  403768:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  40376a:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  40376c:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40376e:	2388      	movs	r3, #136	; 0x88
  403770:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  403772:	2324      	movs	r3, #36	; 0x24
  403774:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  403776:	f44f 7380 	mov.w	r3, #256	; 0x100
  40377a:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  40377c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  403780:	6003      	str	r3, [r0, #0]
  403782:	4770      	bx	lr
  403784:	55534100 	.word	0x55534100

00403788 <usart_init_rs232>:
{
  403788:	b570      	push	{r4, r5, r6, lr}
  40378a:	4605      	mov	r5, r0
  40378c:	460c      	mov	r4, r1
  40378e:	4616      	mov	r6, r2
	usart_reset(p_usart);
  403790:	4b0f      	ldr	r3, [pc, #60]	; (4037d0 <usart_init_rs232+0x48>)
  403792:	4798      	blx	r3
	ul_reg_val = 0;
  403794:	2200      	movs	r2, #0
  403796:	4b0f      	ldr	r3, [pc, #60]	; (4037d4 <usart_init_rs232+0x4c>)
  403798:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  40379a:	b1a4      	cbz	r4, 4037c6 <usart_init_rs232+0x3e>
  40379c:	4632      	mov	r2, r6
  40379e:	6821      	ldr	r1, [r4, #0]
  4037a0:	4628      	mov	r0, r5
  4037a2:	4b0d      	ldr	r3, [pc, #52]	; (4037d8 <usart_init_rs232+0x50>)
  4037a4:	4798      	blx	r3
  4037a6:	4602      	mov	r2, r0
  4037a8:	b978      	cbnz	r0, 4037ca <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4037aa:	6863      	ldr	r3, [r4, #4]
  4037ac:	68a1      	ldr	r1, [r4, #8]
  4037ae:	430b      	orrs	r3, r1
  4037b0:	6921      	ldr	r1, [r4, #16]
  4037b2:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4037b4:	68e1      	ldr	r1, [r4, #12]
  4037b6:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4037b8:	4906      	ldr	r1, [pc, #24]	; (4037d4 <usart_init_rs232+0x4c>)
  4037ba:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  4037bc:	6869      	ldr	r1, [r5, #4]
  4037be:	430b      	orrs	r3, r1
  4037c0:	606b      	str	r3, [r5, #4]
}
  4037c2:	4610      	mov	r0, r2
  4037c4:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  4037c6:	2201      	movs	r2, #1
  4037c8:	e7fb      	b.n	4037c2 <usart_init_rs232+0x3a>
  4037ca:	2201      	movs	r2, #1
  4037cc:	e7f9      	b.n	4037c2 <usart_init_rs232+0x3a>
  4037ce:	bf00      	nop
  4037d0:	00403761 	.word	0x00403761
  4037d4:	2040c75c 	.word	0x2040c75c
  4037d8:	00403707 	.word	0x00403707

004037dc <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  4037dc:	2340      	movs	r3, #64	; 0x40
  4037de:	6003      	str	r3, [r0, #0]
  4037e0:	4770      	bx	lr

004037e2 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  4037e2:	2310      	movs	r3, #16
  4037e4:	6003      	str	r3, [r0, #0]
  4037e6:	4770      	bx	lr

004037e8 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4037e8:	6943      	ldr	r3, [r0, #20]
  4037ea:	f013 0f02 	tst.w	r3, #2
  4037ee:	d004      	beq.n	4037fa <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  4037f0:	f3c1 0108 	ubfx	r1, r1, #0, #9
  4037f4:	61c1      	str	r1, [r0, #28]
	return 0;
  4037f6:	2000      	movs	r0, #0
  4037f8:	4770      	bx	lr
		return 1;
  4037fa:	2001      	movs	r0, #1
}
  4037fc:	4770      	bx	lr

004037fe <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4037fe:	6943      	ldr	r3, [r0, #20]
  403800:	f013 0f01 	tst.w	r3, #1
  403804:	d005      	beq.n	403812 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  403806:	6983      	ldr	r3, [r0, #24]
  403808:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40380c:	600b      	str	r3, [r1, #0]
	return 0;
  40380e:	2000      	movs	r0, #0
  403810:	4770      	bx	lr
		return 1;
  403812:	2001      	movs	r0, #1
}
  403814:	4770      	bx	lr

00403816 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  403816:	e7fe      	b.n	403816 <Dummy_Handler>

00403818 <Reset_Handler>:
{
  403818:	b500      	push	{lr}
  40381a:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  40381c:	4b25      	ldr	r3, [pc, #148]	; (4038b4 <Reset_Handler+0x9c>)
  40381e:	4a26      	ldr	r2, [pc, #152]	; (4038b8 <Reset_Handler+0xa0>)
  403820:	429a      	cmp	r2, r3
  403822:	d010      	beq.n	403846 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  403824:	4b25      	ldr	r3, [pc, #148]	; (4038bc <Reset_Handler+0xa4>)
  403826:	4a23      	ldr	r2, [pc, #140]	; (4038b4 <Reset_Handler+0x9c>)
  403828:	429a      	cmp	r2, r3
  40382a:	d20c      	bcs.n	403846 <Reset_Handler+0x2e>
  40382c:	3b01      	subs	r3, #1
  40382e:	1a9b      	subs	r3, r3, r2
  403830:	f023 0303 	bic.w	r3, r3, #3
  403834:	3304      	adds	r3, #4
  403836:	4413      	add	r3, r2
  403838:	491f      	ldr	r1, [pc, #124]	; (4038b8 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  40383a:	f851 0b04 	ldr.w	r0, [r1], #4
  40383e:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  403842:	429a      	cmp	r2, r3
  403844:	d1f9      	bne.n	40383a <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  403846:	4b1e      	ldr	r3, [pc, #120]	; (4038c0 <Reset_Handler+0xa8>)
  403848:	4a1e      	ldr	r2, [pc, #120]	; (4038c4 <Reset_Handler+0xac>)
  40384a:	429a      	cmp	r2, r3
  40384c:	d20a      	bcs.n	403864 <Reset_Handler+0x4c>
  40384e:	3b01      	subs	r3, #1
  403850:	1a9b      	subs	r3, r3, r2
  403852:	f023 0303 	bic.w	r3, r3, #3
  403856:	3304      	adds	r3, #4
  403858:	4413      	add	r3, r2
                *pDest++ = 0;
  40385a:	2100      	movs	r1, #0
  40385c:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  403860:	4293      	cmp	r3, r2
  403862:	d1fb      	bne.n	40385c <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  403864:	4a18      	ldr	r2, [pc, #96]	; (4038c8 <Reset_Handler+0xb0>)
  403866:	4b19      	ldr	r3, [pc, #100]	; (4038cc <Reset_Handler+0xb4>)
  403868:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40386c:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40386e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403872:	fab3 f383 	clz	r3, r3
  403876:	095b      	lsrs	r3, r3, #5
  403878:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40387a:	b672      	cpsid	i
  __ASM volatile ("dmb");
  40387c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403880:	2200      	movs	r2, #0
  403882:	4b13      	ldr	r3, [pc, #76]	; (4038d0 <Reset_Handler+0xb8>)
  403884:	701a      	strb	r2, [r3, #0]
	return flags;
  403886:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  403888:	4a12      	ldr	r2, [pc, #72]	; (4038d4 <Reset_Handler+0xbc>)
  40388a:	6813      	ldr	r3, [r2, #0]
  40388c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  403890:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  403892:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  403896:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40389a:	b129      	cbz	r1, 4038a8 <Reset_Handler+0x90>
		cpu_irq_enable();
  40389c:	2201      	movs	r2, #1
  40389e:	4b0c      	ldr	r3, [pc, #48]	; (4038d0 <Reset_Handler+0xb8>)
  4038a0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  4038a2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4038a6:	b662      	cpsie	i
        __libc_init_array();
  4038a8:	4b0b      	ldr	r3, [pc, #44]	; (4038d8 <Reset_Handler+0xc0>)
  4038aa:	4798      	blx	r3
        main();
  4038ac:	4b0b      	ldr	r3, [pc, #44]	; (4038dc <Reset_Handler+0xc4>)
  4038ae:	4798      	blx	r3
  4038b0:	e7fe      	b.n	4038b0 <Reset_Handler+0x98>
  4038b2:	bf00      	nop
  4038b4:	20400000 	.word	0x20400000
  4038b8:	0040a9f4 	.word	0x0040a9f4
  4038bc:	204009c8 	.word	0x204009c8
  4038c0:	2040c89c 	.word	0x2040c89c
  4038c4:	204009c8 	.word	0x204009c8
  4038c8:	e000ed00 	.word	0xe000ed00
  4038cc:	00400000 	.word	0x00400000
  4038d0:	20400010 	.word	0x20400010
  4038d4:	e000ed88 	.word	0xe000ed88
  4038d8:	004040b1 	.word	0x004040b1
  4038dc:	00403f91 	.word	0x00403f91

004038e0 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4038e0:	4b3b      	ldr	r3, [pc, #236]	; (4039d0 <SystemCoreClockUpdate+0xf0>)
  4038e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4038e4:	f003 0303 	and.w	r3, r3, #3
  4038e8:	2b01      	cmp	r3, #1
  4038ea:	d01d      	beq.n	403928 <SystemCoreClockUpdate+0x48>
  4038ec:	b183      	cbz	r3, 403910 <SystemCoreClockUpdate+0x30>
  4038ee:	2b02      	cmp	r3, #2
  4038f0:	d036      	beq.n	403960 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4038f2:	4b37      	ldr	r3, [pc, #220]	; (4039d0 <SystemCoreClockUpdate+0xf0>)
  4038f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4038f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4038fa:	2b70      	cmp	r3, #112	; 0x70
  4038fc:	d05f      	beq.n	4039be <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4038fe:	4b34      	ldr	r3, [pc, #208]	; (4039d0 <SystemCoreClockUpdate+0xf0>)
  403900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403902:	4934      	ldr	r1, [pc, #208]	; (4039d4 <SystemCoreClockUpdate+0xf4>)
  403904:	f3c2 1202 	ubfx	r2, r2, #4, #3
  403908:	680b      	ldr	r3, [r1, #0]
  40390a:	40d3      	lsrs	r3, r2
  40390c:	600b      	str	r3, [r1, #0]
  40390e:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  403910:	4b31      	ldr	r3, [pc, #196]	; (4039d8 <SystemCoreClockUpdate+0xf8>)
  403912:	695b      	ldr	r3, [r3, #20]
  403914:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  403918:	bf14      	ite	ne
  40391a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40391e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  403922:	4b2c      	ldr	r3, [pc, #176]	; (4039d4 <SystemCoreClockUpdate+0xf4>)
  403924:	601a      	str	r2, [r3, #0]
  403926:	e7e4      	b.n	4038f2 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  403928:	4b29      	ldr	r3, [pc, #164]	; (4039d0 <SystemCoreClockUpdate+0xf0>)
  40392a:	6a1b      	ldr	r3, [r3, #32]
  40392c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403930:	d003      	beq.n	40393a <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  403932:	4a2a      	ldr	r2, [pc, #168]	; (4039dc <SystemCoreClockUpdate+0xfc>)
  403934:	4b27      	ldr	r3, [pc, #156]	; (4039d4 <SystemCoreClockUpdate+0xf4>)
  403936:	601a      	str	r2, [r3, #0]
  403938:	e7db      	b.n	4038f2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40393a:	4a29      	ldr	r2, [pc, #164]	; (4039e0 <SystemCoreClockUpdate+0x100>)
  40393c:	4b25      	ldr	r3, [pc, #148]	; (4039d4 <SystemCoreClockUpdate+0xf4>)
  40393e:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  403940:	4b23      	ldr	r3, [pc, #140]	; (4039d0 <SystemCoreClockUpdate+0xf0>)
  403942:	6a1b      	ldr	r3, [r3, #32]
  403944:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403948:	2b10      	cmp	r3, #16
  40394a:	d005      	beq.n	403958 <SystemCoreClockUpdate+0x78>
  40394c:	2b20      	cmp	r3, #32
  40394e:	d1d0      	bne.n	4038f2 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  403950:	4a22      	ldr	r2, [pc, #136]	; (4039dc <SystemCoreClockUpdate+0xfc>)
  403952:	4b20      	ldr	r3, [pc, #128]	; (4039d4 <SystemCoreClockUpdate+0xf4>)
  403954:	601a      	str	r2, [r3, #0]
          break;
  403956:	e7cc      	b.n	4038f2 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  403958:	4a22      	ldr	r2, [pc, #136]	; (4039e4 <SystemCoreClockUpdate+0x104>)
  40395a:	4b1e      	ldr	r3, [pc, #120]	; (4039d4 <SystemCoreClockUpdate+0xf4>)
  40395c:	601a      	str	r2, [r3, #0]
          break;
  40395e:	e7c8      	b.n	4038f2 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  403960:	4b1b      	ldr	r3, [pc, #108]	; (4039d0 <SystemCoreClockUpdate+0xf0>)
  403962:	6a1b      	ldr	r3, [r3, #32]
  403964:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403968:	d016      	beq.n	403998 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40396a:	4a1c      	ldr	r2, [pc, #112]	; (4039dc <SystemCoreClockUpdate+0xfc>)
  40396c:	4b19      	ldr	r3, [pc, #100]	; (4039d4 <SystemCoreClockUpdate+0xf4>)
  40396e:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  403970:	4b17      	ldr	r3, [pc, #92]	; (4039d0 <SystemCoreClockUpdate+0xf0>)
  403972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403974:	f003 0303 	and.w	r3, r3, #3
  403978:	2b02      	cmp	r3, #2
  40397a:	d1ba      	bne.n	4038f2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40397c:	4a14      	ldr	r2, [pc, #80]	; (4039d0 <SystemCoreClockUpdate+0xf0>)
  40397e:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  403980:	6a92      	ldr	r2, [r2, #40]	; 0x28
  403982:	4814      	ldr	r0, [pc, #80]	; (4039d4 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  403984:	f3c1 410a 	ubfx	r1, r1, #16, #11
  403988:	6803      	ldr	r3, [r0, #0]
  40398a:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40398e:	b2d2      	uxtb	r2, r2
  403990:	fbb3 f3f2 	udiv	r3, r3, r2
  403994:	6003      	str	r3, [r0, #0]
  403996:	e7ac      	b.n	4038f2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403998:	4a11      	ldr	r2, [pc, #68]	; (4039e0 <SystemCoreClockUpdate+0x100>)
  40399a:	4b0e      	ldr	r3, [pc, #56]	; (4039d4 <SystemCoreClockUpdate+0xf4>)
  40399c:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40399e:	4b0c      	ldr	r3, [pc, #48]	; (4039d0 <SystemCoreClockUpdate+0xf0>)
  4039a0:	6a1b      	ldr	r3, [r3, #32]
  4039a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4039a6:	2b10      	cmp	r3, #16
  4039a8:	d005      	beq.n	4039b6 <SystemCoreClockUpdate+0xd6>
  4039aa:	2b20      	cmp	r3, #32
  4039ac:	d1e0      	bne.n	403970 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  4039ae:	4a0b      	ldr	r2, [pc, #44]	; (4039dc <SystemCoreClockUpdate+0xfc>)
  4039b0:	4b08      	ldr	r3, [pc, #32]	; (4039d4 <SystemCoreClockUpdate+0xf4>)
  4039b2:	601a      	str	r2, [r3, #0]
          break;
  4039b4:	e7dc      	b.n	403970 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  4039b6:	4a0b      	ldr	r2, [pc, #44]	; (4039e4 <SystemCoreClockUpdate+0x104>)
  4039b8:	4b06      	ldr	r3, [pc, #24]	; (4039d4 <SystemCoreClockUpdate+0xf4>)
  4039ba:	601a      	str	r2, [r3, #0]
          break;
  4039bc:	e7d8      	b.n	403970 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  4039be:	4a05      	ldr	r2, [pc, #20]	; (4039d4 <SystemCoreClockUpdate+0xf4>)
  4039c0:	6813      	ldr	r3, [r2, #0]
  4039c2:	4909      	ldr	r1, [pc, #36]	; (4039e8 <SystemCoreClockUpdate+0x108>)
  4039c4:	fba1 1303 	umull	r1, r3, r1, r3
  4039c8:	085b      	lsrs	r3, r3, #1
  4039ca:	6013      	str	r3, [r2, #0]
  4039cc:	4770      	bx	lr
  4039ce:	bf00      	nop
  4039d0:	400e0600 	.word	0x400e0600
  4039d4:	20400014 	.word	0x20400014
  4039d8:	400e1810 	.word	0x400e1810
  4039dc:	00b71b00 	.word	0x00b71b00
  4039e0:	003d0900 	.word	0x003d0900
  4039e4:	007a1200 	.word	0x007a1200
  4039e8:	aaaaaaab 	.word	0xaaaaaaab

004039ec <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4039ec:	4b16      	ldr	r3, [pc, #88]	; (403a48 <system_init_flash+0x5c>)
  4039ee:	4298      	cmp	r0, r3
  4039f0:	d913      	bls.n	403a1a <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4039f2:	4b16      	ldr	r3, [pc, #88]	; (403a4c <system_init_flash+0x60>)
  4039f4:	4298      	cmp	r0, r3
  4039f6:	d915      	bls.n	403a24 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4039f8:	4b15      	ldr	r3, [pc, #84]	; (403a50 <system_init_flash+0x64>)
  4039fa:	4298      	cmp	r0, r3
  4039fc:	d916      	bls.n	403a2c <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4039fe:	4b15      	ldr	r3, [pc, #84]	; (403a54 <system_init_flash+0x68>)
  403a00:	4298      	cmp	r0, r3
  403a02:	d917      	bls.n	403a34 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  403a04:	4b14      	ldr	r3, [pc, #80]	; (403a58 <system_init_flash+0x6c>)
  403a06:	4298      	cmp	r0, r3
  403a08:	d918      	bls.n	403a3c <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  403a0a:	4b14      	ldr	r3, [pc, #80]	; (403a5c <system_init_flash+0x70>)
  403a0c:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  403a0e:	bf94      	ite	ls
  403a10:	4a13      	ldrls	r2, [pc, #76]	; (403a60 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  403a12:	4a14      	ldrhi	r2, [pc, #80]	; (403a64 <system_init_flash+0x78>)
  403a14:	4b14      	ldr	r3, [pc, #80]	; (403a68 <system_init_flash+0x7c>)
  403a16:	601a      	str	r2, [r3, #0]
  403a18:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  403a1a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  403a1e:	4b12      	ldr	r3, [pc, #72]	; (403a68 <system_init_flash+0x7c>)
  403a20:	601a      	str	r2, [r3, #0]
  403a22:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  403a24:	4a11      	ldr	r2, [pc, #68]	; (403a6c <system_init_flash+0x80>)
  403a26:	4b10      	ldr	r3, [pc, #64]	; (403a68 <system_init_flash+0x7c>)
  403a28:	601a      	str	r2, [r3, #0]
  403a2a:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  403a2c:	4a10      	ldr	r2, [pc, #64]	; (403a70 <system_init_flash+0x84>)
  403a2e:	4b0e      	ldr	r3, [pc, #56]	; (403a68 <system_init_flash+0x7c>)
  403a30:	601a      	str	r2, [r3, #0]
  403a32:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  403a34:	4a0f      	ldr	r2, [pc, #60]	; (403a74 <system_init_flash+0x88>)
  403a36:	4b0c      	ldr	r3, [pc, #48]	; (403a68 <system_init_flash+0x7c>)
  403a38:	601a      	str	r2, [r3, #0]
  403a3a:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  403a3c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  403a40:	4b09      	ldr	r3, [pc, #36]	; (403a68 <system_init_flash+0x7c>)
  403a42:	601a      	str	r2, [r3, #0]
  403a44:	4770      	bx	lr
  403a46:	bf00      	nop
  403a48:	015ef3bf 	.word	0x015ef3bf
  403a4c:	02bde77f 	.word	0x02bde77f
  403a50:	041cdb3f 	.word	0x041cdb3f
  403a54:	057bceff 	.word	0x057bceff
  403a58:	06dac2bf 	.word	0x06dac2bf
  403a5c:	0839b67f 	.word	0x0839b67f
  403a60:	04000500 	.word	0x04000500
  403a64:	04000600 	.word	0x04000600
  403a68:	400e0c00 	.word	0x400e0c00
  403a6c:	04000100 	.word	0x04000100
  403a70:	04000200 	.word	0x04000200
  403a74:	04000300 	.word	0x04000300

00403a78 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  403a78:	4b0a      	ldr	r3, [pc, #40]	; (403aa4 <_sbrk+0x2c>)
  403a7a:	681b      	ldr	r3, [r3, #0]
  403a7c:	b153      	cbz	r3, 403a94 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  403a7e:	4b09      	ldr	r3, [pc, #36]	; (403aa4 <_sbrk+0x2c>)
  403a80:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  403a82:	181a      	adds	r2, r3, r0
  403a84:	4908      	ldr	r1, [pc, #32]	; (403aa8 <_sbrk+0x30>)
  403a86:	4291      	cmp	r1, r2
  403a88:	db08      	blt.n	403a9c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  403a8a:	4610      	mov	r0, r2
  403a8c:	4a05      	ldr	r2, [pc, #20]	; (403aa4 <_sbrk+0x2c>)
  403a8e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  403a90:	4618      	mov	r0, r3
  403a92:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  403a94:	4a05      	ldr	r2, [pc, #20]	; (403aac <_sbrk+0x34>)
  403a96:	4b03      	ldr	r3, [pc, #12]	; (403aa4 <_sbrk+0x2c>)
  403a98:	601a      	str	r2, [r3, #0]
  403a9a:	e7f0      	b.n	403a7e <_sbrk+0x6>
		return (caddr_t) -1;	
  403a9c:	f04f 30ff 	mov.w	r0, #4294967295
}
  403aa0:	4770      	bx	lr
  403aa2:	bf00      	nop
  403aa4:	2040c760 	.word	0x2040c760
  403aa8:	2045fffc 	.word	0x2045fffc
  403aac:	2040eaa0 	.word	0x2040eaa0

00403ab0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  403ab0:	f04f 30ff 	mov.w	r0, #4294967295
  403ab4:	4770      	bx	lr

00403ab6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  403ab6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  403aba:	604b      	str	r3, [r1, #4]

	return 0;
}
  403abc:	2000      	movs	r0, #0
  403abe:	4770      	bx	lr

00403ac0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  403ac0:	2001      	movs	r0, #1
  403ac2:	4770      	bx	lr

00403ac4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  403ac4:	2000      	movs	r0, #0
  403ac6:	4770      	bx	lr

00403ac8 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  403ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
  403aca:	b083      	sub	sp, #12
  403acc:	4605      	mov	r5, r0
  403ace:	460c      	mov	r4, r1
	uint32_t val = 0;
  403ad0:	2300      	movs	r3, #0
  403ad2:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403ad4:	4b2a      	ldr	r3, [pc, #168]	; (403b80 <usart_serial_getchar+0xb8>)
  403ad6:	4298      	cmp	r0, r3
  403ad8:	d013      	beq.n	403b02 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403ada:	4b2a      	ldr	r3, [pc, #168]	; (403b84 <usart_serial_getchar+0xbc>)
  403adc:	4298      	cmp	r0, r3
  403ade:	d018      	beq.n	403b12 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  403ae0:	4b29      	ldr	r3, [pc, #164]	; (403b88 <usart_serial_getchar+0xc0>)
  403ae2:	4298      	cmp	r0, r3
  403ae4:	d01d      	beq.n	403b22 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403ae6:	4b29      	ldr	r3, [pc, #164]	; (403b8c <usart_serial_getchar+0xc4>)
  403ae8:	429d      	cmp	r5, r3
  403aea:	d022      	beq.n	403b32 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403aec:	4b28      	ldr	r3, [pc, #160]	; (403b90 <usart_serial_getchar+0xc8>)
  403aee:	429d      	cmp	r5, r3
  403af0:	d027      	beq.n	403b42 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  403af2:	4b28      	ldr	r3, [pc, #160]	; (403b94 <usart_serial_getchar+0xcc>)
  403af4:	429d      	cmp	r5, r3
  403af6:	d02e      	beq.n	403b56 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403af8:	4b27      	ldr	r3, [pc, #156]	; (403b98 <usart_serial_getchar+0xd0>)
  403afa:	429d      	cmp	r5, r3
  403afc:	d035      	beq.n	403b6a <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  403afe:	b003      	add	sp, #12
  403b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  403b02:	461f      	mov	r7, r3
  403b04:	4e25      	ldr	r6, [pc, #148]	; (403b9c <usart_serial_getchar+0xd4>)
  403b06:	4621      	mov	r1, r4
  403b08:	4638      	mov	r0, r7
  403b0a:	47b0      	blx	r6
  403b0c:	2800      	cmp	r0, #0
  403b0e:	d1fa      	bne.n	403b06 <usart_serial_getchar+0x3e>
  403b10:	e7e9      	b.n	403ae6 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  403b12:	461f      	mov	r7, r3
  403b14:	4e21      	ldr	r6, [pc, #132]	; (403b9c <usart_serial_getchar+0xd4>)
  403b16:	4621      	mov	r1, r4
  403b18:	4638      	mov	r0, r7
  403b1a:	47b0      	blx	r6
  403b1c:	2800      	cmp	r0, #0
  403b1e:	d1fa      	bne.n	403b16 <usart_serial_getchar+0x4e>
  403b20:	e7e4      	b.n	403aec <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  403b22:	461f      	mov	r7, r3
  403b24:	4e1d      	ldr	r6, [pc, #116]	; (403b9c <usart_serial_getchar+0xd4>)
  403b26:	4621      	mov	r1, r4
  403b28:	4638      	mov	r0, r7
  403b2a:	47b0      	blx	r6
  403b2c:	2800      	cmp	r0, #0
  403b2e:	d1fa      	bne.n	403b26 <usart_serial_getchar+0x5e>
  403b30:	e7df      	b.n	403af2 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  403b32:	461f      	mov	r7, r3
  403b34:	4e19      	ldr	r6, [pc, #100]	; (403b9c <usart_serial_getchar+0xd4>)
  403b36:	4621      	mov	r1, r4
  403b38:	4638      	mov	r0, r7
  403b3a:	47b0      	blx	r6
  403b3c:	2800      	cmp	r0, #0
  403b3e:	d1fa      	bne.n	403b36 <usart_serial_getchar+0x6e>
  403b40:	e7da      	b.n	403af8 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  403b42:	461e      	mov	r6, r3
  403b44:	4d16      	ldr	r5, [pc, #88]	; (403ba0 <usart_serial_getchar+0xd8>)
  403b46:	a901      	add	r1, sp, #4
  403b48:	4630      	mov	r0, r6
  403b4a:	47a8      	blx	r5
  403b4c:	2800      	cmp	r0, #0
  403b4e:	d1fa      	bne.n	403b46 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  403b50:	9b01      	ldr	r3, [sp, #4]
  403b52:	7023      	strb	r3, [r4, #0]
  403b54:	e7d3      	b.n	403afe <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  403b56:	461e      	mov	r6, r3
  403b58:	4d11      	ldr	r5, [pc, #68]	; (403ba0 <usart_serial_getchar+0xd8>)
  403b5a:	a901      	add	r1, sp, #4
  403b5c:	4630      	mov	r0, r6
  403b5e:	47a8      	blx	r5
  403b60:	2800      	cmp	r0, #0
  403b62:	d1fa      	bne.n	403b5a <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  403b64:	9b01      	ldr	r3, [sp, #4]
  403b66:	7023      	strb	r3, [r4, #0]
  403b68:	e7c9      	b.n	403afe <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  403b6a:	461e      	mov	r6, r3
  403b6c:	4d0c      	ldr	r5, [pc, #48]	; (403ba0 <usart_serial_getchar+0xd8>)
  403b6e:	a901      	add	r1, sp, #4
  403b70:	4630      	mov	r0, r6
  403b72:	47a8      	blx	r5
  403b74:	2800      	cmp	r0, #0
  403b76:	d1fa      	bne.n	403b6e <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  403b78:	9b01      	ldr	r3, [sp, #4]
  403b7a:	7023      	strb	r3, [r4, #0]
}
  403b7c:	e7bf      	b.n	403afe <usart_serial_getchar+0x36>
  403b7e:	bf00      	nop
  403b80:	400e0800 	.word	0x400e0800
  403b84:	400e0a00 	.word	0x400e0a00
  403b88:	400e1a00 	.word	0x400e1a00
  403b8c:	400e1c00 	.word	0x400e1c00
  403b90:	40024000 	.word	0x40024000
  403b94:	40028000 	.word	0x40028000
  403b98:	4002c000 	.word	0x4002c000
  403b9c:	004036f3 	.word	0x004036f3
  403ba0:	004037ff 	.word	0x004037ff

00403ba4 <usart_serial_putchar>:
{
  403ba4:	b570      	push	{r4, r5, r6, lr}
  403ba6:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  403ba8:	4b2a      	ldr	r3, [pc, #168]	; (403c54 <usart_serial_putchar+0xb0>)
  403baa:	4298      	cmp	r0, r3
  403bac:	d013      	beq.n	403bd6 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  403bae:	4b2a      	ldr	r3, [pc, #168]	; (403c58 <usart_serial_putchar+0xb4>)
  403bb0:	4298      	cmp	r0, r3
  403bb2:	d019      	beq.n	403be8 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  403bb4:	4b29      	ldr	r3, [pc, #164]	; (403c5c <usart_serial_putchar+0xb8>)
  403bb6:	4298      	cmp	r0, r3
  403bb8:	d01f      	beq.n	403bfa <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  403bba:	4b29      	ldr	r3, [pc, #164]	; (403c60 <usart_serial_putchar+0xbc>)
  403bbc:	4298      	cmp	r0, r3
  403bbe:	d025      	beq.n	403c0c <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  403bc0:	4b28      	ldr	r3, [pc, #160]	; (403c64 <usart_serial_putchar+0xc0>)
  403bc2:	4298      	cmp	r0, r3
  403bc4:	d02b      	beq.n	403c1e <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  403bc6:	4b28      	ldr	r3, [pc, #160]	; (403c68 <usart_serial_putchar+0xc4>)
  403bc8:	4298      	cmp	r0, r3
  403bca:	d031      	beq.n	403c30 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  403bcc:	4b27      	ldr	r3, [pc, #156]	; (403c6c <usart_serial_putchar+0xc8>)
  403bce:	4298      	cmp	r0, r3
  403bd0:	d037      	beq.n	403c42 <usart_serial_putchar+0x9e>
	return 0;
  403bd2:	2000      	movs	r0, #0
}
  403bd4:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403bd6:	461e      	mov	r6, r3
  403bd8:	4d25      	ldr	r5, [pc, #148]	; (403c70 <usart_serial_putchar+0xcc>)
  403bda:	4621      	mov	r1, r4
  403bdc:	4630      	mov	r0, r6
  403bde:	47a8      	blx	r5
  403be0:	2800      	cmp	r0, #0
  403be2:	d1fa      	bne.n	403bda <usart_serial_putchar+0x36>
		return 1;
  403be4:	2001      	movs	r0, #1
  403be6:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403be8:	461e      	mov	r6, r3
  403bea:	4d21      	ldr	r5, [pc, #132]	; (403c70 <usart_serial_putchar+0xcc>)
  403bec:	4621      	mov	r1, r4
  403bee:	4630      	mov	r0, r6
  403bf0:	47a8      	blx	r5
  403bf2:	2800      	cmp	r0, #0
  403bf4:	d1fa      	bne.n	403bec <usart_serial_putchar+0x48>
		return 1;
  403bf6:	2001      	movs	r0, #1
  403bf8:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403bfa:	461e      	mov	r6, r3
  403bfc:	4d1c      	ldr	r5, [pc, #112]	; (403c70 <usart_serial_putchar+0xcc>)
  403bfe:	4621      	mov	r1, r4
  403c00:	4630      	mov	r0, r6
  403c02:	47a8      	blx	r5
  403c04:	2800      	cmp	r0, #0
  403c06:	d1fa      	bne.n	403bfe <usart_serial_putchar+0x5a>
		return 1;
  403c08:	2001      	movs	r0, #1
  403c0a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403c0c:	461e      	mov	r6, r3
  403c0e:	4d18      	ldr	r5, [pc, #96]	; (403c70 <usart_serial_putchar+0xcc>)
  403c10:	4621      	mov	r1, r4
  403c12:	4630      	mov	r0, r6
  403c14:	47a8      	blx	r5
  403c16:	2800      	cmp	r0, #0
  403c18:	d1fa      	bne.n	403c10 <usart_serial_putchar+0x6c>
		return 1;
  403c1a:	2001      	movs	r0, #1
  403c1c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403c1e:	461e      	mov	r6, r3
  403c20:	4d14      	ldr	r5, [pc, #80]	; (403c74 <usart_serial_putchar+0xd0>)
  403c22:	4621      	mov	r1, r4
  403c24:	4630      	mov	r0, r6
  403c26:	47a8      	blx	r5
  403c28:	2800      	cmp	r0, #0
  403c2a:	d1fa      	bne.n	403c22 <usart_serial_putchar+0x7e>
		return 1;
  403c2c:	2001      	movs	r0, #1
  403c2e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403c30:	461e      	mov	r6, r3
  403c32:	4d10      	ldr	r5, [pc, #64]	; (403c74 <usart_serial_putchar+0xd0>)
  403c34:	4621      	mov	r1, r4
  403c36:	4630      	mov	r0, r6
  403c38:	47a8      	blx	r5
  403c3a:	2800      	cmp	r0, #0
  403c3c:	d1fa      	bne.n	403c34 <usart_serial_putchar+0x90>
		return 1;
  403c3e:	2001      	movs	r0, #1
  403c40:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403c42:	461e      	mov	r6, r3
  403c44:	4d0b      	ldr	r5, [pc, #44]	; (403c74 <usart_serial_putchar+0xd0>)
  403c46:	4621      	mov	r1, r4
  403c48:	4630      	mov	r0, r6
  403c4a:	47a8      	blx	r5
  403c4c:	2800      	cmp	r0, #0
  403c4e:	d1fa      	bne.n	403c46 <usart_serial_putchar+0xa2>
		return 1;
  403c50:	2001      	movs	r0, #1
  403c52:	bd70      	pop	{r4, r5, r6, pc}
  403c54:	400e0800 	.word	0x400e0800
  403c58:	400e0a00 	.word	0x400e0a00
  403c5c:	400e1a00 	.word	0x400e1a00
  403c60:	400e1c00 	.word	0x400e1c00
  403c64:	40024000 	.word	0x40024000
  403c68:	40028000 	.word	0x40028000
  403c6c:	4002c000 	.word	0x4002c000
  403c70:	004036e1 	.word	0x004036e1
  403c74:	004037e9 	.word	0x004037e9

00403c78 <vApplicationStackOverflowHook>:
/**
 * \brief Called if stack overflow during execution
 */
extern void vApplicationStackOverflowHook(xTaskHandle *pxTask,
		signed char *pcTaskName)
{
  403c78:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  403c7a:	460a      	mov	r2, r1
  403c7c:	4601      	mov	r1, r0
  403c7e:	4802      	ldr	r0, [pc, #8]	; (403c88 <vApplicationStackOverflowHook+0x10>)
  403c80:	4b02      	ldr	r3, [pc, #8]	; (403c8c <vApplicationStackOverflowHook+0x14>)
  403c82:	4798      	blx	r3
  403c84:	e7fe      	b.n	403c84 <vApplicationStackOverflowHook+0xc>
  403c86:	bf00      	nop
  403c88:	0040a704 	.word	0x0040a704
  403c8c:	00404101 	.word	0x00404101

00403c90 <vApplicationTickHook>:

/**
 * \brief This function is called by FreeRTOS each tick
 */
extern void vApplicationTickHook(void)
{
  403c90:	4770      	bx	lr

00403c92 <vApplicationMallocFailedHook>:
  403c92:	f04f 0380 	mov.w	r3, #128	; 0x80
  403c96:	b672      	cpsid	i
  403c98:	f383 8811 	msr	BASEPRI, r3
  403c9c:	f3bf 8f6f 	isb	sy
  403ca0:	f3bf 8f4f 	dsb	sy
  403ca4:	b662      	cpsie	i
  403ca6:	e7fe      	b.n	403ca6 <vApplicationMallocFailedHook+0x14>

00403ca8 <draw_screen>:
	mxt_write_config_reg(device, mxt_get_object_address(device,
			MXT_GEN_COMMANDPROCESSOR_T6, 0)
			+ MXT_GEN_COMMANDPROCESSOR_CALIBRATE, 0x01);
}

void draw_screen(void) {
  403ca8:	b510      	push	{r4, lr}
	ili9488_set_foreground_color(COLOR_CONVERT(COLOR_WHITE));
  403caa:	4806      	ldr	r0, [pc, #24]	; (403cc4 <draw_screen+0x1c>)
  403cac:	4b06      	ldr	r3, [pc, #24]	; (403cc8 <draw_screen+0x20>)
  403cae:	4798      	blx	r3
	ili9488_draw_filled_rectangle(0, 0, ILI9488_LCD_WIDTH-1, ILI9488_LCD_HEIGHT-1);
  403cb0:	f240 13df 	movw	r3, #479	; 0x1df
  403cb4:	f240 123f 	movw	r2, #319	; 0x13f
  403cb8:	2100      	movs	r1, #0
  403cba:	4608      	mov	r0, r1
  403cbc:	4c03      	ldr	r4, [pc, #12]	; (403ccc <draw_screen+0x24>)
  403cbe:	47a0      	blx	r4
  403cc0:	bd10      	pop	{r4, pc}
  403cc2:	bf00      	nop
  403cc4:	00fcfcfc 	.word	0x00fcfcfc
  403cc8:	00402b41 	.word	0x00402b41
  403ccc:	00402d91 	.word	0x00402d91

00403cd0 <draw_button>:
}

void draw_button(uint32_t clicked) {
  403cd0:	b538      	push	{r3, r4, r5, lr}
	static uint32_t last_state = 255; // undefined
	if(clicked == last_state) return;
  403cd2:	4b13      	ldr	r3, [pc, #76]	; (403d20 <draw_button+0x50>)
  403cd4:	681b      	ldr	r3, [r3, #0]
  403cd6:	4283      	cmp	r3, r0
  403cd8:	d016      	beq.n	403d08 <draw_button+0x38>
  403cda:	4604      	mov	r4, r0
	
	ili9488_set_foreground_color(COLOR_CONVERT(COLOR_BLACK));
  403cdc:	2000      	movs	r0, #0
  403cde:	4b11      	ldr	r3, [pc, #68]	; (403d24 <draw_button+0x54>)
  403ce0:	4798      	blx	r3
	ili9488_draw_filled_rectangle(BUTTON_X-BUTTON_W/2, BUTTON_Y-BUTTON_H/2, BUTTON_X+BUTTON_W/2, BUTTON_Y+BUTTON_H/2);
  403ce2:	f240 133b 	movw	r3, #315	; 0x13b
  403ce6:	22dc      	movs	r2, #220	; 0xdc
  403ce8:	21a5      	movs	r1, #165	; 0xa5
  403cea:	2064      	movs	r0, #100	; 0x64
  403cec:	4d0e      	ldr	r5, [pc, #56]	; (403d28 <draw_button+0x58>)
  403cee:	47a8      	blx	r5
	if(clicked) {
  403cf0:	b15c      	cbz	r4, 403d0a <draw_button+0x3a>
		ili9488_set_foreground_color(COLOR_CONVERT(COLOR_TOMATO));
  403cf2:	480e      	ldr	r0, [pc, #56]	; (403d2c <draw_button+0x5c>)
  403cf4:	4b0b      	ldr	r3, [pc, #44]	; (403d24 <draw_button+0x54>)
  403cf6:	4798      	blx	r3
		ili9488_draw_filled_rectangle(BUTTON_X-BUTTON_W/2+BUTTON_BORDER, BUTTON_Y+BUTTON_BORDER, BUTTON_X+BUTTON_W/2-BUTTON_BORDER, BUTTON_Y+BUTTON_H/2-BUTTON_BORDER);
  403cf8:	f240 1339 	movw	r3, #313	; 0x139
  403cfc:	22da      	movs	r2, #218	; 0xda
  403cfe:	21f2      	movs	r1, #242	; 0xf2
  403d00:	2066      	movs	r0, #102	; 0x66
  403d02:	47a8      	blx	r5
	} else {
		ili9488_set_foreground_color(COLOR_CONVERT(COLOR_GREEN));
		ili9488_draw_filled_rectangle(BUTTON_X-BUTTON_W/2+BUTTON_BORDER, BUTTON_Y-BUTTON_H/2+BUTTON_BORDER, BUTTON_X+BUTTON_W/2-BUTTON_BORDER, BUTTON_Y-BUTTON_BORDER);
	}
	last_state = clicked;
  403d04:	4b06      	ldr	r3, [pc, #24]	; (403d20 <draw_button+0x50>)
  403d06:	601c      	str	r4, [r3, #0]
  403d08:	bd38      	pop	{r3, r4, r5, pc}
		ili9488_set_foreground_color(COLOR_CONVERT(COLOR_GREEN));
  403d0a:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
  403d0e:	4b05      	ldr	r3, [pc, #20]	; (403d24 <draw_button+0x54>)
  403d10:	4798      	blx	r3
		ili9488_draw_filled_rectangle(BUTTON_X-BUTTON_W/2+BUTTON_BORDER, BUTTON_Y-BUTTON_H/2+BUTTON_BORDER, BUTTON_X+BUTTON_W/2-BUTTON_BORDER, BUTTON_Y-BUTTON_BORDER);
  403d12:	23ee      	movs	r3, #238	; 0xee
  403d14:	22da      	movs	r2, #218	; 0xda
  403d16:	21a7      	movs	r1, #167	; 0xa7
  403d18:	2066      	movs	r0, #102	; 0x66
  403d1a:	4d03      	ldr	r5, [pc, #12]	; (403d28 <draw_button+0x58>)
  403d1c:	47a8      	blx	r5
  403d1e:	e7f1      	b.n	403d04 <draw_button+0x34>
  403d20:	20400018 	.word	0x20400018
  403d24:	00402b41 	.word	0x00402b41
  403d28:	00402d91 	.word	0x00402d91
  403d2c:	00fc6044 	.word	0x00fc6044

00403d30 <update_screen>:
}



void update_screen(uint32_t tx, uint32_t ty) {
	if(tx >= BUTTON_X-BUTTON_W/2 && tx <= BUTTON_X + BUTTON_W/2) {
  403d30:	3864      	subs	r0, #100	; 0x64
  403d32:	2878      	cmp	r0, #120	; 0x78
  403d34:	d810      	bhi.n	403d58 <update_screen+0x28>
void update_screen(uint32_t tx, uint32_t ty) {
  403d36:	b508      	push	{r3, lr}
		if(ty >= BUTTON_Y-BUTTON_H/2 && ty <= BUTTON_Y) {
  403d38:	f1a1 03a5 	sub.w	r3, r1, #165	; 0xa5
  403d3c:	2b4b      	cmp	r3, #75	; 0x4b
  403d3e:	d903      	bls.n	403d48 <update_screen+0x18>
			draw_button(1);
		} else if(ty > BUTTON_Y && ty < BUTTON_Y + BUTTON_H/2) {
  403d40:	39f1      	subs	r1, #241	; 0xf1
  403d42:	2949      	cmp	r1, #73	; 0x49
  403d44:	d904      	bls.n	403d50 <update_screen+0x20>
  403d46:	bd08      	pop	{r3, pc}
			draw_button(1);
  403d48:	2001      	movs	r0, #1
  403d4a:	4b04      	ldr	r3, [pc, #16]	; (403d5c <update_screen+0x2c>)
  403d4c:	4798      	blx	r3
  403d4e:	bd08      	pop	{r3, pc}
			draw_button(0);
  403d50:	2000      	movs	r0, #0
  403d52:	4b02      	ldr	r3, [pc, #8]	; (403d5c <update_screen+0x2c>)
  403d54:	4798      	blx	r3
		}
	}
}
  403d56:	e7f6      	b.n	403d46 <update_screen+0x16>
  403d58:	4770      	bx	lr
  403d5a:	bf00      	nop
  403d5c:	00403cd1 	.word	0x00403cd1

00403d60 <mxt_handler>:


void mxt_handler(struct mxt_device *device)
{
  403d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403d64:	b0ce      	sub	sp, #312	; 0x138
  403d66:	4605      	mov	r5, r0
	/* USART tx buffer initialized to 0 */
	char tx_buf[STRING_LENGTH * MAX_ENTRIES] = {0};
  403d68:	22d2      	movs	r2, #210	; 0xd2
  403d6a:	2100      	movs	r1, #0
  403d6c:	a819      	add	r0, sp, #100	; 0x64
  403d6e:	4b23      	ldr	r3, [pc, #140]	; (403dfc <mxt_handler+0x9c>)
  403d70:	4798      	blx	r3
	uint8_t i = 0; /* Iterator */
  403d72:	2400      	movs	r4, #0
	do {
		/* Temporary buffer for each new touch event line */
		char buf[STRING_LENGTH];
	
		/* Read next next touch event in the queue, discard if read fails */
		if (mxt_read_touch_event(device, &touch_event) != STATUS_OK) {
  403d74:	4f22      	ldr	r7, [pc, #136]	; (403e00 <mxt_handler+0xa0>)
		 // eixos trocados (quando na vertical LCD)
		uint32_t conv_x = convert_axis_system_x(touch_event.y);
		uint32_t conv_y = convert_axis_system_y(touch_event.x);
		
		/* Format a new entry in the data string that will be sent over USART */
		sprintf(buf, "Nr: %1d, X:%4d, Y:%4d, Status:0x%2x conv X:%3d Y:%3d\n\r",
  403d76:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 403e1c <mxt_handler+0xbc>
  403d7a:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 403e20 <mxt_handler+0xc0>
  403d7e:	e005      	b.n	403d8c <mxt_handler+0x2c>
		strcat(tx_buf, buf);
		i++;

		/* Check if there is still messages in the queue and
		 * if we have reached the maximum numbers of events */
	} while ((mxt_is_message_pending(device)) & (i < MAX_ENTRIES));
  403d80:	4628      	mov	r0, r5
  403d82:	4b20      	ldr	r3, [pc, #128]	; (403e04 <mxt_handler+0xa4>)
  403d84:	4798      	blx	r3
  403d86:	2c02      	cmp	r4, #2
  403d88:	d82a      	bhi.n	403de0 <mxt_handler+0x80>
  403d8a:	b348      	cbz	r0, 403de0 <mxt_handler+0x80>
		if (mxt_read_touch_event(device, &touch_event) != STATUS_OK) {
  403d8c:	a916      	add	r1, sp, #88	; 0x58
  403d8e:	4628      	mov	r0, r5
  403d90:	47b8      	blx	r7
  403d92:	2800      	cmp	r0, #0
  403d94:	d1f4      	bne.n	403d80 <mxt_handler+0x20>
		uint32_t conv_x = convert_axis_system_x(touch_event.y);
  403d96:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
	return ILI9488_LCD_WIDTH - ILI9488_LCD_WIDTH*touch_y/4096;
  403d9a:	eb01 0681 	add.w	r6, r1, r1, lsl #2
  403d9e:	f3c6 1693 	ubfx	r6, r6, #6, #20
  403da2:	f5c6 76a0 	rsb	r6, r6, #320	; 0x140
		uint32_t conv_y = convert_axis_system_y(touch_event.x);
  403da6:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
	return ILI9488_LCD_HEIGHT*touch_x/4096;
  403daa:	ebc3 1a03 	rsb	sl, r3, r3, lsl #4
  403dae:	f3ca 1ad3 	ubfx	sl, sl, #7, #20
		sprintf(buf, "Nr: %1d, X:%4d, Y:%4d, Status:0x%2x conv X:%3d Y:%3d\n\r",
  403db2:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
  403db6:	f8cd a00c 	str.w	sl, [sp, #12]
  403dba:	9602      	str	r6, [sp, #8]
  403dbc:	f89d 0059 	ldrb.w	r0, [sp, #89]	; 0x59
  403dc0:	9001      	str	r0, [sp, #4]
  403dc2:	9100      	str	r1, [sp, #0]
  403dc4:	4649      	mov	r1, r9
  403dc6:	a804      	add	r0, sp, #16
  403dc8:	47c0      	blx	r8
		update_screen(conv_x, conv_y);
  403dca:	4651      	mov	r1, sl
  403dcc:	4630      	mov	r0, r6
  403dce:	4b0e      	ldr	r3, [pc, #56]	; (403e08 <mxt_handler+0xa8>)
  403dd0:	4798      	blx	r3
		strcat(tx_buf, buf);
  403dd2:	a904      	add	r1, sp, #16
  403dd4:	a819      	add	r0, sp, #100	; 0x64
  403dd6:	4b0d      	ldr	r3, [pc, #52]	; (403e0c <mxt_handler+0xac>)
  403dd8:	4798      	blx	r3
		i++;
  403dda:	3401      	adds	r4, #1
  403ddc:	b2e4      	uxtb	r4, r4
  403dde:	e7cf      	b.n	403d80 <mxt_handler+0x20>

	/* If there is any entries in the buffer, send them over USART */
	if (i > 0) {
  403de0:	b914      	cbnz	r4, 403de8 <mxt_handler+0x88>
		usart_serial_write_packet(USART_SERIAL_EXAMPLE, (uint8_t *)tx_buf, strlen(tx_buf));
	}
}
  403de2:	b04e      	add	sp, #312	; 0x138
  403de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		usart_serial_write_packet(USART_SERIAL_EXAMPLE, (uint8_t *)tx_buf, strlen(tx_buf));
  403de8:	a819      	add	r0, sp, #100	; 0x64
  403dea:	4b09      	ldr	r3, [pc, #36]	; (403e10 <mxt_handler+0xb0>)
  403dec:	4798      	blx	r3
  403dee:	4602      	mov	r2, r0
  403df0:	a919      	add	r1, sp, #100	; 0x64
  403df2:	4808      	ldr	r0, [pc, #32]	; (403e14 <mxt_handler+0xb4>)
  403df4:	4b08      	ldr	r3, [pc, #32]	; (403e18 <mxt_handler+0xb8>)
  403df6:	4798      	blx	r3
}
  403df8:	e7f3      	b.n	403de2 <mxt_handler+0x82>
  403dfa:	bf00      	nop
  403dfc:	004047cd 	.word	0x004047cd
  403e00:	00402289 	.word	0x00402289
  403e04:	00402219 	.word	0x00402219
  403e08:	00403d31 	.word	0x00403d31
  403e0c:	00404a91 	.word	0x00404a91
  403e10:	00404bc1 	.word	0x00404bc1
  403e14:	40028000 	.word	0x40028000
  403e18:	0040236d 	.word	0x0040236d
  403e1c:	0040a6cc 	.word	0x0040a6cc
  403e20:	00404a45 	.word	0x00404a45

00403e24 <task_mxt>:

void task_mxt(void){
  403e24:	b580      	push	{r7, lr}
  403e26:	b0a4      	sub	sp, #144	; 0x90
	uint8_t t8_object[] = {
  403e28:	4c4b      	ldr	r4, [pc, #300]	; (403f58 <task_mxt+0x134>)
  403e2a:	ab04      	add	r3, sp, #16
  403e2c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
  403e30:	c303      	stmia	r3!, {r0, r1}
  403e32:	801a      	strh	r2, [r3, #0]
	uint8_t t9_object[] = {
  403e34:	ad13      	add	r5, sp, #76	; 0x4c
  403e36:	f104 060c 	add.w	r6, r4, #12
  403e3a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  403e3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  403e3e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  403e40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  403e42:	6833      	ldr	r3, [r6, #0]
  403e44:	602b      	str	r3, [r5, #0]
	uint8_t t46_object[] = {
  403e46:	ab01      	add	r3, sp, #4
  403e48:	f104 0230 	add.w	r2, r4, #48	; 0x30
  403e4c:	ca07      	ldmia	r2, {r0, r1, r2}
  403e4e:	c303      	stmia	r3!, {r0, r1}
  403e50:	701a      	strb	r2, [r3, #0]
	uint8_t t56_object[] = {
  403e52:	ad0a      	add	r5, sp, #40	; 0x28
  403e54:	343c      	adds	r4, #60	; 0x3c
  403e56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  403e58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  403e5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  403e5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  403e5e:	6823      	ldr	r3, [r4, #0]
  403e60:	702b      	strb	r3, [r5, #0]
	twihs_master_options_t twi_opt = {
  403e62:	2400      	movs	r4, #0
  403e64:	9409      	str	r4, [sp, #36]	; 0x24
  403e66:	4b3d      	ldr	r3, [pc, #244]	; (403f5c <task_mxt+0x138>)
  403e68:	9308      	str	r3, [sp, #32]
  403e6a:	264a      	movs	r6, #74	; 0x4a
  403e6c:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
typedef twihs_packet_t twihs_package_t;

static inline uint32_t twihs_master_setup(twihs_master_t p_twihs,
		twihs_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_peripheral_hz();
  403e70:	4b3b      	ldr	r3, [pc, #236]	; (403f60 <task_mxt+0x13c>)
  403e72:	9307      	str	r3, [sp, #28]
  403e74:	2013      	movs	r0, #19
  403e76:	4b3b      	ldr	r3, [pc, #236]	; (403f64 <task_mxt+0x140>)
  403e78:	4798      	blx	r3
#endif		
	} else {
		// Do Nothing
	}
#endif
	return (twihs_master_init(p_twihs, p_opt));
  403e7a:	4d3b      	ldr	r5, [pc, #236]	; (403f68 <task_mxt+0x144>)
  403e7c:	a907      	add	r1, sp, #28
  403e7e:	4628      	mov	r0, r5
  403e80:	4b3a      	ldr	r3, [pc, #232]	; (403f6c <task_mxt+0x148>)
  403e82:	4798      	blx	r3
	status = mxt_init_device(device, MAXTOUCH_TWI_INTERFACE,
  403e84:	2302      	movs	r3, #2
  403e86:	4632      	mov	r2, r6
  403e88:	4629      	mov	r1, r5
  403e8a:	a81c      	add	r0, sp, #112	; 0x70
  403e8c:	4d38      	ldr	r5, [pc, #224]	; (403f70 <task_mxt+0x14c>)
  403e8e:	47a8      	blx	r5
	mxt_write_config_reg(device, mxt_get_object_address(device,
  403e90:	4622      	mov	r2, r4
  403e92:	2106      	movs	r1, #6
  403e94:	a81c      	add	r0, sp, #112	; 0x70
  403e96:	4d37      	ldr	r5, [pc, #220]	; (403f74 <task_mxt+0x150>)
  403e98:	47a8      	blx	r5
  403e9a:	2201      	movs	r2, #1
  403e9c:	4601      	mov	r1, r0
  403e9e:	a81c      	add	r0, sp, #112	; 0x70
  403ea0:	4e35      	ldr	r6, [pc, #212]	; (403f78 <task_mxt+0x154>)
  403ea2:	47b0      	blx	r6
	delay_ms(MXT_RESET_TIME);
  403ea4:	4835      	ldr	r0, [pc, #212]	; (403f7c <task_mxt+0x158>)
  403ea6:	4b36      	ldr	r3, [pc, #216]	; (403f80 <task_mxt+0x15c>)
  403ea8:	4798      	blx	r3
	mxt_write_config_reg(device, mxt_get_object_address(device,
  403eaa:	4622      	mov	r2, r4
  403eac:	2107      	movs	r1, #7
  403eae:	a81c      	add	r0, sp, #112	; 0x70
  403eb0:	47a8      	blx	r5
  403eb2:	2220      	movs	r2, #32
  403eb4:	4601      	mov	r1, r0
  403eb6:	a81c      	add	r0, sp, #112	; 0x70
  403eb8:	47b0      	blx	r6
	mxt_write_config_reg(device, mxt_get_object_address(device,
  403eba:	4622      	mov	r2, r4
  403ebc:	2107      	movs	r1, #7
  403ebe:	a81c      	add	r0, sp, #112	; 0x70
  403ec0:	47a8      	blx	r5
  403ec2:	1c41      	adds	r1, r0, #1
  403ec4:	2210      	movs	r2, #16
  403ec6:	b289      	uxth	r1, r1
  403ec8:	a81c      	add	r0, sp, #112	; 0x70
  403eca:	47b0      	blx	r6
	mxt_write_config_reg(device, mxt_get_object_address(device,
  403ecc:	4622      	mov	r2, r4
  403ece:	2107      	movs	r1, #7
  403ed0:	a81c      	add	r0, sp, #112	; 0x70
  403ed2:	47a8      	blx	r5
  403ed4:	1c81      	adds	r1, r0, #2
  403ed6:	224b      	movs	r2, #75	; 0x4b
  403ed8:	b289      	uxth	r1, r1
  403eda:	a81c      	add	r0, sp, #112	; 0x70
  403edc:	47b0      	blx	r6
	mxt_write_config_reg(device, mxt_get_object_address(device,
  403ede:	4622      	mov	r2, r4
  403ee0:	2107      	movs	r1, #7
  403ee2:	a81c      	add	r0, sp, #112	; 0x70
  403ee4:	47a8      	blx	r5
  403ee6:	1cc1      	adds	r1, r0, #3
  403ee8:	2284      	movs	r2, #132	; 0x84
  403eea:	b289      	uxth	r1, r1
  403eec:	a81c      	add	r0, sp, #112	; 0x70
  403eee:	47b0      	blx	r6
	mxt_write_config_object(device, mxt_get_object_address(device,
  403ef0:	4622      	mov	r2, r4
  403ef2:	2108      	movs	r1, #8
  403ef4:	a81c      	add	r0, sp, #112	; 0x70
  403ef6:	47a8      	blx	r5
  403ef8:	aa04      	add	r2, sp, #16
  403efa:	4601      	mov	r1, r0
  403efc:	a81c      	add	r0, sp, #112	; 0x70
  403efe:	4f21      	ldr	r7, [pc, #132]	; (403f84 <task_mxt+0x160>)
  403f00:	47b8      	blx	r7
	mxt_write_config_object(device, mxt_get_object_address(device,
  403f02:	4622      	mov	r2, r4
  403f04:	2109      	movs	r1, #9
  403f06:	a81c      	add	r0, sp, #112	; 0x70
  403f08:	47a8      	blx	r5
  403f0a:	aa13      	add	r2, sp, #76	; 0x4c
  403f0c:	4601      	mov	r1, r0
  403f0e:	a81c      	add	r0, sp, #112	; 0x70
  403f10:	47b8      	blx	r7
	mxt_write_config_object(device, mxt_get_object_address(device,
  403f12:	4622      	mov	r2, r4
  403f14:	212e      	movs	r1, #46	; 0x2e
  403f16:	a81c      	add	r0, sp, #112	; 0x70
  403f18:	47a8      	blx	r5
  403f1a:	aa01      	add	r2, sp, #4
  403f1c:	4601      	mov	r1, r0
  403f1e:	a81c      	add	r0, sp, #112	; 0x70
  403f20:	47b8      	blx	r7
	mxt_write_config_object(device, mxt_get_object_address(device,
  403f22:	4622      	mov	r2, r4
  403f24:	2138      	movs	r1, #56	; 0x38
  403f26:	a81c      	add	r0, sp, #112	; 0x70
  403f28:	47a8      	blx	r5
  403f2a:	aa0a      	add	r2, sp, #40	; 0x28
  403f2c:	4601      	mov	r1, r0
  403f2e:	a81c      	add	r0, sp, #112	; 0x70
  403f30:	47b8      	blx	r7
	mxt_write_config_reg(device, mxt_get_object_address(device,
  403f32:	4622      	mov	r2, r4
  403f34:	2106      	movs	r1, #6
  403f36:	a81c      	add	r0, sp, #112	; 0x70
  403f38:	47a8      	blx	r5
  403f3a:	1c81      	adds	r1, r0, #2
  403f3c:	2201      	movs	r2, #1
  403f3e:	b289      	uxth	r1, r1
  403f40:	a81c      	add	r0, sp, #112	; 0x70
  403f42:	47b0      	blx	r6
    
  	while (true) {  
		  /* Check for any pending messages and run message handler if any
		   * message is found in the queue */
		  
		  if (mxt_is_message_pending(&device)) {
  403f44:	4c10      	ldr	r4, [pc, #64]	; (403f88 <task_mxt+0x164>)
		  	mxt_handler(&device);
  403f46:	4d11      	ldr	r5, [pc, #68]	; (403f8c <task_mxt+0x168>)
		  if (mxt_is_message_pending(&device)) {
  403f48:	a81c      	add	r0, sp, #112	; 0x70
  403f4a:	47a0      	blx	r4
  403f4c:	2800      	cmp	r0, #0
  403f4e:	d0fb      	beq.n	403f48 <task_mxt+0x124>
		  	mxt_handler(&device);
  403f50:	a81c      	add	r0, sp, #112	; 0x70
  403f52:	47a8      	blx	r5
  403f54:	e7f8      	b.n	403f48 <task_mxt+0x124>
  403f56:	bf00      	nop
  403f58:	0040a620 	.word	0x0040a620
  403f5c:	00061a80 	.word	0x00061a80
  403f60:	08f0d180 	.word	0x08f0d180
  403f64:	00403315 	.word	0x00403315
  403f68:	40018000 	.word	0x40018000
  403f6c:	00403561 	.word	0x00403561
  403f70:	00401e81 	.word	0x00401e81
  403f74:	00402119 	.word	0x00402119
  403f78:	004021d1 	.word	0x004021d1
  403f7c:	003228d8 	.word	0x003228d8
  403f80:	20400001 	.word	0x20400001
  403f84:	00402159 	.word	0x00402159
  403f88:	00402219 	.word	0x00402219
  403f8c:	00403d61 	.word	0x00403d61

00403f90 <main>:
      }
	}
}

int main(void)
{
  403f90:	b500      	push	{lr}
  403f92:	b08b      	sub	sp, #44	; 0x2c
		.charlength   = USART_SERIAL_CHAR_LENGTH,
		.paritytype   = USART_SERIAL_PARITY,
		.stopbits     = USART_SERIAL_STOP_BIT
	};

	sysclk_init(); /* Initialize system clocks */
  403f94:	4b2b      	ldr	r3, [pc, #172]	; (404044 <main+0xb4>)
  403f96:	4798      	blx	r3
	board_init();  /* Initialize board */
  403f98:	4b2b      	ldr	r3, [pc, #172]	; (404048 <main+0xb8>)
  403f9a:	4798      	blx	r3
	g_ili9488_display_opt.ul_width = ILI9488_LCD_WIDTH;
  403f9c:	482b      	ldr	r0, [pc, #172]	; (40404c <main+0xbc>)
  403f9e:	f44f 73a0 	mov.w	r3, #320	; 0x140
  403fa2:	6003      	str	r3, [r0, #0]
	g_ili9488_display_opt.ul_height = ILI9488_LCD_HEIGHT;
  403fa4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  403fa8:	6043      	str	r3, [r0, #4]
	g_ili9488_display_opt.foreground_color = COLOR_CONVERT(COLOR_WHITE);
  403faa:	4b29      	ldr	r3, [pc, #164]	; (404050 <main+0xc0>)
  403fac:	6083      	str	r3, [r0, #8]
	g_ili9488_display_opt.background_color = COLOR_CONVERT(COLOR_WHITE);
  403fae:	60c3      	str	r3, [r0, #12]
	ili9488_init(&g_ili9488_display_opt);
  403fb0:	4b28      	ldr	r3, [pc, #160]	; (404054 <main+0xc4>)
  403fb2:	4798      	blx	r3
	configure_lcd();
	draw_screen();
  403fb4:	4b28      	ldr	r3, [pc, #160]	; (404058 <main+0xc8>)
  403fb6:	4798      	blx	r3
	draw_button(0);
  403fb8:	2000      	movs	r0, #0
  403fba:	4b28      	ldr	r3, [pc, #160]	; (40405c <main+0xcc>)
  403fbc:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  403fbe:	4d28      	ldr	r5, [pc, #160]	; (404060 <main+0xd0>)
  403fc0:	4b28      	ldr	r3, [pc, #160]	; (404064 <main+0xd4>)
  403fc2:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  403fc4:	4a28      	ldr	r2, [pc, #160]	; (404068 <main+0xd8>)
  403fc6:	4b29      	ldr	r3, [pc, #164]	; (40406c <main+0xdc>)
  403fc8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  403fca:	4a29      	ldr	r2, [pc, #164]	; (404070 <main+0xe0>)
  403fcc:	4b29      	ldr	r3, [pc, #164]	; (404074 <main+0xe4>)
  403fce:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  403fd0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  403fd4:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  403fd6:	23c0      	movs	r3, #192	; 0xc0
  403fd8:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  403fda:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403fde:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  403fe0:	2400      	movs	r4, #0
  403fe2:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  403fe4:	9408      	str	r4, [sp, #32]
  403fe6:	200e      	movs	r0, #14
  403fe8:	4b23      	ldr	r3, [pc, #140]	; (404078 <main+0xe8>)
  403fea:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  403fec:	4a23      	ldr	r2, [pc, #140]	; (40407c <main+0xec>)
  403fee:	a904      	add	r1, sp, #16
  403ff0:	4628      	mov	r0, r5
  403ff2:	4b23      	ldr	r3, [pc, #140]	; (404080 <main+0xf0>)
  403ff4:	4798      	blx	r3
		usart_enable_tx(p_usart);
  403ff6:	4628      	mov	r0, r5
  403ff8:	4b22      	ldr	r3, [pc, #136]	; (404084 <main+0xf4>)
  403ffa:	4798      	blx	r3
		usart_enable_rx(p_usart);
  403ffc:	4628      	mov	r0, r5
  403ffe:	4b22      	ldr	r3, [pc, #136]	; (404088 <main+0xf8>)
  404000:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  404002:	4e22      	ldr	r6, [pc, #136]	; (40408c <main+0xfc>)
  404004:	6833      	ldr	r3, [r6, #0]
  404006:	4621      	mov	r1, r4
  404008:	6898      	ldr	r0, [r3, #8]
  40400a:	4d21      	ldr	r5, [pc, #132]	; (404090 <main+0x100>)
  40400c:	47a8      	blx	r5
	setbuf(stdin, NULL);
  40400e:	6833      	ldr	r3, [r6, #0]
  404010:	4621      	mov	r1, r4
  404012:	6858      	ldr	r0, [r3, #4]
  404014:	47a8      	blx	r5

	/* Initialize stdio on USART */
	stdio_serial_init(USART_SERIAL_EXAMPLE, &usart_serial_options);

	printf("\n\rmaXTouch data USART transmitter\n\r");
  404016:	481f      	ldr	r0, [pc, #124]	; (404094 <main+0x104>)
  404018:	4b1f      	ldr	r3, [pc, #124]	; (404098 <main+0x108>)
  40401a:	4798      	blx	r3
		
  /* Create task to make led blink */
  if (xTaskCreate(task_mxt, "mxt", TASK_MXT_STACK_SIZE, NULL, TASK_MXT_STACK_PRIORITY, NULL) != pdPASS) {
  40401c:	9403      	str	r4, [sp, #12]
  40401e:	9402      	str	r4, [sp, #8]
  404020:	9401      	str	r4, [sp, #4]
  404022:	9400      	str	r4, [sp, #0]
  404024:	4623      	mov	r3, r4
  404026:	f44f 7200 	mov.w	r2, #512	; 0x200
  40402a:	491c      	ldr	r1, [pc, #112]	; (40409c <main+0x10c>)
  40402c:	481c      	ldr	r0, [pc, #112]	; (4040a0 <main+0x110>)
  40402e:	4c1d      	ldr	r4, [pc, #116]	; (4040a4 <main+0x114>)
  404030:	47a0      	blx	r4
  404032:	2801      	cmp	r0, #1
  404034:	d002      	beq.n	40403c <main+0xac>
    printf("Failed to create test led task\r\n");
  404036:	481c      	ldr	r0, [pc, #112]	; (4040a8 <main+0x118>)
  404038:	4b17      	ldr	r3, [pc, #92]	; (404098 <main+0x108>)
  40403a:	4798      	blx	r3
  }

  /* Start the scheduler. */
  vTaskStartScheduler();
  40403c:	4b1b      	ldr	r3, [pc, #108]	; (4040ac <main+0x11c>)
  40403e:	4798      	blx	r3
  404040:	e7fe      	b.n	404040 <main+0xb0>
  404042:	bf00      	nop
  404044:	004022f9 	.word	0x004022f9
  404048:	00402661 	.word	0x00402661
  40404c:	2040c864 	.word	0x2040c864
  404050:	00fcfcfc 	.word	0x00fcfcfc
  404054:	00402bcd 	.word	0x00402bcd
  404058:	00403ca9 	.word	0x00403ca9
  40405c:	00403cd1 	.word	0x00403cd1
  404060:	40028000 	.word	0x40028000
  404064:	2040c860 	.word	0x2040c860
  404068:	00403ba5 	.word	0x00403ba5
  40406c:	2040c85c 	.word	0x2040c85c
  404070:	00403ac9 	.word	0x00403ac9
  404074:	2040c858 	.word	0x2040c858
  404078:	00403315 	.word	0x00403315
  40407c:	08f0d180 	.word	0x08f0d180
  404080:	00403789 	.word	0x00403789
  404084:	004037dd 	.word	0x004037dd
  404088:	004037e3 	.word	0x004037e3
  40408c:	2040001c 	.word	0x2040001c
  404090:	004048a5 	.word	0x004048a5
  404094:	0040a680 	.word	0x0040a680
  404098:	00404101 	.word	0x00404101
  40409c:	0040a6a4 	.word	0x0040a6a4
  4040a0:	00403e25 	.word	0x00403e25
  4040a4:	00400f69 	.word	0x00400f69
  4040a8:	0040a6a8 	.word	0x0040a6a8
  4040ac:	0040119d 	.word	0x0040119d

004040b0 <__libc_init_array>:
  4040b0:	b570      	push	{r4, r5, r6, lr}
  4040b2:	4e0f      	ldr	r6, [pc, #60]	; (4040f0 <__libc_init_array+0x40>)
  4040b4:	4d0f      	ldr	r5, [pc, #60]	; (4040f4 <__libc_init_array+0x44>)
  4040b6:	1b76      	subs	r6, r6, r5
  4040b8:	10b6      	asrs	r6, r6, #2
  4040ba:	bf18      	it	ne
  4040bc:	2400      	movne	r4, #0
  4040be:	d005      	beq.n	4040cc <__libc_init_array+0x1c>
  4040c0:	3401      	adds	r4, #1
  4040c2:	f855 3b04 	ldr.w	r3, [r5], #4
  4040c6:	4798      	blx	r3
  4040c8:	42a6      	cmp	r6, r4
  4040ca:	d1f9      	bne.n	4040c0 <__libc_init_array+0x10>
  4040cc:	4e0a      	ldr	r6, [pc, #40]	; (4040f8 <__libc_init_array+0x48>)
  4040ce:	4d0b      	ldr	r5, [pc, #44]	; (4040fc <__libc_init_array+0x4c>)
  4040d0:	1b76      	subs	r6, r6, r5
  4040d2:	f006 fc79 	bl	40a9c8 <_init>
  4040d6:	10b6      	asrs	r6, r6, #2
  4040d8:	bf18      	it	ne
  4040da:	2400      	movne	r4, #0
  4040dc:	d006      	beq.n	4040ec <__libc_init_array+0x3c>
  4040de:	3401      	adds	r4, #1
  4040e0:	f855 3b04 	ldr.w	r3, [r5], #4
  4040e4:	4798      	blx	r3
  4040e6:	42a6      	cmp	r6, r4
  4040e8:	d1f9      	bne.n	4040de <__libc_init_array+0x2e>
  4040ea:	bd70      	pop	{r4, r5, r6, pc}
  4040ec:	bd70      	pop	{r4, r5, r6, pc}
  4040ee:	bf00      	nop
  4040f0:	0040a9d4 	.word	0x0040a9d4
  4040f4:	0040a9d4 	.word	0x0040a9d4
  4040f8:	0040a9dc 	.word	0x0040a9dc
  4040fc:	0040a9d4 	.word	0x0040a9d4

00404100 <iprintf>:
  404100:	b40f      	push	{r0, r1, r2, r3}
  404102:	b500      	push	{lr}
  404104:	4907      	ldr	r1, [pc, #28]	; (404124 <iprintf+0x24>)
  404106:	b083      	sub	sp, #12
  404108:	ab04      	add	r3, sp, #16
  40410a:	6808      	ldr	r0, [r1, #0]
  40410c:	f853 2b04 	ldr.w	r2, [r3], #4
  404110:	6881      	ldr	r1, [r0, #8]
  404112:	9301      	str	r3, [sp, #4]
  404114:	f002 f830 	bl	406178 <_vfiprintf_r>
  404118:	b003      	add	sp, #12
  40411a:	f85d eb04 	ldr.w	lr, [sp], #4
  40411e:	b004      	add	sp, #16
  404120:	4770      	bx	lr
  404122:	bf00      	nop
  404124:	2040001c 	.word	0x2040001c

00404128 <malloc>:
  404128:	4b02      	ldr	r3, [pc, #8]	; (404134 <malloc+0xc>)
  40412a:	4601      	mov	r1, r0
  40412c:	6818      	ldr	r0, [r3, #0]
  40412e:	f000 b803 	b.w	404138 <_malloc_r>
  404132:	bf00      	nop
  404134:	2040001c 	.word	0x2040001c

00404138 <_malloc_r>:
  404138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40413c:	f101 060b 	add.w	r6, r1, #11
  404140:	2e16      	cmp	r6, #22
  404142:	b083      	sub	sp, #12
  404144:	4605      	mov	r5, r0
  404146:	f240 809e 	bls.w	404286 <_malloc_r+0x14e>
  40414a:	f036 0607 	bics.w	r6, r6, #7
  40414e:	f100 80bd 	bmi.w	4042cc <_malloc_r+0x194>
  404152:	42b1      	cmp	r1, r6
  404154:	f200 80ba 	bhi.w	4042cc <_malloc_r+0x194>
  404158:	f000 fb86 	bl	404868 <__malloc_lock>
  40415c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  404160:	f0c0 8293 	bcc.w	40468a <_malloc_r+0x552>
  404164:	0a73      	lsrs	r3, r6, #9
  404166:	f000 80b8 	beq.w	4042da <_malloc_r+0x1a2>
  40416a:	2b04      	cmp	r3, #4
  40416c:	f200 8179 	bhi.w	404462 <_malloc_r+0x32a>
  404170:	09b3      	lsrs	r3, r6, #6
  404172:	f103 0039 	add.w	r0, r3, #57	; 0x39
  404176:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40417a:	00c3      	lsls	r3, r0, #3
  40417c:	4fbf      	ldr	r7, [pc, #764]	; (40447c <_malloc_r+0x344>)
  40417e:	443b      	add	r3, r7
  404180:	f1a3 0108 	sub.w	r1, r3, #8
  404184:	685c      	ldr	r4, [r3, #4]
  404186:	42a1      	cmp	r1, r4
  404188:	d106      	bne.n	404198 <_malloc_r+0x60>
  40418a:	e00c      	b.n	4041a6 <_malloc_r+0x6e>
  40418c:	2a00      	cmp	r2, #0
  40418e:	f280 80aa 	bge.w	4042e6 <_malloc_r+0x1ae>
  404192:	68e4      	ldr	r4, [r4, #12]
  404194:	42a1      	cmp	r1, r4
  404196:	d006      	beq.n	4041a6 <_malloc_r+0x6e>
  404198:	6863      	ldr	r3, [r4, #4]
  40419a:	f023 0303 	bic.w	r3, r3, #3
  40419e:	1b9a      	subs	r2, r3, r6
  4041a0:	2a0f      	cmp	r2, #15
  4041a2:	ddf3      	ble.n	40418c <_malloc_r+0x54>
  4041a4:	4670      	mov	r0, lr
  4041a6:	693c      	ldr	r4, [r7, #16]
  4041a8:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 404490 <_malloc_r+0x358>
  4041ac:	4574      	cmp	r4, lr
  4041ae:	f000 81ab 	beq.w	404508 <_malloc_r+0x3d0>
  4041b2:	6863      	ldr	r3, [r4, #4]
  4041b4:	f023 0303 	bic.w	r3, r3, #3
  4041b8:	1b9a      	subs	r2, r3, r6
  4041ba:	2a0f      	cmp	r2, #15
  4041bc:	f300 8190 	bgt.w	4044e0 <_malloc_r+0x3a8>
  4041c0:	2a00      	cmp	r2, #0
  4041c2:	f8c7 e014 	str.w	lr, [r7, #20]
  4041c6:	f8c7 e010 	str.w	lr, [r7, #16]
  4041ca:	f280 809d 	bge.w	404308 <_malloc_r+0x1d0>
  4041ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4041d2:	f080 8161 	bcs.w	404498 <_malloc_r+0x360>
  4041d6:	08db      	lsrs	r3, r3, #3
  4041d8:	f103 0c01 	add.w	ip, r3, #1
  4041dc:	1099      	asrs	r1, r3, #2
  4041de:	687a      	ldr	r2, [r7, #4]
  4041e0:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4041e4:	f8c4 8008 	str.w	r8, [r4, #8]
  4041e8:	2301      	movs	r3, #1
  4041ea:	408b      	lsls	r3, r1
  4041ec:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4041f0:	4313      	orrs	r3, r2
  4041f2:	3908      	subs	r1, #8
  4041f4:	60e1      	str	r1, [r4, #12]
  4041f6:	607b      	str	r3, [r7, #4]
  4041f8:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4041fc:	f8c8 400c 	str.w	r4, [r8, #12]
  404200:	1082      	asrs	r2, r0, #2
  404202:	2401      	movs	r4, #1
  404204:	4094      	lsls	r4, r2
  404206:	429c      	cmp	r4, r3
  404208:	f200 808b 	bhi.w	404322 <_malloc_r+0x1ea>
  40420c:	421c      	tst	r4, r3
  40420e:	d106      	bne.n	40421e <_malloc_r+0xe6>
  404210:	f020 0003 	bic.w	r0, r0, #3
  404214:	0064      	lsls	r4, r4, #1
  404216:	421c      	tst	r4, r3
  404218:	f100 0004 	add.w	r0, r0, #4
  40421c:	d0fa      	beq.n	404214 <_malloc_r+0xdc>
  40421e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  404222:	46cc      	mov	ip, r9
  404224:	4680      	mov	r8, r0
  404226:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40422a:	459c      	cmp	ip, r3
  40422c:	d107      	bne.n	40423e <_malloc_r+0x106>
  40422e:	e16d      	b.n	40450c <_malloc_r+0x3d4>
  404230:	2a00      	cmp	r2, #0
  404232:	f280 817b 	bge.w	40452c <_malloc_r+0x3f4>
  404236:	68db      	ldr	r3, [r3, #12]
  404238:	459c      	cmp	ip, r3
  40423a:	f000 8167 	beq.w	40450c <_malloc_r+0x3d4>
  40423e:	6859      	ldr	r1, [r3, #4]
  404240:	f021 0103 	bic.w	r1, r1, #3
  404244:	1b8a      	subs	r2, r1, r6
  404246:	2a0f      	cmp	r2, #15
  404248:	ddf2      	ble.n	404230 <_malloc_r+0xf8>
  40424a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40424e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  404252:	9300      	str	r3, [sp, #0]
  404254:	199c      	adds	r4, r3, r6
  404256:	4628      	mov	r0, r5
  404258:	f046 0601 	orr.w	r6, r6, #1
  40425c:	f042 0501 	orr.w	r5, r2, #1
  404260:	605e      	str	r6, [r3, #4]
  404262:	f8c8 c00c 	str.w	ip, [r8, #12]
  404266:	f8cc 8008 	str.w	r8, [ip, #8]
  40426a:	617c      	str	r4, [r7, #20]
  40426c:	613c      	str	r4, [r7, #16]
  40426e:	f8c4 e00c 	str.w	lr, [r4, #12]
  404272:	f8c4 e008 	str.w	lr, [r4, #8]
  404276:	6065      	str	r5, [r4, #4]
  404278:	505a      	str	r2, [r3, r1]
  40427a:	f000 fafb 	bl	404874 <__malloc_unlock>
  40427e:	9b00      	ldr	r3, [sp, #0]
  404280:	f103 0408 	add.w	r4, r3, #8
  404284:	e01e      	b.n	4042c4 <_malloc_r+0x18c>
  404286:	2910      	cmp	r1, #16
  404288:	d820      	bhi.n	4042cc <_malloc_r+0x194>
  40428a:	f000 faed 	bl	404868 <__malloc_lock>
  40428e:	2610      	movs	r6, #16
  404290:	2318      	movs	r3, #24
  404292:	2002      	movs	r0, #2
  404294:	4f79      	ldr	r7, [pc, #484]	; (40447c <_malloc_r+0x344>)
  404296:	443b      	add	r3, r7
  404298:	f1a3 0208 	sub.w	r2, r3, #8
  40429c:	685c      	ldr	r4, [r3, #4]
  40429e:	4294      	cmp	r4, r2
  4042a0:	f000 813d 	beq.w	40451e <_malloc_r+0x3e6>
  4042a4:	6863      	ldr	r3, [r4, #4]
  4042a6:	68e1      	ldr	r1, [r4, #12]
  4042a8:	68a6      	ldr	r6, [r4, #8]
  4042aa:	f023 0303 	bic.w	r3, r3, #3
  4042ae:	4423      	add	r3, r4
  4042b0:	4628      	mov	r0, r5
  4042b2:	685a      	ldr	r2, [r3, #4]
  4042b4:	60f1      	str	r1, [r6, #12]
  4042b6:	f042 0201 	orr.w	r2, r2, #1
  4042ba:	608e      	str	r6, [r1, #8]
  4042bc:	605a      	str	r2, [r3, #4]
  4042be:	f000 fad9 	bl	404874 <__malloc_unlock>
  4042c2:	3408      	adds	r4, #8
  4042c4:	4620      	mov	r0, r4
  4042c6:	b003      	add	sp, #12
  4042c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4042cc:	2400      	movs	r4, #0
  4042ce:	230c      	movs	r3, #12
  4042d0:	4620      	mov	r0, r4
  4042d2:	602b      	str	r3, [r5, #0]
  4042d4:	b003      	add	sp, #12
  4042d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4042da:	2040      	movs	r0, #64	; 0x40
  4042dc:	f44f 7300 	mov.w	r3, #512	; 0x200
  4042e0:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4042e4:	e74a      	b.n	40417c <_malloc_r+0x44>
  4042e6:	4423      	add	r3, r4
  4042e8:	68e1      	ldr	r1, [r4, #12]
  4042ea:	685a      	ldr	r2, [r3, #4]
  4042ec:	68a6      	ldr	r6, [r4, #8]
  4042ee:	f042 0201 	orr.w	r2, r2, #1
  4042f2:	60f1      	str	r1, [r6, #12]
  4042f4:	4628      	mov	r0, r5
  4042f6:	608e      	str	r6, [r1, #8]
  4042f8:	605a      	str	r2, [r3, #4]
  4042fa:	f000 fabb 	bl	404874 <__malloc_unlock>
  4042fe:	3408      	adds	r4, #8
  404300:	4620      	mov	r0, r4
  404302:	b003      	add	sp, #12
  404304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404308:	4423      	add	r3, r4
  40430a:	4628      	mov	r0, r5
  40430c:	685a      	ldr	r2, [r3, #4]
  40430e:	f042 0201 	orr.w	r2, r2, #1
  404312:	605a      	str	r2, [r3, #4]
  404314:	f000 faae 	bl	404874 <__malloc_unlock>
  404318:	3408      	adds	r4, #8
  40431a:	4620      	mov	r0, r4
  40431c:	b003      	add	sp, #12
  40431e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404322:	68bc      	ldr	r4, [r7, #8]
  404324:	6863      	ldr	r3, [r4, #4]
  404326:	f023 0803 	bic.w	r8, r3, #3
  40432a:	45b0      	cmp	r8, r6
  40432c:	d304      	bcc.n	404338 <_malloc_r+0x200>
  40432e:	eba8 0306 	sub.w	r3, r8, r6
  404332:	2b0f      	cmp	r3, #15
  404334:	f300 8085 	bgt.w	404442 <_malloc_r+0x30a>
  404338:	f8df 9158 	ldr.w	r9, [pc, #344]	; 404494 <_malloc_r+0x35c>
  40433c:	4b50      	ldr	r3, [pc, #320]	; (404480 <_malloc_r+0x348>)
  40433e:	f8d9 2000 	ldr.w	r2, [r9]
  404342:	681b      	ldr	r3, [r3, #0]
  404344:	3201      	adds	r2, #1
  404346:	4433      	add	r3, r6
  404348:	eb04 0a08 	add.w	sl, r4, r8
  40434c:	f000 8155 	beq.w	4045fa <_malloc_r+0x4c2>
  404350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  404354:	330f      	adds	r3, #15
  404356:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40435a:	f02b 0b0f 	bic.w	fp, fp, #15
  40435e:	4659      	mov	r1, fp
  404360:	4628      	mov	r0, r5
  404362:	f000 fa8d 	bl	404880 <_sbrk_r>
  404366:	1c41      	adds	r1, r0, #1
  404368:	4602      	mov	r2, r0
  40436a:	f000 80fc 	beq.w	404566 <_malloc_r+0x42e>
  40436e:	4582      	cmp	sl, r0
  404370:	f200 80f7 	bhi.w	404562 <_malloc_r+0x42a>
  404374:	4b43      	ldr	r3, [pc, #268]	; (404484 <_malloc_r+0x34c>)
  404376:	6819      	ldr	r1, [r3, #0]
  404378:	4459      	add	r1, fp
  40437a:	6019      	str	r1, [r3, #0]
  40437c:	f000 814d 	beq.w	40461a <_malloc_r+0x4e2>
  404380:	f8d9 0000 	ldr.w	r0, [r9]
  404384:	3001      	adds	r0, #1
  404386:	bf1b      	ittet	ne
  404388:	eba2 0a0a 	subne.w	sl, r2, sl
  40438c:	4451      	addne	r1, sl
  40438e:	f8c9 2000 	streq.w	r2, [r9]
  404392:	6019      	strne	r1, [r3, #0]
  404394:	f012 0107 	ands.w	r1, r2, #7
  404398:	f000 8115 	beq.w	4045c6 <_malloc_r+0x48e>
  40439c:	f1c1 0008 	rsb	r0, r1, #8
  4043a0:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4043a4:	4402      	add	r2, r0
  4043a6:	3108      	adds	r1, #8
  4043a8:	eb02 090b 	add.w	r9, r2, fp
  4043ac:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4043b0:	eba1 0909 	sub.w	r9, r1, r9
  4043b4:	4649      	mov	r1, r9
  4043b6:	4628      	mov	r0, r5
  4043b8:	9301      	str	r3, [sp, #4]
  4043ba:	9200      	str	r2, [sp, #0]
  4043bc:	f000 fa60 	bl	404880 <_sbrk_r>
  4043c0:	1c43      	adds	r3, r0, #1
  4043c2:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4043c6:	f000 8143 	beq.w	404650 <_malloc_r+0x518>
  4043ca:	1a80      	subs	r0, r0, r2
  4043cc:	4448      	add	r0, r9
  4043ce:	f040 0001 	orr.w	r0, r0, #1
  4043d2:	6819      	ldr	r1, [r3, #0]
  4043d4:	60ba      	str	r2, [r7, #8]
  4043d6:	4449      	add	r1, r9
  4043d8:	42bc      	cmp	r4, r7
  4043da:	6050      	str	r0, [r2, #4]
  4043dc:	6019      	str	r1, [r3, #0]
  4043de:	d017      	beq.n	404410 <_malloc_r+0x2d8>
  4043e0:	f1b8 0f0f 	cmp.w	r8, #15
  4043e4:	f240 80fb 	bls.w	4045de <_malloc_r+0x4a6>
  4043e8:	6860      	ldr	r0, [r4, #4]
  4043ea:	f1a8 020c 	sub.w	r2, r8, #12
  4043ee:	f022 0207 	bic.w	r2, r2, #7
  4043f2:	eb04 0e02 	add.w	lr, r4, r2
  4043f6:	f000 0001 	and.w	r0, r0, #1
  4043fa:	f04f 0c05 	mov.w	ip, #5
  4043fe:	4310      	orrs	r0, r2
  404400:	2a0f      	cmp	r2, #15
  404402:	6060      	str	r0, [r4, #4]
  404404:	f8ce c004 	str.w	ip, [lr, #4]
  404408:	f8ce c008 	str.w	ip, [lr, #8]
  40440c:	f200 8117 	bhi.w	40463e <_malloc_r+0x506>
  404410:	4b1d      	ldr	r3, [pc, #116]	; (404488 <_malloc_r+0x350>)
  404412:	68bc      	ldr	r4, [r7, #8]
  404414:	681a      	ldr	r2, [r3, #0]
  404416:	4291      	cmp	r1, r2
  404418:	bf88      	it	hi
  40441a:	6019      	strhi	r1, [r3, #0]
  40441c:	4b1b      	ldr	r3, [pc, #108]	; (40448c <_malloc_r+0x354>)
  40441e:	681a      	ldr	r2, [r3, #0]
  404420:	4291      	cmp	r1, r2
  404422:	6862      	ldr	r2, [r4, #4]
  404424:	bf88      	it	hi
  404426:	6019      	strhi	r1, [r3, #0]
  404428:	f022 0203 	bic.w	r2, r2, #3
  40442c:	4296      	cmp	r6, r2
  40442e:	eba2 0306 	sub.w	r3, r2, r6
  404432:	d801      	bhi.n	404438 <_malloc_r+0x300>
  404434:	2b0f      	cmp	r3, #15
  404436:	dc04      	bgt.n	404442 <_malloc_r+0x30a>
  404438:	4628      	mov	r0, r5
  40443a:	f000 fa1b 	bl	404874 <__malloc_unlock>
  40443e:	2400      	movs	r4, #0
  404440:	e740      	b.n	4042c4 <_malloc_r+0x18c>
  404442:	19a2      	adds	r2, r4, r6
  404444:	f043 0301 	orr.w	r3, r3, #1
  404448:	f046 0601 	orr.w	r6, r6, #1
  40444c:	6066      	str	r6, [r4, #4]
  40444e:	4628      	mov	r0, r5
  404450:	60ba      	str	r2, [r7, #8]
  404452:	6053      	str	r3, [r2, #4]
  404454:	f000 fa0e 	bl	404874 <__malloc_unlock>
  404458:	3408      	adds	r4, #8
  40445a:	4620      	mov	r0, r4
  40445c:	b003      	add	sp, #12
  40445e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404462:	2b14      	cmp	r3, #20
  404464:	d971      	bls.n	40454a <_malloc_r+0x412>
  404466:	2b54      	cmp	r3, #84	; 0x54
  404468:	f200 80a3 	bhi.w	4045b2 <_malloc_r+0x47a>
  40446c:	0b33      	lsrs	r3, r6, #12
  40446e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  404472:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  404476:	00c3      	lsls	r3, r0, #3
  404478:	e680      	b.n	40417c <_malloc_r+0x44>
  40447a:	bf00      	nop
  40447c:	20400448 	.word	0x20400448
  404480:	2040c794 	.word	0x2040c794
  404484:	2040c764 	.word	0x2040c764
  404488:	2040c78c 	.word	0x2040c78c
  40448c:	2040c790 	.word	0x2040c790
  404490:	20400450 	.word	0x20400450
  404494:	20400850 	.word	0x20400850
  404498:	0a5a      	lsrs	r2, r3, #9
  40449a:	2a04      	cmp	r2, #4
  40449c:	d95b      	bls.n	404556 <_malloc_r+0x41e>
  40449e:	2a14      	cmp	r2, #20
  4044a0:	f200 80ae 	bhi.w	404600 <_malloc_r+0x4c8>
  4044a4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4044a8:	00c9      	lsls	r1, r1, #3
  4044aa:	325b      	adds	r2, #91	; 0x5b
  4044ac:	eb07 0c01 	add.w	ip, r7, r1
  4044b0:	5879      	ldr	r1, [r7, r1]
  4044b2:	f1ac 0c08 	sub.w	ip, ip, #8
  4044b6:	458c      	cmp	ip, r1
  4044b8:	f000 8088 	beq.w	4045cc <_malloc_r+0x494>
  4044bc:	684a      	ldr	r2, [r1, #4]
  4044be:	f022 0203 	bic.w	r2, r2, #3
  4044c2:	4293      	cmp	r3, r2
  4044c4:	d273      	bcs.n	4045ae <_malloc_r+0x476>
  4044c6:	6889      	ldr	r1, [r1, #8]
  4044c8:	458c      	cmp	ip, r1
  4044ca:	d1f7      	bne.n	4044bc <_malloc_r+0x384>
  4044cc:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4044d0:	687b      	ldr	r3, [r7, #4]
  4044d2:	60e2      	str	r2, [r4, #12]
  4044d4:	f8c4 c008 	str.w	ip, [r4, #8]
  4044d8:	6094      	str	r4, [r2, #8]
  4044da:	f8cc 400c 	str.w	r4, [ip, #12]
  4044de:	e68f      	b.n	404200 <_malloc_r+0xc8>
  4044e0:	19a1      	adds	r1, r4, r6
  4044e2:	f046 0c01 	orr.w	ip, r6, #1
  4044e6:	f042 0601 	orr.w	r6, r2, #1
  4044ea:	f8c4 c004 	str.w	ip, [r4, #4]
  4044ee:	4628      	mov	r0, r5
  4044f0:	6179      	str	r1, [r7, #20]
  4044f2:	6139      	str	r1, [r7, #16]
  4044f4:	f8c1 e00c 	str.w	lr, [r1, #12]
  4044f8:	f8c1 e008 	str.w	lr, [r1, #8]
  4044fc:	604e      	str	r6, [r1, #4]
  4044fe:	50e2      	str	r2, [r4, r3]
  404500:	f000 f9b8 	bl	404874 <__malloc_unlock>
  404504:	3408      	adds	r4, #8
  404506:	e6dd      	b.n	4042c4 <_malloc_r+0x18c>
  404508:	687b      	ldr	r3, [r7, #4]
  40450a:	e679      	b.n	404200 <_malloc_r+0xc8>
  40450c:	f108 0801 	add.w	r8, r8, #1
  404510:	f018 0f03 	tst.w	r8, #3
  404514:	f10c 0c08 	add.w	ip, ip, #8
  404518:	f47f ae85 	bne.w	404226 <_malloc_r+0xee>
  40451c:	e02d      	b.n	40457a <_malloc_r+0x442>
  40451e:	68dc      	ldr	r4, [r3, #12]
  404520:	42a3      	cmp	r3, r4
  404522:	bf08      	it	eq
  404524:	3002      	addeq	r0, #2
  404526:	f43f ae3e 	beq.w	4041a6 <_malloc_r+0x6e>
  40452a:	e6bb      	b.n	4042a4 <_malloc_r+0x16c>
  40452c:	4419      	add	r1, r3
  40452e:	461c      	mov	r4, r3
  404530:	684a      	ldr	r2, [r1, #4]
  404532:	68db      	ldr	r3, [r3, #12]
  404534:	f854 6f08 	ldr.w	r6, [r4, #8]!
  404538:	f042 0201 	orr.w	r2, r2, #1
  40453c:	604a      	str	r2, [r1, #4]
  40453e:	4628      	mov	r0, r5
  404540:	60f3      	str	r3, [r6, #12]
  404542:	609e      	str	r6, [r3, #8]
  404544:	f000 f996 	bl	404874 <__malloc_unlock>
  404548:	e6bc      	b.n	4042c4 <_malloc_r+0x18c>
  40454a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40454e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  404552:	00c3      	lsls	r3, r0, #3
  404554:	e612      	b.n	40417c <_malloc_r+0x44>
  404556:	099a      	lsrs	r2, r3, #6
  404558:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40455c:	00c9      	lsls	r1, r1, #3
  40455e:	3238      	adds	r2, #56	; 0x38
  404560:	e7a4      	b.n	4044ac <_malloc_r+0x374>
  404562:	42bc      	cmp	r4, r7
  404564:	d054      	beq.n	404610 <_malloc_r+0x4d8>
  404566:	68bc      	ldr	r4, [r7, #8]
  404568:	6862      	ldr	r2, [r4, #4]
  40456a:	f022 0203 	bic.w	r2, r2, #3
  40456e:	e75d      	b.n	40442c <_malloc_r+0x2f4>
  404570:	f859 3908 	ldr.w	r3, [r9], #-8
  404574:	4599      	cmp	r9, r3
  404576:	f040 8086 	bne.w	404686 <_malloc_r+0x54e>
  40457a:	f010 0f03 	tst.w	r0, #3
  40457e:	f100 30ff 	add.w	r0, r0, #4294967295
  404582:	d1f5      	bne.n	404570 <_malloc_r+0x438>
  404584:	687b      	ldr	r3, [r7, #4]
  404586:	ea23 0304 	bic.w	r3, r3, r4
  40458a:	607b      	str	r3, [r7, #4]
  40458c:	0064      	lsls	r4, r4, #1
  40458e:	429c      	cmp	r4, r3
  404590:	f63f aec7 	bhi.w	404322 <_malloc_r+0x1ea>
  404594:	2c00      	cmp	r4, #0
  404596:	f43f aec4 	beq.w	404322 <_malloc_r+0x1ea>
  40459a:	421c      	tst	r4, r3
  40459c:	4640      	mov	r0, r8
  40459e:	f47f ae3e 	bne.w	40421e <_malloc_r+0xe6>
  4045a2:	0064      	lsls	r4, r4, #1
  4045a4:	421c      	tst	r4, r3
  4045a6:	f100 0004 	add.w	r0, r0, #4
  4045aa:	d0fa      	beq.n	4045a2 <_malloc_r+0x46a>
  4045ac:	e637      	b.n	40421e <_malloc_r+0xe6>
  4045ae:	468c      	mov	ip, r1
  4045b0:	e78c      	b.n	4044cc <_malloc_r+0x394>
  4045b2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4045b6:	d815      	bhi.n	4045e4 <_malloc_r+0x4ac>
  4045b8:	0bf3      	lsrs	r3, r6, #15
  4045ba:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4045be:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4045c2:	00c3      	lsls	r3, r0, #3
  4045c4:	e5da      	b.n	40417c <_malloc_r+0x44>
  4045c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4045ca:	e6ed      	b.n	4043a8 <_malloc_r+0x270>
  4045cc:	687b      	ldr	r3, [r7, #4]
  4045ce:	1092      	asrs	r2, r2, #2
  4045d0:	2101      	movs	r1, #1
  4045d2:	fa01 f202 	lsl.w	r2, r1, r2
  4045d6:	4313      	orrs	r3, r2
  4045d8:	607b      	str	r3, [r7, #4]
  4045da:	4662      	mov	r2, ip
  4045dc:	e779      	b.n	4044d2 <_malloc_r+0x39a>
  4045de:	2301      	movs	r3, #1
  4045e0:	6053      	str	r3, [r2, #4]
  4045e2:	e729      	b.n	404438 <_malloc_r+0x300>
  4045e4:	f240 5254 	movw	r2, #1364	; 0x554
  4045e8:	4293      	cmp	r3, r2
  4045ea:	d822      	bhi.n	404632 <_malloc_r+0x4fa>
  4045ec:	0cb3      	lsrs	r3, r6, #18
  4045ee:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4045f2:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4045f6:	00c3      	lsls	r3, r0, #3
  4045f8:	e5c0      	b.n	40417c <_malloc_r+0x44>
  4045fa:	f103 0b10 	add.w	fp, r3, #16
  4045fe:	e6ae      	b.n	40435e <_malloc_r+0x226>
  404600:	2a54      	cmp	r2, #84	; 0x54
  404602:	d829      	bhi.n	404658 <_malloc_r+0x520>
  404604:	0b1a      	lsrs	r2, r3, #12
  404606:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40460a:	00c9      	lsls	r1, r1, #3
  40460c:	326e      	adds	r2, #110	; 0x6e
  40460e:	e74d      	b.n	4044ac <_malloc_r+0x374>
  404610:	4b20      	ldr	r3, [pc, #128]	; (404694 <_malloc_r+0x55c>)
  404612:	6819      	ldr	r1, [r3, #0]
  404614:	4459      	add	r1, fp
  404616:	6019      	str	r1, [r3, #0]
  404618:	e6b2      	b.n	404380 <_malloc_r+0x248>
  40461a:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40461e:	2800      	cmp	r0, #0
  404620:	f47f aeae 	bne.w	404380 <_malloc_r+0x248>
  404624:	eb08 030b 	add.w	r3, r8, fp
  404628:	68ba      	ldr	r2, [r7, #8]
  40462a:	f043 0301 	orr.w	r3, r3, #1
  40462e:	6053      	str	r3, [r2, #4]
  404630:	e6ee      	b.n	404410 <_malloc_r+0x2d8>
  404632:	207f      	movs	r0, #127	; 0x7f
  404634:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  404638:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40463c:	e59e      	b.n	40417c <_malloc_r+0x44>
  40463e:	f104 0108 	add.w	r1, r4, #8
  404642:	4628      	mov	r0, r5
  404644:	9300      	str	r3, [sp, #0]
  404646:	f003 fe73 	bl	408330 <_free_r>
  40464a:	9b00      	ldr	r3, [sp, #0]
  40464c:	6819      	ldr	r1, [r3, #0]
  40464e:	e6df      	b.n	404410 <_malloc_r+0x2d8>
  404650:	2001      	movs	r0, #1
  404652:	f04f 0900 	mov.w	r9, #0
  404656:	e6bc      	b.n	4043d2 <_malloc_r+0x29a>
  404658:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40465c:	d805      	bhi.n	40466a <_malloc_r+0x532>
  40465e:	0bda      	lsrs	r2, r3, #15
  404660:	f102 0178 	add.w	r1, r2, #120	; 0x78
  404664:	00c9      	lsls	r1, r1, #3
  404666:	3277      	adds	r2, #119	; 0x77
  404668:	e720      	b.n	4044ac <_malloc_r+0x374>
  40466a:	f240 5154 	movw	r1, #1364	; 0x554
  40466e:	428a      	cmp	r2, r1
  404670:	d805      	bhi.n	40467e <_malloc_r+0x546>
  404672:	0c9a      	lsrs	r2, r3, #18
  404674:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  404678:	00c9      	lsls	r1, r1, #3
  40467a:	327c      	adds	r2, #124	; 0x7c
  40467c:	e716      	b.n	4044ac <_malloc_r+0x374>
  40467e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  404682:	227e      	movs	r2, #126	; 0x7e
  404684:	e712      	b.n	4044ac <_malloc_r+0x374>
  404686:	687b      	ldr	r3, [r7, #4]
  404688:	e780      	b.n	40458c <_malloc_r+0x454>
  40468a:	08f0      	lsrs	r0, r6, #3
  40468c:	f106 0308 	add.w	r3, r6, #8
  404690:	e600      	b.n	404294 <_malloc_r+0x15c>
  404692:	bf00      	nop
  404694:	2040c764 	.word	0x2040c764

00404698 <memcpy>:
  404698:	4684      	mov	ip, r0
  40469a:	ea41 0300 	orr.w	r3, r1, r0
  40469e:	f013 0303 	ands.w	r3, r3, #3
  4046a2:	d16d      	bne.n	404780 <memcpy+0xe8>
  4046a4:	3a40      	subs	r2, #64	; 0x40
  4046a6:	d341      	bcc.n	40472c <memcpy+0x94>
  4046a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4046ac:	f840 3b04 	str.w	r3, [r0], #4
  4046b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4046b4:	f840 3b04 	str.w	r3, [r0], #4
  4046b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4046bc:	f840 3b04 	str.w	r3, [r0], #4
  4046c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4046c4:	f840 3b04 	str.w	r3, [r0], #4
  4046c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4046cc:	f840 3b04 	str.w	r3, [r0], #4
  4046d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4046d4:	f840 3b04 	str.w	r3, [r0], #4
  4046d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4046dc:	f840 3b04 	str.w	r3, [r0], #4
  4046e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4046e4:	f840 3b04 	str.w	r3, [r0], #4
  4046e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4046ec:	f840 3b04 	str.w	r3, [r0], #4
  4046f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4046f4:	f840 3b04 	str.w	r3, [r0], #4
  4046f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4046fc:	f840 3b04 	str.w	r3, [r0], #4
  404700:	f851 3b04 	ldr.w	r3, [r1], #4
  404704:	f840 3b04 	str.w	r3, [r0], #4
  404708:	f851 3b04 	ldr.w	r3, [r1], #4
  40470c:	f840 3b04 	str.w	r3, [r0], #4
  404710:	f851 3b04 	ldr.w	r3, [r1], #4
  404714:	f840 3b04 	str.w	r3, [r0], #4
  404718:	f851 3b04 	ldr.w	r3, [r1], #4
  40471c:	f840 3b04 	str.w	r3, [r0], #4
  404720:	f851 3b04 	ldr.w	r3, [r1], #4
  404724:	f840 3b04 	str.w	r3, [r0], #4
  404728:	3a40      	subs	r2, #64	; 0x40
  40472a:	d2bd      	bcs.n	4046a8 <memcpy+0x10>
  40472c:	3230      	adds	r2, #48	; 0x30
  40472e:	d311      	bcc.n	404754 <memcpy+0xbc>
  404730:	f851 3b04 	ldr.w	r3, [r1], #4
  404734:	f840 3b04 	str.w	r3, [r0], #4
  404738:	f851 3b04 	ldr.w	r3, [r1], #4
  40473c:	f840 3b04 	str.w	r3, [r0], #4
  404740:	f851 3b04 	ldr.w	r3, [r1], #4
  404744:	f840 3b04 	str.w	r3, [r0], #4
  404748:	f851 3b04 	ldr.w	r3, [r1], #4
  40474c:	f840 3b04 	str.w	r3, [r0], #4
  404750:	3a10      	subs	r2, #16
  404752:	d2ed      	bcs.n	404730 <memcpy+0x98>
  404754:	320c      	adds	r2, #12
  404756:	d305      	bcc.n	404764 <memcpy+0xcc>
  404758:	f851 3b04 	ldr.w	r3, [r1], #4
  40475c:	f840 3b04 	str.w	r3, [r0], #4
  404760:	3a04      	subs	r2, #4
  404762:	d2f9      	bcs.n	404758 <memcpy+0xc0>
  404764:	3204      	adds	r2, #4
  404766:	d008      	beq.n	40477a <memcpy+0xe2>
  404768:	07d2      	lsls	r2, r2, #31
  40476a:	bf1c      	itt	ne
  40476c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404770:	f800 3b01 	strbne.w	r3, [r0], #1
  404774:	d301      	bcc.n	40477a <memcpy+0xe2>
  404776:	880b      	ldrh	r3, [r1, #0]
  404778:	8003      	strh	r3, [r0, #0]
  40477a:	4660      	mov	r0, ip
  40477c:	4770      	bx	lr
  40477e:	bf00      	nop
  404780:	2a08      	cmp	r2, #8
  404782:	d313      	bcc.n	4047ac <memcpy+0x114>
  404784:	078b      	lsls	r3, r1, #30
  404786:	d08d      	beq.n	4046a4 <memcpy+0xc>
  404788:	f010 0303 	ands.w	r3, r0, #3
  40478c:	d08a      	beq.n	4046a4 <memcpy+0xc>
  40478e:	f1c3 0304 	rsb	r3, r3, #4
  404792:	1ad2      	subs	r2, r2, r3
  404794:	07db      	lsls	r3, r3, #31
  404796:	bf1c      	itt	ne
  404798:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40479c:	f800 3b01 	strbne.w	r3, [r0], #1
  4047a0:	d380      	bcc.n	4046a4 <memcpy+0xc>
  4047a2:	f831 3b02 	ldrh.w	r3, [r1], #2
  4047a6:	f820 3b02 	strh.w	r3, [r0], #2
  4047aa:	e77b      	b.n	4046a4 <memcpy+0xc>
  4047ac:	3a04      	subs	r2, #4
  4047ae:	d3d9      	bcc.n	404764 <memcpy+0xcc>
  4047b0:	3a01      	subs	r2, #1
  4047b2:	f811 3b01 	ldrb.w	r3, [r1], #1
  4047b6:	f800 3b01 	strb.w	r3, [r0], #1
  4047ba:	d2f9      	bcs.n	4047b0 <memcpy+0x118>
  4047bc:	780b      	ldrb	r3, [r1, #0]
  4047be:	7003      	strb	r3, [r0, #0]
  4047c0:	784b      	ldrb	r3, [r1, #1]
  4047c2:	7043      	strb	r3, [r0, #1]
  4047c4:	788b      	ldrb	r3, [r1, #2]
  4047c6:	7083      	strb	r3, [r0, #2]
  4047c8:	4660      	mov	r0, ip
  4047ca:	4770      	bx	lr

004047cc <memset>:
  4047cc:	b470      	push	{r4, r5, r6}
  4047ce:	0786      	lsls	r6, r0, #30
  4047d0:	d046      	beq.n	404860 <memset+0x94>
  4047d2:	1e54      	subs	r4, r2, #1
  4047d4:	2a00      	cmp	r2, #0
  4047d6:	d041      	beq.n	40485c <memset+0x90>
  4047d8:	b2ca      	uxtb	r2, r1
  4047da:	4603      	mov	r3, r0
  4047dc:	e002      	b.n	4047e4 <memset+0x18>
  4047de:	f114 34ff 	adds.w	r4, r4, #4294967295
  4047e2:	d33b      	bcc.n	40485c <memset+0x90>
  4047e4:	f803 2b01 	strb.w	r2, [r3], #1
  4047e8:	079d      	lsls	r5, r3, #30
  4047ea:	d1f8      	bne.n	4047de <memset+0x12>
  4047ec:	2c03      	cmp	r4, #3
  4047ee:	d92e      	bls.n	40484e <memset+0x82>
  4047f0:	b2cd      	uxtb	r5, r1
  4047f2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4047f6:	2c0f      	cmp	r4, #15
  4047f8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4047fc:	d919      	bls.n	404832 <memset+0x66>
  4047fe:	f103 0210 	add.w	r2, r3, #16
  404802:	4626      	mov	r6, r4
  404804:	3e10      	subs	r6, #16
  404806:	2e0f      	cmp	r6, #15
  404808:	f842 5c10 	str.w	r5, [r2, #-16]
  40480c:	f842 5c0c 	str.w	r5, [r2, #-12]
  404810:	f842 5c08 	str.w	r5, [r2, #-8]
  404814:	f842 5c04 	str.w	r5, [r2, #-4]
  404818:	f102 0210 	add.w	r2, r2, #16
  40481c:	d8f2      	bhi.n	404804 <memset+0x38>
  40481e:	f1a4 0210 	sub.w	r2, r4, #16
  404822:	f022 020f 	bic.w	r2, r2, #15
  404826:	f004 040f 	and.w	r4, r4, #15
  40482a:	3210      	adds	r2, #16
  40482c:	2c03      	cmp	r4, #3
  40482e:	4413      	add	r3, r2
  404830:	d90d      	bls.n	40484e <memset+0x82>
  404832:	461e      	mov	r6, r3
  404834:	4622      	mov	r2, r4
  404836:	3a04      	subs	r2, #4
  404838:	2a03      	cmp	r2, #3
  40483a:	f846 5b04 	str.w	r5, [r6], #4
  40483e:	d8fa      	bhi.n	404836 <memset+0x6a>
  404840:	1f22      	subs	r2, r4, #4
  404842:	f022 0203 	bic.w	r2, r2, #3
  404846:	3204      	adds	r2, #4
  404848:	4413      	add	r3, r2
  40484a:	f004 0403 	and.w	r4, r4, #3
  40484e:	b12c      	cbz	r4, 40485c <memset+0x90>
  404850:	b2c9      	uxtb	r1, r1
  404852:	441c      	add	r4, r3
  404854:	f803 1b01 	strb.w	r1, [r3], #1
  404858:	429c      	cmp	r4, r3
  40485a:	d1fb      	bne.n	404854 <memset+0x88>
  40485c:	bc70      	pop	{r4, r5, r6}
  40485e:	4770      	bx	lr
  404860:	4614      	mov	r4, r2
  404862:	4603      	mov	r3, r0
  404864:	e7c2      	b.n	4047ec <memset+0x20>
  404866:	bf00      	nop

00404868 <__malloc_lock>:
  404868:	4801      	ldr	r0, [pc, #4]	; (404870 <__malloc_lock+0x8>)
  40486a:	f004 b809 	b.w	408880 <__retarget_lock_acquire_recursive>
  40486e:	bf00      	nop
  404870:	2040c884 	.word	0x2040c884

00404874 <__malloc_unlock>:
  404874:	4801      	ldr	r0, [pc, #4]	; (40487c <__malloc_unlock+0x8>)
  404876:	f004 b805 	b.w	408884 <__retarget_lock_release_recursive>
  40487a:	bf00      	nop
  40487c:	2040c884 	.word	0x2040c884

00404880 <_sbrk_r>:
  404880:	b538      	push	{r3, r4, r5, lr}
  404882:	4c07      	ldr	r4, [pc, #28]	; (4048a0 <_sbrk_r+0x20>)
  404884:	2300      	movs	r3, #0
  404886:	4605      	mov	r5, r0
  404888:	4608      	mov	r0, r1
  40488a:	6023      	str	r3, [r4, #0]
  40488c:	f7ff f8f4 	bl	403a78 <_sbrk>
  404890:	1c43      	adds	r3, r0, #1
  404892:	d000      	beq.n	404896 <_sbrk_r+0x16>
  404894:	bd38      	pop	{r3, r4, r5, pc}
  404896:	6823      	ldr	r3, [r4, #0]
  404898:	2b00      	cmp	r3, #0
  40489a:	d0fb      	beq.n	404894 <_sbrk_r+0x14>
  40489c:	602b      	str	r3, [r5, #0]
  40489e:	bd38      	pop	{r3, r4, r5, pc}
  4048a0:	2040c898 	.word	0x2040c898

004048a4 <setbuf>:
  4048a4:	2900      	cmp	r1, #0
  4048a6:	bf0c      	ite	eq
  4048a8:	2202      	moveq	r2, #2
  4048aa:	2200      	movne	r2, #0
  4048ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4048b0:	f000 b800 	b.w	4048b4 <setvbuf>

004048b4 <setvbuf>:
  4048b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4048b8:	4c61      	ldr	r4, [pc, #388]	; (404a40 <setvbuf+0x18c>)
  4048ba:	6825      	ldr	r5, [r4, #0]
  4048bc:	b083      	sub	sp, #12
  4048be:	4604      	mov	r4, r0
  4048c0:	460f      	mov	r7, r1
  4048c2:	4690      	mov	r8, r2
  4048c4:	461e      	mov	r6, r3
  4048c6:	b115      	cbz	r5, 4048ce <setvbuf+0x1a>
  4048c8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4048ca:	2b00      	cmp	r3, #0
  4048cc:	d064      	beq.n	404998 <setvbuf+0xe4>
  4048ce:	f1b8 0f02 	cmp.w	r8, #2
  4048d2:	d006      	beq.n	4048e2 <setvbuf+0x2e>
  4048d4:	f1b8 0f01 	cmp.w	r8, #1
  4048d8:	f200 809f 	bhi.w	404a1a <setvbuf+0x166>
  4048dc:	2e00      	cmp	r6, #0
  4048de:	f2c0 809c 	blt.w	404a1a <setvbuf+0x166>
  4048e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4048e4:	07d8      	lsls	r0, r3, #31
  4048e6:	d534      	bpl.n	404952 <setvbuf+0x9e>
  4048e8:	4621      	mov	r1, r4
  4048ea:	4628      	mov	r0, r5
  4048ec:	f003 fba2 	bl	408034 <_fflush_r>
  4048f0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4048f2:	b141      	cbz	r1, 404906 <setvbuf+0x52>
  4048f4:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4048f8:	4299      	cmp	r1, r3
  4048fa:	d002      	beq.n	404902 <setvbuf+0x4e>
  4048fc:	4628      	mov	r0, r5
  4048fe:	f003 fd17 	bl	408330 <_free_r>
  404902:	2300      	movs	r3, #0
  404904:	6323      	str	r3, [r4, #48]	; 0x30
  404906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40490a:	2200      	movs	r2, #0
  40490c:	61a2      	str	r2, [r4, #24]
  40490e:	6062      	str	r2, [r4, #4]
  404910:	061a      	lsls	r2, r3, #24
  404912:	d43a      	bmi.n	40498a <setvbuf+0xd6>
  404914:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  404918:	f023 0303 	bic.w	r3, r3, #3
  40491c:	f1b8 0f02 	cmp.w	r8, #2
  404920:	81a3      	strh	r3, [r4, #12]
  404922:	d01d      	beq.n	404960 <setvbuf+0xac>
  404924:	ab01      	add	r3, sp, #4
  404926:	466a      	mov	r2, sp
  404928:	4621      	mov	r1, r4
  40492a:	4628      	mov	r0, r5
  40492c:	f003 ffac 	bl	408888 <__swhatbuf_r>
  404930:	89a3      	ldrh	r3, [r4, #12]
  404932:	4318      	orrs	r0, r3
  404934:	81a0      	strh	r0, [r4, #12]
  404936:	2e00      	cmp	r6, #0
  404938:	d132      	bne.n	4049a0 <setvbuf+0xec>
  40493a:	9e00      	ldr	r6, [sp, #0]
  40493c:	4630      	mov	r0, r6
  40493e:	f7ff fbf3 	bl	404128 <malloc>
  404942:	4607      	mov	r7, r0
  404944:	2800      	cmp	r0, #0
  404946:	d06b      	beq.n	404a20 <setvbuf+0x16c>
  404948:	89a3      	ldrh	r3, [r4, #12]
  40494a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40494e:	81a3      	strh	r3, [r4, #12]
  404950:	e028      	b.n	4049a4 <setvbuf+0xf0>
  404952:	89a3      	ldrh	r3, [r4, #12]
  404954:	0599      	lsls	r1, r3, #22
  404956:	d4c7      	bmi.n	4048e8 <setvbuf+0x34>
  404958:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40495a:	f003 ff91 	bl	408880 <__retarget_lock_acquire_recursive>
  40495e:	e7c3      	b.n	4048e8 <setvbuf+0x34>
  404960:	2500      	movs	r5, #0
  404962:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404964:	2600      	movs	r6, #0
  404966:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40496a:	f043 0302 	orr.w	r3, r3, #2
  40496e:	2001      	movs	r0, #1
  404970:	60a6      	str	r6, [r4, #8]
  404972:	07ce      	lsls	r6, r1, #31
  404974:	81a3      	strh	r3, [r4, #12]
  404976:	6022      	str	r2, [r4, #0]
  404978:	6122      	str	r2, [r4, #16]
  40497a:	6160      	str	r0, [r4, #20]
  40497c:	d401      	bmi.n	404982 <setvbuf+0xce>
  40497e:	0598      	lsls	r0, r3, #22
  404980:	d53e      	bpl.n	404a00 <setvbuf+0x14c>
  404982:	4628      	mov	r0, r5
  404984:	b003      	add	sp, #12
  404986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40498a:	6921      	ldr	r1, [r4, #16]
  40498c:	4628      	mov	r0, r5
  40498e:	f003 fccf 	bl	408330 <_free_r>
  404992:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404996:	e7bd      	b.n	404914 <setvbuf+0x60>
  404998:	4628      	mov	r0, r5
  40499a:	f003 fba3 	bl	4080e4 <__sinit>
  40499e:	e796      	b.n	4048ce <setvbuf+0x1a>
  4049a0:	2f00      	cmp	r7, #0
  4049a2:	d0cb      	beq.n	40493c <setvbuf+0x88>
  4049a4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4049a6:	2b00      	cmp	r3, #0
  4049a8:	d033      	beq.n	404a12 <setvbuf+0x15e>
  4049aa:	9b00      	ldr	r3, [sp, #0]
  4049ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4049b0:	6027      	str	r7, [r4, #0]
  4049b2:	429e      	cmp	r6, r3
  4049b4:	bf1c      	itt	ne
  4049b6:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  4049ba:	81a2      	strhne	r2, [r4, #12]
  4049bc:	f1b8 0f01 	cmp.w	r8, #1
  4049c0:	bf04      	itt	eq
  4049c2:	f042 0201 	orreq.w	r2, r2, #1
  4049c6:	81a2      	strheq	r2, [r4, #12]
  4049c8:	b292      	uxth	r2, r2
  4049ca:	f012 0308 	ands.w	r3, r2, #8
  4049ce:	6127      	str	r7, [r4, #16]
  4049d0:	6166      	str	r6, [r4, #20]
  4049d2:	d00e      	beq.n	4049f2 <setvbuf+0x13e>
  4049d4:	07d1      	lsls	r1, r2, #31
  4049d6:	d51a      	bpl.n	404a0e <setvbuf+0x15a>
  4049d8:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4049da:	4276      	negs	r6, r6
  4049dc:	2300      	movs	r3, #0
  4049de:	f015 0501 	ands.w	r5, r5, #1
  4049e2:	61a6      	str	r6, [r4, #24]
  4049e4:	60a3      	str	r3, [r4, #8]
  4049e6:	d009      	beq.n	4049fc <setvbuf+0x148>
  4049e8:	2500      	movs	r5, #0
  4049ea:	4628      	mov	r0, r5
  4049ec:	b003      	add	sp, #12
  4049ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4049f2:	60a3      	str	r3, [r4, #8]
  4049f4:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4049f6:	f015 0501 	ands.w	r5, r5, #1
  4049fa:	d1f5      	bne.n	4049e8 <setvbuf+0x134>
  4049fc:	0593      	lsls	r3, r2, #22
  4049fe:	d4c0      	bmi.n	404982 <setvbuf+0xce>
  404a00:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404a02:	f003 ff3f 	bl	408884 <__retarget_lock_release_recursive>
  404a06:	4628      	mov	r0, r5
  404a08:	b003      	add	sp, #12
  404a0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404a0e:	60a6      	str	r6, [r4, #8]
  404a10:	e7f0      	b.n	4049f4 <setvbuf+0x140>
  404a12:	4628      	mov	r0, r5
  404a14:	f003 fb66 	bl	4080e4 <__sinit>
  404a18:	e7c7      	b.n	4049aa <setvbuf+0xf6>
  404a1a:	f04f 35ff 	mov.w	r5, #4294967295
  404a1e:	e7b0      	b.n	404982 <setvbuf+0xce>
  404a20:	f8dd 9000 	ldr.w	r9, [sp]
  404a24:	45b1      	cmp	r9, r6
  404a26:	d004      	beq.n	404a32 <setvbuf+0x17e>
  404a28:	4648      	mov	r0, r9
  404a2a:	f7ff fb7d 	bl	404128 <malloc>
  404a2e:	4607      	mov	r7, r0
  404a30:	b920      	cbnz	r0, 404a3c <setvbuf+0x188>
  404a32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404a36:	f04f 35ff 	mov.w	r5, #4294967295
  404a3a:	e792      	b.n	404962 <setvbuf+0xae>
  404a3c:	464e      	mov	r6, r9
  404a3e:	e783      	b.n	404948 <setvbuf+0x94>
  404a40:	2040001c 	.word	0x2040001c

00404a44 <sprintf>:
  404a44:	b40e      	push	{r1, r2, r3}
  404a46:	b5f0      	push	{r4, r5, r6, r7, lr}
  404a48:	b09c      	sub	sp, #112	; 0x70
  404a4a:	ab21      	add	r3, sp, #132	; 0x84
  404a4c:	490f      	ldr	r1, [pc, #60]	; (404a8c <sprintf+0x48>)
  404a4e:	f853 2b04 	ldr.w	r2, [r3], #4
  404a52:	9301      	str	r3, [sp, #4]
  404a54:	4605      	mov	r5, r0
  404a56:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  404a5a:	6808      	ldr	r0, [r1, #0]
  404a5c:	9502      	str	r5, [sp, #8]
  404a5e:	f44f 7702 	mov.w	r7, #520	; 0x208
  404a62:	f64f 76ff 	movw	r6, #65535	; 0xffff
  404a66:	a902      	add	r1, sp, #8
  404a68:	9506      	str	r5, [sp, #24]
  404a6a:	f8ad 7014 	strh.w	r7, [sp, #20]
  404a6e:	9404      	str	r4, [sp, #16]
  404a70:	9407      	str	r4, [sp, #28]
  404a72:	f8ad 6016 	strh.w	r6, [sp, #22]
  404a76:	f000 f911 	bl	404c9c <_svfprintf_r>
  404a7a:	9b02      	ldr	r3, [sp, #8]
  404a7c:	2200      	movs	r2, #0
  404a7e:	701a      	strb	r2, [r3, #0]
  404a80:	b01c      	add	sp, #112	; 0x70
  404a82:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  404a86:	b003      	add	sp, #12
  404a88:	4770      	bx	lr
  404a8a:	bf00      	nop
  404a8c:	2040001c 	.word	0x2040001c

00404a90 <strcat>:
  404a90:	0783      	lsls	r3, r0, #30
  404a92:	b510      	push	{r4, lr}
  404a94:	4604      	mov	r4, r0
  404a96:	d110      	bne.n	404aba <strcat+0x2a>
  404a98:	6802      	ldr	r2, [r0, #0]
  404a9a:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  404a9e:	ea23 0302 	bic.w	r3, r3, r2
  404aa2:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  404aa6:	d108      	bne.n	404aba <strcat+0x2a>
  404aa8:	f850 2f04 	ldr.w	r2, [r0, #4]!
  404aac:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  404ab0:	ea23 0302 	bic.w	r3, r3, r2
  404ab4:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  404ab8:	d0f6      	beq.n	404aa8 <strcat+0x18>
  404aba:	7803      	ldrb	r3, [r0, #0]
  404abc:	b11b      	cbz	r3, 404ac6 <strcat+0x36>
  404abe:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  404ac2:	2b00      	cmp	r3, #0
  404ac4:	d1fb      	bne.n	404abe <strcat+0x2e>
  404ac6:	f000 f803 	bl	404ad0 <strcpy>
  404aca:	4620      	mov	r0, r4
  404acc:	bd10      	pop	{r4, pc}
  404ace:	bf00      	nop

00404ad0 <strcpy>:
  404ad0:	ea80 0201 	eor.w	r2, r0, r1
  404ad4:	4684      	mov	ip, r0
  404ad6:	f012 0f03 	tst.w	r2, #3
  404ada:	d14f      	bne.n	404b7c <strcpy+0xac>
  404adc:	f011 0f03 	tst.w	r1, #3
  404ae0:	d132      	bne.n	404b48 <strcpy+0x78>
  404ae2:	f84d 4d04 	str.w	r4, [sp, #-4]!
  404ae6:	f011 0f04 	tst.w	r1, #4
  404aea:	f851 3b04 	ldr.w	r3, [r1], #4
  404aee:	d00b      	beq.n	404b08 <strcpy+0x38>
  404af0:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  404af4:	439a      	bics	r2, r3
  404af6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  404afa:	bf04      	itt	eq
  404afc:	f84c 3b04 	streq.w	r3, [ip], #4
  404b00:	f851 3b04 	ldreq.w	r3, [r1], #4
  404b04:	d116      	bne.n	404b34 <strcpy+0x64>
  404b06:	bf00      	nop
  404b08:	f851 4b04 	ldr.w	r4, [r1], #4
  404b0c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  404b10:	439a      	bics	r2, r3
  404b12:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  404b16:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  404b1a:	d10b      	bne.n	404b34 <strcpy+0x64>
  404b1c:	f84c 3b04 	str.w	r3, [ip], #4
  404b20:	43a2      	bics	r2, r4
  404b22:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  404b26:	bf04      	itt	eq
  404b28:	f851 3b04 	ldreq.w	r3, [r1], #4
  404b2c:	f84c 4b04 	streq.w	r4, [ip], #4
  404b30:	d0ea      	beq.n	404b08 <strcpy+0x38>
  404b32:	4623      	mov	r3, r4
  404b34:	f80c 3b01 	strb.w	r3, [ip], #1
  404b38:	f013 0fff 	tst.w	r3, #255	; 0xff
  404b3c:	ea4f 2333 	mov.w	r3, r3, ror #8
  404b40:	d1f8      	bne.n	404b34 <strcpy+0x64>
  404b42:	f85d 4b04 	ldr.w	r4, [sp], #4
  404b46:	4770      	bx	lr
  404b48:	f011 0f01 	tst.w	r1, #1
  404b4c:	d006      	beq.n	404b5c <strcpy+0x8c>
  404b4e:	f811 2b01 	ldrb.w	r2, [r1], #1
  404b52:	f80c 2b01 	strb.w	r2, [ip], #1
  404b56:	2a00      	cmp	r2, #0
  404b58:	bf08      	it	eq
  404b5a:	4770      	bxeq	lr
  404b5c:	f011 0f02 	tst.w	r1, #2
  404b60:	d0bf      	beq.n	404ae2 <strcpy+0x12>
  404b62:	f831 2b02 	ldrh.w	r2, [r1], #2
  404b66:	f012 0fff 	tst.w	r2, #255	; 0xff
  404b6a:	bf16      	itet	ne
  404b6c:	f82c 2b02 	strhne.w	r2, [ip], #2
  404b70:	f88c 2000 	strbeq.w	r2, [ip]
  404b74:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  404b78:	d1b3      	bne.n	404ae2 <strcpy+0x12>
  404b7a:	4770      	bx	lr
  404b7c:	f811 2b01 	ldrb.w	r2, [r1], #1
  404b80:	f80c 2b01 	strb.w	r2, [ip], #1
  404b84:	2a00      	cmp	r2, #0
  404b86:	d1f9      	bne.n	404b7c <strcpy+0xac>
  404b88:	4770      	bx	lr
  404b8a:	bf00      	nop
	...

00404bc0 <strlen>:
  404bc0:	f890 f000 	pld	[r0]
  404bc4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404bc8:	f020 0107 	bic.w	r1, r0, #7
  404bcc:	f06f 0c00 	mvn.w	ip, #0
  404bd0:	f010 0407 	ands.w	r4, r0, #7
  404bd4:	f891 f020 	pld	[r1, #32]
  404bd8:	f040 8049 	bne.w	404c6e <strlen+0xae>
  404bdc:	f04f 0400 	mov.w	r4, #0
  404be0:	f06f 0007 	mvn.w	r0, #7
  404be4:	e9d1 2300 	ldrd	r2, r3, [r1]
  404be8:	f891 f040 	pld	[r1, #64]	; 0x40
  404bec:	f100 0008 	add.w	r0, r0, #8
  404bf0:	fa82 f24c 	uadd8	r2, r2, ip
  404bf4:	faa4 f28c 	sel	r2, r4, ip
  404bf8:	fa83 f34c 	uadd8	r3, r3, ip
  404bfc:	faa2 f38c 	sel	r3, r2, ip
  404c00:	bb4b      	cbnz	r3, 404c56 <strlen+0x96>
  404c02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404c06:	fa82 f24c 	uadd8	r2, r2, ip
  404c0a:	f100 0008 	add.w	r0, r0, #8
  404c0e:	faa4 f28c 	sel	r2, r4, ip
  404c12:	fa83 f34c 	uadd8	r3, r3, ip
  404c16:	faa2 f38c 	sel	r3, r2, ip
  404c1a:	b9e3      	cbnz	r3, 404c56 <strlen+0x96>
  404c1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  404c20:	fa82 f24c 	uadd8	r2, r2, ip
  404c24:	f100 0008 	add.w	r0, r0, #8
  404c28:	faa4 f28c 	sel	r2, r4, ip
  404c2c:	fa83 f34c 	uadd8	r3, r3, ip
  404c30:	faa2 f38c 	sel	r3, r2, ip
  404c34:	b97b      	cbnz	r3, 404c56 <strlen+0x96>
  404c36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  404c3a:	f101 0120 	add.w	r1, r1, #32
  404c3e:	fa82 f24c 	uadd8	r2, r2, ip
  404c42:	f100 0008 	add.w	r0, r0, #8
  404c46:	faa4 f28c 	sel	r2, r4, ip
  404c4a:	fa83 f34c 	uadd8	r3, r3, ip
  404c4e:	faa2 f38c 	sel	r3, r2, ip
  404c52:	2b00      	cmp	r3, #0
  404c54:	d0c6      	beq.n	404be4 <strlen+0x24>
  404c56:	2a00      	cmp	r2, #0
  404c58:	bf04      	itt	eq
  404c5a:	3004      	addeq	r0, #4
  404c5c:	461a      	moveq	r2, r3
  404c5e:	ba12      	rev	r2, r2
  404c60:	fab2 f282 	clz	r2, r2
  404c64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  404c68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  404c6c:	4770      	bx	lr
  404c6e:	e9d1 2300 	ldrd	r2, r3, [r1]
  404c72:	f004 0503 	and.w	r5, r4, #3
  404c76:	f1c4 0000 	rsb	r0, r4, #0
  404c7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  404c7e:	f014 0f04 	tst.w	r4, #4
  404c82:	f891 f040 	pld	[r1, #64]	; 0x40
  404c86:	fa0c f505 	lsl.w	r5, ip, r5
  404c8a:	ea62 0205 	orn	r2, r2, r5
  404c8e:	bf1c      	itt	ne
  404c90:	ea63 0305 	ornne	r3, r3, r5
  404c94:	4662      	movne	r2, ip
  404c96:	f04f 0400 	mov.w	r4, #0
  404c9a:	e7a9      	b.n	404bf0 <strlen+0x30>

00404c9c <_svfprintf_r>:
  404c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404ca0:	b0c3      	sub	sp, #268	; 0x10c
  404ca2:	460c      	mov	r4, r1
  404ca4:	910b      	str	r1, [sp, #44]	; 0x2c
  404ca6:	4692      	mov	sl, r2
  404ca8:	930f      	str	r3, [sp, #60]	; 0x3c
  404caa:	900c      	str	r0, [sp, #48]	; 0x30
  404cac:	f003 fdd6 	bl	40885c <_localeconv_r>
  404cb0:	6803      	ldr	r3, [r0, #0]
  404cb2:	931a      	str	r3, [sp, #104]	; 0x68
  404cb4:	4618      	mov	r0, r3
  404cb6:	f7ff ff83 	bl	404bc0 <strlen>
  404cba:	89a3      	ldrh	r3, [r4, #12]
  404cbc:	9019      	str	r0, [sp, #100]	; 0x64
  404cbe:	0619      	lsls	r1, r3, #24
  404cc0:	d503      	bpl.n	404cca <_svfprintf_r+0x2e>
  404cc2:	6923      	ldr	r3, [r4, #16]
  404cc4:	2b00      	cmp	r3, #0
  404cc6:	f001 8003 	beq.w	405cd0 <_svfprintf_r+0x1034>
  404cca:	2300      	movs	r3, #0
  404ccc:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  404cd0:	9313      	str	r3, [sp, #76]	; 0x4c
  404cd2:	9315      	str	r3, [sp, #84]	; 0x54
  404cd4:	9314      	str	r3, [sp, #80]	; 0x50
  404cd6:	9327      	str	r3, [sp, #156]	; 0x9c
  404cd8:	9326      	str	r3, [sp, #152]	; 0x98
  404cda:	9318      	str	r3, [sp, #96]	; 0x60
  404cdc:	931b      	str	r3, [sp, #108]	; 0x6c
  404cde:	9309      	str	r3, [sp, #36]	; 0x24
  404ce0:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  404ce4:	46c8      	mov	r8, r9
  404ce6:	9316      	str	r3, [sp, #88]	; 0x58
  404ce8:	9317      	str	r3, [sp, #92]	; 0x5c
  404cea:	f89a 3000 	ldrb.w	r3, [sl]
  404cee:	4654      	mov	r4, sl
  404cf0:	b1e3      	cbz	r3, 404d2c <_svfprintf_r+0x90>
  404cf2:	2b25      	cmp	r3, #37	; 0x25
  404cf4:	d102      	bne.n	404cfc <_svfprintf_r+0x60>
  404cf6:	e019      	b.n	404d2c <_svfprintf_r+0x90>
  404cf8:	2b25      	cmp	r3, #37	; 0x25
  404cfa:	d003      	beq.n	404d04 <_svfprintf_r+0x68>
  404cfc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  404d00:	2b00      	cmp	r3, #0
  404d02:	d1f9      	bne.n	404cf8 <_svfprintf_r+0x5c>
  404d04:	eba4 050a 	sub.w	r5, r4, sl
  404d08:	b185      	cbz	r5, 404d2c <_svfprintf_r+0x90>
  404d0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404d0c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404d0e:	f8c8 a000 	str.w	sl, [r8]
  404d12:	3301      	adds	r3, #1
  404d14:	442a      	add	r2, r5
  404d16:	2b07      	cmp	r3, #7
  404d18:	f8c8 5004 	str.w	r5, [r8, #4]
  404d1c:	9227      	str	r2, [sp, #156]	; 0x9c
  404d1e:	9326      	str	r3, [sp, #152]	; 0x98
  404d20:	dc7f      	bgt.n	404e22 <_svfprintf_r+0x186>
  404d22:	f108 0808 	add.w	r8, r8, #8
  404d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404d28:	442b      	add	r3, r5
  404d2a:	9309      	str	r3, [sp, #36]	; 0x24
  404d2c:	7823      	ldrb	r3, [r4, #0]
  404d2e:	2b00      	cmp	r3, #0
  404d30:	d07f      	beq.n	404e32 <_svfprintf_r+0x196>
  404d32:	2300      	movs	r3, #0
  404d34:	461a      	mov	r2, r3
  404d36:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  404d3a:	4619      	mov	r1, r3
  404d3c:	930d      	str	r3, [sp, #52]	; 0x34
  404d3e:	469b      	mov	fp, r3
  404d40:	f04f 30ff 	mov.w	r0, #4294967295
  404d44:	7863      	ldrb	r3, [r4, #1]
  404d46:	900a      	str	r0, [sp, #40]	; 0x28
  404d48:	f104 0a01 	add.w	sl, r4, #1
  404d4c:	f10a 0a01 	add.w	sl, sl, #1
  404d50:	f1a3 0020 	sub.w	r0, r3, #32
  404d54:	2858      	cmp	r0, #88	; 0x58
  404d56:	f200 83c1 	bhi.w	4054dc <_svfprintf_r+0x840>
  404d5a:	e8df f010 	tbh	[pc, r0, lsl #1]
  404d5e:	0238      	.short	0x0238
  404d60:	03bf03bf 	.word	0x03bf03bf
  404d64:	03bf0240 	.word	0x03bf0240
  404d68:	03bf03bf 	.word	0x03bf03bf
  404d6c:	03bf03bf 	.word	0x03bf03bf
  404d70:	024503bf 	.word	0x024503bf
  404d74:	03bf0203 	.word	0x03bf0203
  404d78:	026b005d 	.word	0x026b005d
  404d7c:	028603bf 	.word	0x028603bf
  404d80:	039d039d 	.word	0x039d039d
  404d84:	039d039d 	.word	0x039d039d
  404d88:	039d039d 	.word	0x039d039d
  404d8c:	039d039d 	.word	0x039d039d
  404d90:	03bf039d 	.word	0x03bf039d
  404d94:	03bf03bf 	.word	0x03bf03bf
  404d98:	03bf03bf 	.word	0x03bf03bf
  404d9c:	03bf03bf 	.word	0x03bf03bf
  404da0:	03bf03bf 	.word	0x03bf03bf
  404da4:	033703bf 	.word	0x033703bf
  404da8:	03bf0357 	.word	0x03bf0357
  404dac:	03bf0357 	.word	0x03bf0357
  404db0:	03bf03bf 	.word	0x03bf03bf
  404db4:	039803bf 	.word	0x039803bf
  404db8:	03bf03bf 	.word	0x03bf03bf
  404dbc:	03bf03ad 	.word	0x03bf03ad
  404dc0:	03bf03bf 	.word	0x03bf03bf
  404dc4:	03bf03bf 	.word	0x03bf03bf
  404dc8:	03bf0259 	.word	0x03bf0259
  404dcc:	031e03bf 	.word	0x031e03bf
  404dd0:	03bf03bf 	.word	0x03bf03bf
  404dd4:	03bf03bf 	.word	0x03bf03bf
  404dd8:	03bf03bf 	.word	0x03bf03bf
  404ddc:	03bf03bf 	.word	0x03bf03bf
  404de0:	03bf03bf 	.word	0x03bf03bf
  404de4:	02db02c6 	.word	0x02db02c6
  404de8:	03570357 	.word	0x03570357
  404dec:	028b0357 	.word	0x028b0357
  404df0:	03bf02db 	.word	0x03bf02db
  404df4:	029003bf 	.word	0x029003bf
  404df8:	029d03bf 	.word	0x029d03bf
  404dfc:	02b401cc 	.word	0x02b401cc
  404e00:	03bf0208 	.word	0x03bf0208
  404e04:	03bf01e1 	.word	0x03bf01e1
  404e08:	03bf007e 	.word	0x03bf007e
  404e0c:	020d03bf 	.word	0x020d03bf
  404e10:	980d      	ldr	r0, [sp, #52]	; 0x34
  404e12:	930f      	str	r3, [sp, #60]	; 0x3c
  404e14:	4240      	negs	r0, r0
  404e16:	900d      	str	r0, [sp, #52]	; 0x34
  404e18:	f04b 0b04 	orr.w	fp, fp, #4
  404e1c:	f89a 3000 	ldrb.w	r3, [sl]
  404e20:	e794      	b.n	404d4c <_svfprintf_r+0xb0>
  404e22:	aa25      	add	r2, sp, #148	; 0x94
  404e24:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404e26:	980c      	ldr	r0, [sp, #48]	; 0x30
  404e28:	f004 fb5a 	bl	4094e0 <__ssprint_r>
  404e2c:	b940      	cbnz	r0, 404e40 <_svfprintf_r+0x1a4>
  404e2e:	46c8      	mov	r8, r9
  404e30:	e779      	b.n	404d26 <_svfprintf_r+0x8a>
  404e32:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  404e34:	b123      	cbz	r3, 404e40 <_svfprintf_r+0x1a4>
  404e36:	980c      	ldr	r0, [sp, #48]	; 0x30
  404e38:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404e3a:	aa25      	add	r2, sp, #148	; 0x94
  404e3c:	f004 fb50 	bl	4094e0 <__ssprint_r>
  404e40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404e42:	899b      	ldrh	r3, [r3, #12]
  404e44:	f013 0f40 	tst.w	r3, #64	; 0x40
  404e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404e4a:	bf18      	it	ne
  404e4c:	f04f 33ff 	movne.w	r3, #4294967295
  404e50:	9309      	str	r3, [sp, #36]	; 0x24
  404e52:	9809      	ldr	r0, [sp, #36]	; 0x24
  404e54:	b043      	add	sp, #268	; 0x10c
  404e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404e5a:	f01b 0f20 	tst.w	fp, #32
  404e5e:	9311      	str	r3, [sp, #68]	; 0x44
  404e60:	f040 81dd 	bne.w	40521e <_svfprintf_r+0x582>
  404e64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404e66:	f01b 0f10 	tst.w	fp, #16
  404e6a:	4613      	mov	r3, r2
  404e6c:	f040 856e 	bne.w	40594c <_svfprintf_r+0xcb0>
  404e70:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404e74:	f000 856a 	beq.w	40594c <_svfprintf_r+0xcb0>
  404e78:	8814      	ldrh	r4, [r2, #0]
  404e7a:	3204      	adds	r2, #4
  404e7c:	2500      	movs	r5, #0
  404e7e:	2301      	movs	r3, #1
  404e80:	920f      	str	r2, [sp, #60]	; 0x3c
  404e82:	2700      	movs	r7, #0
  404e84:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404e88:	990a      	ldr	r1, [sp, #40]	; 0x28
  404e8a:	1c4a      	adds	r2, r1, #1
  404e8c:	f000 8265 	beq.w	40535a <_svfprintf_r+0x6be>
  404e90:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  404e94:	9207      	str	r2, [sp, #28]
  404e96:	ea54 0205 	orrs.w	r2, r4, r5
  404e9a:	f040 8264 	bne.w	405366 <_svfprintf_r+0x6ca>
  404e9e:	2900      	cmp	r1, #0
  404ea0:	f040 843c 	bne.w	40571c <_svfprintf_r+0xa80>
  404ea4:	2b00      	cmp	r3, #0
  404ea6:	f040 84d7 	bne.w	405858 <_svfprintf_r+0xbbc>
  404eaa:	f01b 0301 	ands.w	r3, fp, #1
  404eae:	930e      	str	r3, [sp, #56]	; 0x38
  404eb0:	f000 8604 	beq.w	405abc <_svfprintf_r+0xe20>
  404eb4:	ae42      	add	r6, sp, #264	; 0x108
  404eb6:	2330      	movs	r3, #48	; 0x30
  404eb8:	f806 3d41 	strb.w	r3, [r6, #-65]!
  404ebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404ebe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404ec0:	4293      	cmp	r3, r2
  404ec2:	bfb8      	it	lt
  404ec4:	4613      	movlt	r3, r2
  404ec6:	9308      	str	r3, [sp, #32]
  404ec8:	2300      	movs	r3, #0
  404eca:	9312      	str	r3, [sp, #72]	; 0x48
  404ecc:	b117      	cbz	r7, 404ed4 <_svfprintf_r+0x238>
  404ece:	9b08      	ldr	r3, [sp, #32]
  404ed0:	3301      	adds	r3, #1
  404ed2:	9308      	str	r3, [sp, #32]
  404ed4:	9b07      	ldr	r3, [sp, #28]
  404ed6:	f013 0302 	ands.w	r3, r3, #2
  404eda:	9310      	str	r3, [sp, #64]	; 0x40
  404edc:	d002      	beq.n	404ee4 <_svfprintf_r+0x248>
  404ede:	9b08      	ldr	r3, [sp, #32]
  404ee0:	3302      	adds	r3, #2
  404ee2:	9308      	str	r3, [sp, #32]
  404ee4:	9b07      	ldr	r3, [sp, #28]
  404ee6:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  404eea:	f040 830e 	bne.w	40550a <_svfprintf_r+0x86e>
  404eee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404ef0:	9a08      	ldr	r2, [sp, #32]
  404ef2:	eba3 0b02 	sub.w	fp, r3, r2
  404ef6:	f1bb 0f00 	cmp.w	fp, #0
  404efa:	f340 8306 	ble.w	40550a <_svfprintf_r+0x86e>
  404efe:	f1bb 0f10 	cmp.w	fp, #16
  404f02:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404f04:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404f06:	dd29      	ble.n	404f5c <_svfprintf_r+0x2c0>
  404f08:	4643      	mov	r3, r8
  404f0a:	4621      	mov	r1, r4
  404f0c:	46a8      	mov	r8, r5
  404f0e:	2710      	movs	r7, #16
  404f10:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404f12:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404f14:	e006      	b.n	404f24 <_svfprintf_r+0x288>
  404f16:	f1ab 0b10 	sub.w	fp, fp, #16
  404f1a:	f1bb 0f10 	cmp.w	fp, #16
  404f1e:	f103 0308 	add.w	r3, r3, #8
  404f22:	dd18      	ble.n	404f56 <_svfprintf_r+0x2ba>
  404f24:	3201      	adds	r2, #1
  404f26:	48b7      	ldr	r0, [pc, #732]	; (405204 <_svfprintf_r+0x568>)
  404f28:	9226      	str	r2, [sp, #152]	; 0x98
  404f2a:	3110      	adds	r1, #16
  404f2c:	2a07      	cmp	r2, #7
  404f2e:	9127      	str	r1, [sp, #156]	; 0x9c
  404f30:	e883 0081 	stmia.w	r3, {r0, r7}
  404f34:	ddef      	ble.n	404f16 <_svfprintf_r+0x27a>
  404f36:	aa25      	add	r2, sp, #148	; 0x94
  404f38:	4629      	mov	r1, r5
  404f3a:	4620      	mov	r0, r4
  404f3c:	f004 fad0 	bl	4094e0 <__ssprint_r>
  404f40:	2800      	cmp	r0, #0
  404f42:	f47f af7d 	bne.w	404e40 <_svfprintf_r+0x1a4>
  404f46:	f1ab 0b10 	sub.w	fp, fp, #16
  404f4a:	f1bb 0f10 	cmp.w	fp, #16
  404f4e:	9927      	ldr	r1, [sp, #156]	; 0x9c
  404f50:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404f52:	464b      	mov	r3, r9
  404f54:	dce6      	bgt.n	404f24 <_svfprintf_r+0x288>
  404f56:	4645      	mov	r5, r8
  404f58:	460c      	mov	r4, r1
  404f5a:	4698      	mov	r8, r3
  404f5c:	3201      	adds	r2, #1
  404f5e:	4ba9      	ldr	r3, [pc, #676]	; (405204 <_svfprintf_r+0x568>)
  404f60:	9226      	str	r2, [sp, #152]	; 0x98
  404f62:	445c      	add	r4, fp
  404f64:	2a07      	cmp	r2, #7
  404f66:	9427      	str	r4, [sp, #156]	; 0x9c
  404f68:	e888 0808 	stmia.w	r8, {r3, fp}
  404f6c:	f300 8498 	bgt.w	4058a0 <_svfprintf_r+0xc04>
  404f70:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404f74:	f108 0808 	add.w	r8, r8, #8
  404f78:	b177      	cbz	r7, 404f98 <_svfprintf_r+0x2fc>
  404f7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404f7c:	3301      	adds	r3, #1
  404f7e:	3401      	adds	r4, #1
  404f80:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  404f84:	2201      	movs	r2, #1
  404f86:	2b07      	cmp	r3, #7
  404f88:	9427      	str	r4, [sp, #156]	; 0x9c
  404f8a:	9326      	str	r3, [sp, #152]	; 0x98
  404f8c:	e888 0006 	stmia.w	r8, {r1, r2}
  404f90:	f300 83db 	bgt.w	40574a <_svfprintf_r+0xaae>
  404f94:	f108 0808 	add.w	r8, r8, #8
  404f98:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404f9a:	b16b      	cbz	r3, 404fb8 <_svfprintf_r+0x31c>
  404f9c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404f9e:	3301      	adds	r3, #1
  404fa0:	3402      	adds	r4, #2
  404fa2:	a91e      	add	r1, sp, #120	; 0x78
  404fa4:	2202      	movs	r2, #2
  404fa6:	2b07      	cmp	r3, #7
  404fa8:	9427      	str	r4, [sp, #156]	; 0x9c
  404faa:	9326      	str	r3, [sp, #152]	; 0x98
  404fac:	e888 0006 	stmia.w	r8, {r1, r2}
  404fb0:	f300 83d6 	bgt.w	405760 <_svfprintf_r+0xac4>
  404fb4:	f108 0808 	add.w	r8, r8, #8
  404fb8:	2d80      	cmp	r5, #128	; 0x80
  404fba:	f000 8315 	beq.w	4055e8 <_svfprintf_r+0x94c>
  404fbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404fc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404fc2:	1a9f      	subs	r7, r3, r2
  404fc4:	2f00      	cmp	r7, #0
  404fc6:	dd36      	ble.n	405036 <_svfprintf_r+0x39a>
  404fc8:	2f10      	cmp	r7, #16
  404fca:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404fcc:	4d8e      	ldr	r5, [pc, #568]	; (405208 <_svfprintf_r+0x56c>)
  404fce:	dd27      	ble.n	405020 <_svfprintf_r+0x384>
  404fd0:	4642      	mov	r2, r8
  404fd2:	4621      	mov	r1, r4
  404fd4:	46b0      	mov	r8, r6
  404fd6:	f04f 0b10 	mov.w	fp, #16
  404fda:	462e      	mov	r6, r5
  404fdc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404fde:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404fe0:	e004      	b.n	404fec <_svfprintf_r+0x350>
  404fe2:	3f10      	subs	r7, #16
  404fe4:	2f10      	cmp	r7, #16
  404fe6:	f102 0208 	add.w	r2, r2, #8
  404fea:	dd15      	ble.n	405018 <_svfprintf_r+0x37c>
  404fec:	3301      	adds	r3, #1
  404fee:	3110      	adds	r1, #16
  404ff0:	2b07      	cmp	r3, #7
  404ff2:	9127      	str	r1, [sp, #156]	; 0x9c
  404ff4:	9326      	str	r3, [sp, #152]	; 0x98
  404ff6:	e882 0840 	stmia.w	r2, {r6, fp}
  404ffa:	ddf2      	ble.n	404fe2 <_svfprintf_r+0x346>
  404ffc:	aa25      	add	r2, sp, #148	; 0x94
  404ffe:	4629      	mov	r1, r5
  405000:	4620      	mov	r0, r4
  405002:	f004 fa6d 	bl	4094e0 <__ssprint_r>
  405006:	2800      	cmp	r0, #0
  405008:	f47f af1a 	bne.w	404e40 <_svfprintf_r+0x1a4>
  40500c:	3f10      	subs	r7, #16
  40500e:	2f10      	cmp	r7, #16
  405010:	9927      	ldr	r1, [sp, #156]	; 0x9c
  405012:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405014:	464a      	mov	r2, r9
  405016:	dce9      	bgt.n	404fec <_svfprintf_r+0x350>
  405018:	4635      	mov	r5, r6
  40501a:	460c      	mov	r4, r1
  40501c:	4646      	mov	r6, r8
  40501e:	4690      	mov	r8, r2
  405020:	3301      	adds	r3, #1
  405022:	443c      	add	r4, r7
  405024:	2b07      	cmp	r3, #7
  405026:	9427      	str	r4, [sp, #156]	; 0x9c
  405028:	9326      	str	r3, [sp, #152]	; 0x98
  40502a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40502e:	f300 8381 	bgt.w	405734 <_svfprintf_r+0xa98>
  405032:	f108 0808 	add.w	r8, r8, #8
  405036:	9b07      	ldr	r3, [sp, #28]
  405038:	05df      	lsls	r7, r3, #23
  40503a:	f100 8268 	bmi.w	40550e <_svfprintf_r+0x872>
  40503e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405040:	990e      	ldr	r1, [sp, #56]	; 0x38
  405042:	f8c8 6000 	str.w	r6, [r8]
  405046:	3301      	adds	r3, #1
  405048:	440c      	add	r4, r1
  40504a:	2b07      	cmp	r3, #7
  40504c:	9427      	str	r4, [sp, #156]	; 0x9c
  40504e:	f8c8 1004 	str.w	r1, [r8, #4]
  405052:	9326      	str	r3, [sp, #152]	; 0x98
  405054:	f300 834d 	bgt.w	4056f2 <_svfprintf_r+0xa56>
  405058:	f108 0808 	add.w	r8, r8, #8
  40505c:	9b07      	ldr	r3, [sp, #28]
  40505e:	075b      	lsls	r3, r3, #29
  405060:	d53a      	bpl.n	4050d8 <_svfprintf_r+0x43c>
  405062:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405064:	9a08      	ldr	r2, [sp, #32]
  405066:	1a9d      	subs	r5, r3, r2
  405068:	2d00      	cmp	r5, #0
  40506a:	dd35      	ble.n	4050d8 <_svfprintf_r+0x43c>
  40506c:	2d10      	cmp	r5, #16
  40506e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405070:	dd20      	ble.n	4050b4 <_svfprintf_r+0x418>
  405072:	2610      	movs	r6, #16
  405074:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405076:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  40507a:	e004      	b.n	405086 <_svfprintf_r+0x3ea>
  40507c:	3d10      	subs	r5, #16
  40507e:	2d10      	cmp	r5, #16
  405080:	f108 0808 	add.w	r8, r8, #8
  405084:	dd16      	ble.n	4050b4 <_svfprintf_r+0x418>
  405086:	3301      	adds	r3, #1
  405088:	4a5e      	ldr	r2, [pc, #376]	; (405204 <_svfprintf_r+0x568>)
  40508a:	9326      	str	r3, [sp, #152]	; 0x98
  40508c:	3410      	adds	r4, #16
  40508e:	2b07      	cmp	r3, #7
  405090:	9427      	str	r4, [sp, #156]	; 0x9c
  405092:	e888 0044 	stmia.w	r8, {r2, r6}
  405096:	ddf1      	ble.n	40507c <_svfprintf_r+0x3e0>
  405098:	aa25      	add	r2, sp, #148	; 0x94
  40509a:	4659      	mov	r1, fp
  40509c:	4638      	mov	r0, r7
  40509e:	f004 fa1f 	bl	4094e0 <__ssprint_r>
  4050a2:	2800      	cmp	r0, #0
  4050a4:	f47f aecc 	bne.w	404e40 <_svfprintf_r+0x1a4>
  4050a8:	3d10      	subs	r5, #16
  4050aa:	2d10      	cmp	r5, #16
  4050ac:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4050ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4050b0:	46c8      	mov	r8, r9
  4050b2:	dce8      	bgt.n	405086 <_svfprintf_r+0x3ea>
  4050b4:	3301      	adds	r3, #1
  4050b6:	4a53      	ldr	r2, [pc, #332]	; (405204 <_svfprintf_r+0x568>)
  4050b8:	9326      	str	r3, [sp, #152]	; 0x98
  4050ba:	442c      	add	r4, r5
  4050bc:	2b07      	cmp	r3, #7
  4050be:	9427      	str	r4, [sp, #156]	; 0x9c
  4050c0:	e888 0024 	stmia.w	r8, {r2, r5}
  4050c4:	dd08      	ble.n	4050d8 <_svfprintf_r+0x43c>
  4050c6:	aa25      	add	r2, sp, #148	; 0x94
  4050c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4050ca:	980c      	ldr	r0, [sp, #48]	; 0x30
  4050cc:	f004 fa08 	bl	4094e0 <__ssprint_r>
  4050d0:	2800      	cmp	r0, #0
  4050d2:	f47f aeb5 	bne.w	404e40 <_svfprintf_r+0x1a4>
  4050d6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4050d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4050da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4050dc:	9908      	ldr	r1, [sp, #32]
  4050de:	428a      	cmp	r2, r1
  4050e0:	bfac      	ite	ge
  4050e2:	189b      	addge	r3, r3, r2
  4050e4:	185b      	addlt	r3, r3, r1
  4050e6:	9309      	str	r3, [sp, #36]	; 0x24
  4050e8:	2c00      	cmp	r4, #0
  4050ea:	f040 830d 	bne.w	405708 <_svfprintf_r+0xa6c>
  4050ee:	2300      	movs	r3, #0
  4050f0:	9326      	str	r3, [sp, #152]	; 0x98
  4050f2:	46c8      	mov	r8, r9
  4050f4:	e5f9      	b.n	404cea <_svfprintf_r+0x4e>
  4050f6:	9311      	str	r3, [sp, #68]	; 0x44
  4050f8:	f01b 0320 	ands.w	r3, fp, #32
  4050fc:	f040 81e3 	bne.w	4054c6 <_svfprintf_r+0x82a>
  405100:	f01b 0210 	ands.w	r2, fp, #16
  405104:	f040 842e 	bne.w	405964 <_svfprintf_r+0xcc8>
  405108:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  40510c:	f000 842a 	beq.w	405964 <_svfprintf_r+0xcc8>
  405110:	990f      	ldr	r1, [sp, #60]	; 0x3c
  405112:	4613      	mov	r3, r2
  405114:	460a      	mov	r2, r1
  405116:	3204      	adds	r2, #4
  405118:	880c      	ldrh	r4, [r1, #0]
  40511a:	920f      	str	r2, [sp, #60]	; 0x3c
  40511c:	2500      	movs	r5, #0
  40511e:	e6b0      	b.n	404e82 <_svfprintf_r+0x1e6>
  405120:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405122:	9311      	str	r3, [sp, #68]	; 0x44
  405124:	6816      	ldr	r6, [r2, #0]
  405126:	2400      	movs	r4, #0
  405128:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  40512c:	1d15      	adds	r5, r2, #4
  40512e:	2e00      	cmp	r6, #0
  405130:	f000 86a7 	beq.w	405e82 <_svfprintf_r+0x11e6>
  405134:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405136:	1c53      	adds	r3, r2, #1
  405138:	f000 8609 	beq.w	405d4e <_svfprintf_r+0x10b2>
  40513c:	4621      	mov	r1, r4
  40513e:	4630      	mov	r0, r6
  405140:	f003 fc36 	bl	4089b0 <memchr>
  405144:	2800      	cmp	r0, #0
  405146:	f000 86e1 	beq.w	405f0c <_svfprintf_r+0x1270>
  40514a:	1b83      	subs	r3, r0, r6
  40514c:	930e      	str	r3, [sp, #56]	; 0x38
  40514e:	940a      	str	r4, [sp, #40]	; 0x28
  405150:	950f      	str	r5, [sp, #60]	; 0x3c
  405152:	f8cd b01c 	str.w	fp, [sp, #28]
  405156:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40515a:	9308      	str	r3, [sp, #32]
  40515c:	9412      	str	r4, [sp, #72]	; 0x48
  40515e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405162:	e6b3      	b.n	404ecc <_svfprintf_r+0x230>
  405164:	f89a 3000 	ldrb.w	r3, [sl]
  405168:	2201      	movs	r2, #1
  40516a:	212b      	movs	r1, #43	; 0x2b
  40516c:	e5ee      	b.n	404d4c <_svfprintf_r+0xb0>
  40516e:	f04b 0b20 	orr.w	fp, fp, #32
  405172:	f89a 3000 	ldrb.w	r3, [sl]
  405176:	e5e9      	b.n	404d4c <_svfprintf_r+0xb0>
  405178:	9311      	str	r3, [sp, #68]	; 0x44
  40517a:	2a00      	cmp	r2, #0
  40517c:	f040 8795 	bne.w	4060aa <_svfprintf_r+0x140e>
  405180:	4b22      	ldr	r3, [pc, #136]	; (40520c <_svfprintf_r+0x570>)
  405182:	9318      	str	r3, [sp, #96]	; 0x60
  405184:	f01b 0f20 	tst.w	fp, #32
  405188:	f040 8111 	bne.w	4053ae <_svfprintf_r+0x712>
  40518c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40518e:	f01b 0f10 	tst.w	fp, #16
  405192:	4613      	mov	r3, r2
  405194:	f040 83e1 	bne.w	40595a <_svfprintf_r+0xcbe>
  405198:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40519c:	f000 83dd 	beq.w	40595a <_svfprintf_r+0xcbe>
  4051a0:	3304      	adds	r3, #4
  4051a2:	8814      	ldrh	r4, [r2, #0]
  4051a4:	930f      	str	r3, [sp, #60]	; 0x3c
  4051a6:	2500      	movs	r5, #0
  4051a8:	f01b 0f01 	tst.w	fp, #1
  4051ac:	f000 810c 	beq.w	4053c8 <_svfprintf_r+0x72c>
  4051b0:	ea54 0305 	orrs.w	r3, r4, r5
  4051b4:	f000 8108 	beq.w	4053c8 <_svfprintf_r+0x72c>
  4051b8:	2330      	movs	r3, #48	; 0x30
  4051ba:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  4051be:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  4051c2:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  4051c6:	f04b 0b02 	orr.w	fp, fp, #2
  4051ca:	2302      	movs	r3, #2
  4051cc:	e659      	b.n	404e82 <_svfprintf_r+0x1e6>
  4051ce:	f89a 3000 	ldrb.w	r3, [sl]
  4051d2:	2900      	cmp	r1, #0
  4051d4:	f47f adba 	bne.w	404d4c <_svfprintf_r+0xb0>
  4051d8:	2201      	movs	r2, #1
  4051da:	2120      	movs	r1, #32
  4051dc:	e5b6      	b.n	404d4c <_svfprintf_r+0xb0>
  4051de:	f04b 0b01 	orr.w	fp, fp, #1
  4051e2:	f89a 3000 	ldrb.w	r3, [sl]
  4051e6:	e5b1      	b.n	404d4c <_svfprintf_r+0xb0>
  4051e8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  4051ea:	6823      	ldr	r3, [r4, #0]
  4051ec:	930d      	str	r3, [sp, #52]	; 0x34
  4051ee:	4618      	mov	r0, r3
  4051f0:	2800      	cmp	r0, #0
  4051f2:	4623      	mov	r3, r4
  4051f4:	f103 0304 	add.w	r3, r3, #4
  4051f8:	f6ff ae0a 	blt.w	404e10 <_svfprintf_r+0x174>
  4051fc:	930f      	str	r3, [sp, #60]	; 0x3c
  4051fe:	f89a 3000 	ldrb.w	r3, [sl]
  405202:	e5a3      	b.n	404d4c <_svfprintf_r+0xb0>
  405204:	0040a764 	.word	0x0040a764
  405208:	0040a774 	.word	0x0040a774
  40520c:	0040a744 	.word	0x0040a744
  405210:	f04b 0b10 	orr.w	fp, fp, #16
  405214:	f01b 0f20 	tst.w	fp, #32
  405218:	9311      	str	r3, [sp, #68]	; 0x44
  40521a:	f43f ae23 	beq.w	404e64 <_svfprintf_r+0x1c8>
  40521e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405220:	3507      	adds	r5, #7
  405222:	f025 0307 	bic.w	r3, r5, #7
  405226:	f103 0208 	add.w	r2, r3, #8
  40522a:	e9d3 4500 	ldrd	r4, r5, [r3]
  40522e:	920f      	str	r2, [sp, #60]	; 0x3c
  405230:	2301      	movs	r3, #1
  405232:	e626      	b.n	404e82 <_svfprintf_r+0x1e6>
  405234:	f89a 3000 	ldrb.w	r3, [sl]
  405238:	2b2a      	cmp	r3, #42	; 0x2a
  40523a:	f10a 0401 	add.w	r4, sl, #1
  40523e:	f000 8727 	beq.w	406090 <_svfprintf_r+0x13f4>
  405242:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  405246:	2809      	cmp	r0, #9
  405248:	46a2      	mov	sl, r4
  40524a:	f200 86ad 	bhi.w	405fa8 <_svfprintf_r+0x130c>
  40524e:	2300      	movs	r3, #0
  405250:	461c      	mov	r4, r3
  405252:	f81a 3b01 	ldrb.w	r3, [sl], #1
  405256:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40525a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40525e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  405262:	2809      	cmp	r0, #9
  405264:	d9f5      	bls.n	405252 <_svfprintf_r+0x5b6>
  405266:	940a      	str	r4, [sp, #40]	; 0x28
  405268:	e572      	b.n	404d50 <_svfprintf_r+0xb4>
  40526a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  40526e:	f89a 3000 	ldrb.w	r3, [sl]
  405272:	e56b      	b.n	404d4c <_svfprintf_r+0xb0>
  405274:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  405278:	f89a 3000 	ldrb.w	r3, [sl]
  40527c:	e566      	b.n	404d4c <_svfprintf_r+0xb0>
  40527e:	f89a 3000 	ldrb.w	r3, [sl]
  405282:	2b6c      	cmp	r3, #108	; 0x6c
  405284:	bf03      	ittte	eq
  405286:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  40528a:	f04b 0b20 	orreq.w	fp, fp, #32
  40528e:	f10a 0a01 	addeq.w	sl, sl, #1
  405292:	f04b 0b10 	orrne.w	fp, fp, #16
  405296:	e559      	b.n	404d4c <_svfprintf_r+0xb0>
  405298:	2a00      	cmp	r2, #0
  40529a:	f040 8711 	bne.w	4060c0 <_svfprintf_r+0x1424>
  40529e:	f01b 0f20 	tst.w	fp, #32
  4052a2:	f040 84f9 	bne.w	405c98 <_svfprintf_r+0xffc>
  4052a6:	f01b 0f10 	tst.w	fp, #16
  4052aa:	f040 84ac 	bne.w	405c06 <_svfprintf_r+0xf6a>
  4052ae:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4052b2:	f000 84a8 	beq.w	405c06 <_svfprintf_r+0xf6a>
  4052b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4052b8:	6813      	ldr	r3, [r2, #0]
  4052ba:	3204      	adds	r2, #4
  4052bc:	920f      	str	r2, [sp, #60]	; 0x3c
  4052be:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  4052c2:	801a      	strh	r2, [r3, #0]
  4052c4:	e511      	b.n	404cea <_svfprintf_r+0x4e>
  4052c6:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4052c8:	4bb3      	ldr	r3, [pc, #716]	; (405598 <_svfprintf_r+0x8fc>)
  4052ca:	680c      	ldr	r4, [r1, #0]
  4052cc:	9318      	str	r3, [sp, #96]	; 0x60
  4052ce:	2230      	movs	r2, #48	; 0x30
  4052d0:	2378      	movs	r3, #120	; 0x78
  4052d2:	3104      	adds	r1, #4
  4052d4:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  4052d8:	9311      	str	r3, [sp, #68]	; 0x44
  4052da:	f04b 0b02 	orr.w	fp, fp, #2
  4052de:	910f      	str	r1, [sp, #60]	; 0x3c
  4052e0:	2500      	movs	r5, #0
  4052e2:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  4052e6:	2302      	movs	r3, #2
  4052e8:	e5cb      	b.n	404e82 <_svfprintf_r+0x1e6>
  4052ea:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4052ec:	9311      	str	r3, [sp, #68]	; 0x44
  4052ee:	680a      	ldr	r2, [r1, #0]
  4052f0:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4052f4:	2300      	movs	r3, #0
  4052f6:	460a      	mov	r2, r1
  4052f8:	461f      	mov	r7, r3
  4052fa:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4052fe:	3204      	adds	r2, #4
  405300:	2301      	movs	r3, #1
  405302:	9308      	str	r3, [sp, #32]
  405304:	f8cd b01c 	str.w	fp, [sp, #28]
  405308:	970a      	str	r7, [sp, #40]	; 0x28
  40530a:	9712      	str	r7, [sp, #72]	; 0x48
  40530c:	920f      	str	r2, [sp, #60]	; 0x3c
  40530e:	930e      	str	r3, [sp, #56]	; 0x38
  405310:	ae28      	add	r6, sp, #160	; 0xa0
  405312:	e5df      	b.n	404ed4 <_svfprintf_r+0x238>
  405314:	9311      	str	r3, [sp, #68]	; 0x44
  405316:	2a00      	cmp	r2, #0
  405318:	f040 86ea 	bne.w	4060f0 <_svfprintf_r+0x1454>
  40531c:	f01b 0f20 	tst.w	fp, #32
  405320:	d15d      	bne.n	4053de <_svfprintf_r+0x742>
  405322:	f01b 0f10 	tst.w	fp, #16
  405326:	f040 8308 	bne.w	40593a <_svfprintf_r+0xc9e>
  40532a:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40532e:	f000 8304 	beq.w	40593a <_svfprintf_r+0xc9e>
  405332:	990f      	ldr	r1, [sp, #60]	; 0x3c
  405334:	f9b1 4000 	ldrsh.w	r4, [r1]
  405338:	3104      	adds	r1, #4
  40533a:	17e5      	asrs	r5, r4, #31
  40533c:	4622      	mov	r2, r4
  40533e:	462b      	mov	r3, r5
  405340:	910f      	str	r1, [sp, #60]	; 0x3c
  405342:	2a00      	cmp	r2, #0
  405344:	f173 0300 	sbcs.w	r3, r3, #0
  405348:	db58      	blt.n	4053fc <_svfprintf_r+0x760>
  40534a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40534c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405350:	1c4a      	adds	r2, r1, #1
  405352:	f04f 0301 	mov.w	r3, #1
  405356:	f47f ad9b 	bne.w	404e90 <_svfprintf_r+0x1f4>
  40535a:	ea54 0205 	orrs.w	r2, r4, r5
  40535e:	f000 81df 	beq.w	405720 <_svfprintf_r+0xa84>
  405362:	f8cd b01c 	str.w	fp, [sp, #28]
  405366:	2b01      	cmp	r3, #1
  405368:	f000 827b 	beq.w	405862 <_svfprintf_r+0xbc6>
  40536c:	2b02      	cmp	r3, #2
  40536e:	f040 8206 	bne.w	40577e <_svfprintf_r+0xae2>
  405372:	9818      	ldr	r0, [sp, #96]	; 0x60
  405374:	464e      	mov	r6, r9
  405376:	0923      	lsrs	r3, r4, #4
  405378:	f004 010f 	and.w	r1, r4, #15
  40537c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  405380:	092a      	lsrs	r2, r5, #4
  405382:	461c      	mov	r4, r3
  405384:	4615      	mov	r5, r2
  405386:	5c43      	ldrb	r3, [r0, r1]
  405388:	f806 3d01 	strb.w	r3, [r6, #-1]!
  40538c:	ea54 0305 	orrs.w	r3, r4, r5
  405390:	d1f1      	bne.n	405376 <_svfprintf_r+0x6da>
  405392:	eba9 0306 	sub.w	r3, r9, r6
  405396:	930e      	str	r3, [sp, #56]	; 0x38
  405398:	e590      	b.n	404ebc <_svfprintf_r+0x220>
  40539a:	9311      	str	r3, [sp, #68]	; 0x44
  40539c:	2a00      	cmp	r2, #0
  40539e:	f040 86a3 	bne.w	4060e8 <_svfprintf_r+0x144c>
  4053a2:	4b7e      	ldr	r3, [pc, #504]	; (40559c <_svfprintf_r+0x900>)
  4053a4:	9318      	str	r3, [sp, #96]	; 0x60
  4053a6:	f01b 0f20 	tst.w	fp, #32
  4053aa:	f43f aeef 	beq.w	40518c <_svfprintf_r+0x4f0>
  4053ae:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4053b0:	3507      	adds	r5, #7
  4053b2:	f025 0307 	bic.w	r3, r5, #7
  4053b6:	f103 0208 	add.w	r2, r3, #8
  4053ba:	f01b 0f01 	tst.w	fp, #1
  4053be:	920f      	str	r2, [sp, #60]	; 0x3c
  4053c0:	e9d3 4500 	ldrd	r4, r5, [r3]
  4053c4:	f47f aef4 	bne.w	4051b0 <_svfprintf_r+0x514>
  4053c8:	2302      	movs	r3, #2
  4053ca:	e55a      	b.n	404e82 <_svfprintf_r+0x1e6>
  4053cc:	9311      	str	r3, [sp, #68]	; 0x44
  4053ce:	2a00      	cmp	r2, #0
  4053d0:	f040 8686 	bne.w	4060e0 <_svfprintf_r+0x1444>
  4053d4:	f04b 0b10 	orr.w	fp, fp, #16
  4053d8:	f01b 0f20 	tst.w	fp, #32
  4053dc:	d0a1      	beq.n	405322 <_svfprintf_r+0x686>
  4053de:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4053e0:	3507      	adds	r5, #7
  4053e2:	f025 0507 	bic.w	r5, r5, #7
  4053e6:	e9d5 2300 	ldrd	r2, r3, [r5]
  4053ea:	2a00      	cmp	r2, #0
  4053ec:	f105 0108 	add.w	r1, r5, #8
  4053f0:	461d      	mov	r5, r3
  4053f2:	f173 0300 	sbcs.w	r3, r3, #0
  4053f6:	910f      	str	r1, [sp, #60]	; 0x3c
  4053f8:	4614      	mov	r4, r2
  4053fa:	daa6      	bge.n	40534a <_svfprintf_r+0x6ae>
  4053fc:	272d      	movs	r7, #45	; 0x2d
  4053fe:	4264      	negs	r4, r4
  405400:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  405404:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  405408:	2301      	movs	r3, #1
  40540a:	e53d      	b.n	404e88 <_svfprintf_r+0x1ec>
  40540c:	9311      	str	r3, [sp, #68]	; 0x44
  40540e:	2a00      	cmp	r2, #0
  405410:	f040 8662 	bne.w	4060d8 <_svfprintf_r+0x143c>
  405414:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405416:	3507      	adds	r5, #7
  405418:	f025 0307 	bic.w	r3, r5, #7
  40541c:	f103 0208 	add.w	r2, r3, #8
  405420:	920f      	str	r2, [sp, #60]	; 0x3c
  405422:	681a      	ldr	r2, [r3, #0]
  405424:	9215      	str	r2, [sp, #84]	; 0x54
  405426:	685b      	ldr	r3, [r3, #4]
  405428:	9314      	str	r3, [sp, #80]	; 0x50
  40542a:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40542c:	9d15      	ldr	r5, [sp, #84]	; 0x54
  40542e:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  405432:	4628      	mov	r0, r5
  405434:	4621      	mov	r1, r4
  405436:	f04f 32ff 	mov.w	r2, #4294967295
  40543a:	4b59      	ldr	r3, [pc, #356]	; (4055a0 <_svfprintf_r+0x904>)
  40543c:	f004 ff1e 	bl	40a27c <__aeabi_dcmpun>
  405440:	2800      	cmp	r0, #0
  405442:	f040 834a 	bne.w	405ada <_svfprintf_r+0xe3e>
  405446:	4628      	mov	r0, r5
  405448:	4621      	mov	r1, r4
  40544a:	f04f 32ff 	mov.w	r2, #4294967295
  40544e:	4b54      	ldr	r3, [pc, #336]	; (4055a0 <_svfprintf_r+0x904>)
  405450:	f004 fef6 	bl	40a240 <__aeabi_dcmple>
  405454:	2800      	cmp	r0, #0
  405456:	f040 8340 	bne.w	405ada <_svfprintf_r+0xe3e>
  40545a:	a815      	add	r0, sp, #84	; 0x54
  40545c:	c80d      	ldmia	r0, {r0, r2, r3}
  40545e:	9914      	ldr	r1, [sp, #80]	; 0x50
  405460:	f004 fee4 	bl	40a22c <__aeabi_dcmplt>
  405464:	2800      	cmp	r0, #0
  405466:	f040 8530 	bne.w	405eca <_svfprintf_r+0x122e>
  40546a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40546e:	4e4d      	ldr	r6, [pc, #308]	; (4055a4 <_svfprintf_r+0x908>)
  405470:	4b4d      	ldr	r3, [pc, #308]	; (4055a8 <_svfprintf_r+0x90c>)
  405472:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  405476:	9007      	str	r0, [sp, #28]
  405478:	9811      	ldr	r0, [sp, #68]	; 0x44
  40547a:	2203      	movs	r2, #3
  40547c:	2100      	movs	r1, #0
  40547e:	9208      	str	r2, [sp, #32]
  405480:	910a      	str	r1, [sp, #40]	; 0x28
  405482:	2847      	cmp	r0, #71	; 0x47
  405484:	bfd8      	it	le
  405486:	461e      	movle	r6, r3
  405488:	920e      	str	r2, [sp, #56]	; 0x38
  40548a:	9112      	str	r1, [sp, #72]	; 0x48
  40548c:	e51e      	b.n	404ecc <_svfprintf_r+0x230>
  40548e:	f04b 0b08 	orr.w	fp, fp, #8
  405492:	f89a 3000 	ldrb.w	r3, [sl]
  405496:	e459      	b.n	404d4c <_svfprintf_r+0xb0>
  405498:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40549c:	2300      	movs	r3, #0
  40549e:	461c      	mov	r4, r3
  4054a0:	f81a 3b01 	ldrb.w	r3, [sl], #1
  4054a4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4054a8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4054ac:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4054b0:	2809      	cmp	r0, #9
  4054b2:	d9f5      	bls.n	4054a0 <_svfprintf_r+0x804>
  4054b4:	940d      	str	r4, [sp, #52]	; 0x34
  4054b6:	e44b      	b.n	404d50 <_svfprintf_r+0xb4>
  4054b8:	f04b 0b10 	orr.w	fp, fp, #16
  4054bc:	9311      	str	r3, [sp, #68]	; 0x44
  4054be:	f01b 0320 	ands.w	r3, fp, #32
  4054c2:	f43f ae1d 	beq.w	405100 <_svfprintf_r+0x464>
  4054c6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4054c8:	3507      	adds	r5, #7
  4054ca:	f025 0307 	bic.w	r3, r5, #7
  4054ce:	f103 0208 	add.w	r2, r3, #8
  4054d2:	e9d3 4500 	ldrd	r4, r5, [r3]
  4054d6:	920f      	str	r2, [sp, #60]	; 0x3c
  4054d8:	2300      	movs	r3, #0
  4054da:	e4d2      	b.n	404e82 <_svfprintf_r+0x1e6>
  4054dc:	9311      	str	r3, [sp, #68]	; 0x44
  4054de:	2a00      	cmp	r2, #0
  4054e0:	f040 85e7 	bne.w	4060b2 <_svfprintf_r+0x1416>
  4054e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4054e6:	2a00      	cmp	r2, #0
  4054e8:	f43f aca3 	beq.w	404e32 <_svfprintf_r+0x196>
  4054ec:	2300      	movs	r3, #0
  4054ee:	2101      	movs	r1, #1
  4054f0:	461f      	mov	r7, r3
  4054f2:	9108      	str	r1, [sp, #32]
  4054f4:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4054f8:	f8cd b01c 	str.w	fp, [sp, #28]
  4054fc:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  405500:	930a      	str	r3, [sp, #40]	; 0x28
  405502:	9312      	str	r3, [sp, #72]	; 0x48
  405504:	910e      	str	r1, [sp, #56]	; 0x38
  405506:	ae28      	add	r6, sp, #160	; 0xa0
  405508:	e4e4      	b.n	404ed4 <_svfprintf_r+0x238>
  40550a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40550c:	e534      	b.n	404f78 <_svfprintf_r+0x2dc>
  40550e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405510:	2b65      	cmp	r3, #101	; 0x65
  405512:	f340 80a7 	ble.w	405664 <_svfprintf_r+0x9c8>
  405516:	a815      	add	r0, sp, #84	; 0x54
  405518:	c80d      	ldmia	r0, {r0, r2, r3}
  40551a:	9914      	ldr	r1, [sp, #80]	; 0x50
  40551c:	f004 fe7c 	bl	40a218 <__aeabi_dcmpeq>
  405520:	2800      	cmp	r0, #0
  405522:	f000 8150 	beq.w	4057c6 <_svfprintf_r+0xb2a>
  405526:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405528:	4a20      	ldr	r2, [pc, #128]	; (4055ac <_svfprintf_r+0x910>)
  40552a:	f8c8 2000 	str.w	r2, [r8]
  40552e:	3301      	adds	r3, #1
  405530:	3401      	adds	r4, #1
  405532:	2201      	movs	r2, #1
  405534:	2b07      	cmp	r3, #7
  405536:	9427      	str	r4, [sp, #156]	; 0x9c
  405538:	9326      	str	r3, [sp, #152]	; 0x98
  40553a:	f8c8 2004 	str.w	r2, [r8, #4]
  40553e:	f300 836a 	bgt.w	405c16 <_svfprintf_r+0xf7a>
  405542:	f108 0808 	add.w	r8, r8, #8
  405546:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405548:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40554a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40554c:	4293      	cmp	r3, r2
  40554e:	db03      	blt.n	405558 <_svfprintf_r+0x8bc>
  405550:	9b07      	ldr	r3, [sp, #28]
  405552:	07dd      	lsls	r5, r3, #31
  405554:	f57f ad82 	bpl.w	40505c <_svfprintf_r+0x3c0>
  405558:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40555a:	9919      	ldr	r1, [sp, #100]	; 0x64
  40555c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40555e:	f8c8 2000 	str.w	r2, [r8]
  405562:	3301      	adds	r3, #1
  405564:	440c      	add	r4, r1
  405566:	2b07      	cmp	r3, #7
  405568:	f8c8 1004 	str.w	r1, [r8, #4]
  40556c:	9427      	str	r4, [sp, #156]	; 0x9c
  40556e:	9326      	str	r3, [sp, #152]	; 0x98
  405570:	f300 839e 	bgt.w	405cb0 <_svfprintf_r+0x1014>
  405574:	f108 0808 	add.w	r8, r8, #8
  405578:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40557a:	1e5e      	subs	r6, r3, #1
  40557c:	2e00      	cmp	r6, #0
  40557e:	f77f ad6d 	ble.w	40505c <_svfprintf_r+0x3c0>
  405582:	2e10      	cmp	r6, #16
  405584:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405586:	4d0a      	ldr	r5, [pc, #40]	; (4055b0 <_svfprintf_r+0x914>)
  405588:	f340 81f5 	ble.w	405976 <_svfprintf_r+0xcda>
  40558c:	4622      	mov	r2, r4
  40558e:	2710      	movs	r7, #16
  405590:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  405594:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  405596:	e013      	b.n	4055c0 <_svfprintf_r+0x924>
  405598:	0040a744 	.word	0x0040a744
  40559c:	0040a730 	.word	0x0040a730
  4055a0:	7fefffff 	.word	0x7fefffff
  4055a4:	0040a724 	.word	0x0040a724
  4055a8:	0040a720 	.word	0x0040a720
  4055ac:	0040a760 	.word	0x0040a760
  4055b0:	0040a774 	.word	0x0040a774
  4055b4:	f108 0808 	add.w	r8, r8, #8
  4055b8:	3e10      	subs	r6, #16
  4055ba:	2e10      	cmp	r6, #16
  4055bc:	f340 81da 	ble.w	405974 <_svfprintf_r+0xcd8>
  4055c0:	3301      	adds	r3, #1
  4055c2:	3210      	adds	r2, #16
  4055c4:	2b07      	cmp	r3, #7
  4055c6:	9227      	str	r2, [sp, #156]	; 0x9c
  4055c8:	9326      	str	r3, [sp, #152]	; 0x98
  4055ca:	e888 00a0 	stmia.w	r8, {r5, r7}
  4055ce:	ddf1      	ble.n	4055b4 <_svfprintf_r+0x918>
  4055d0:	aa25      	add	r2, sp, #148	; 0x94
  4055d2:	4621      	mov	r1, r4
  4055d4:	4658      	mov	r0, fp
  4055d6:	f003 ff83 	bl	4094e0 <__ssprint_r>
  4055da:	2800      	cmp	r0, #0
  4055dc:	f47f ac30 	bne.w	404e40 <_svfprintf_r+0x1a4>
  4055e0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4055e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4055e4:	46c8      	mov	r8, r9
  4055e6:	e7e7      	b.n	4055b8 <_svfprintf_r+0x91c>
  4055e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4055ea:	9a08      	ldr	r2, [sp, #32]
  4055ec:	1a9f      	subs	r7, r3, r2
  4055ee:	2f00      	cmp	r7, #0
  4055f0:	f77f ace5 	ble.w	404fbe <_svfprintf_r+0x322>
  4055f4:	2f10      	cmp	r7, #16
  4055f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4055f8:	4db6      	ldr	r5, [pc, #728]	; (4058d4 <_svfprintf_r+0xc38>)
  4055fa:	dd27      	ble.n	40564c <_svfprintf_r+0x9b0>
  4055fc:	4642      	mov	r2, r8
  4055fe:	4621      	mov	r1, r4
  405600:	46b0      	mov	r8, r6
  405602:	f04f 0b10 	mov.w	fp, #16
  405606:	462e      	mov	r6, r5
  405608:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40560a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40560c:	e004      	b.n	405618 <_svfprintf_r+0x97c>
  40560e:	3f10      	subs	r7, #16
  405610:	2f10      	cmp	r7, #16
  405612:	f102 0208 	add.w	r2, r2, #8
  405616:	dd15      	ble.n	405644 <_svfprintf_r+0x9a8>
  405618:	3301      	adds	r3, #1
  40561a:	3110      	adds	r1, #16
  40561c:	2b07      	cmp	r3, #7
  40561e:	9127      	str	r1, [sp, #156]	; 0x9c
  405620:	9326      	str	r3, [sp, #152]	; 0x98
  405622:	e882 0840 	stmia.w	r2, {r6, fp}
  405626:	ddf2      	ble.n	40560e <_svfprintf_r+0x972>
  405628:	aa25      	add	r2, sp, #148	; 0x94
  40562a:	4629      	mov	r1, r5
  40562c:	4620      	mov	r0, r4
  40562e:	f003 ff57 	bl	4094e0 <__ssprint_r>
  405632:	2800      	cmp	r0, #0
  405634:	f47f ac04 	bne.w	404e40 <_svfprintf_r+0x1a4>
  405638:	3f10      	subs	r7, #16
  40563a:	2f10      	cmp	r7, #16
  40563c:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40563e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405640:	464a      	mov	r2, r9
  405642:	dce9      	bgt.n	405618 <_svfprintf_r+0x97c>
  405644:	4635      	mov	r5, r6
  405646:	460c      	mov	r4, r1
  405648:	4646      	mov	r6, r8
  40564a:	4690      	mov	r8, r2
  40564c:	3301      	adds	r3, #1
  40564e:	443c      	add	r4, r7
  405650:	2b07      	cmp	r3, #7
  405652:	9427      	str	r4, [sp, #156]	; 0x9c
  405654:	9326      	str	r3, [sp, #152]	; 0x98
  405656:	e888 00a0 	stmia.w	r8, {r5, r7}
  40565a:	f300 8232 	bgt.w	405ac2 <_svfprintf_r+0xe26>
  40565e:	f108 0808 	add.w	r8, r8, #8
  405662:	e4ac      	b.n	404fbe <_svfprintf_r+0x322>
  405664:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405666:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405668:	2b01      	cmp	r3, #1
  40566a:	f340 81fe 	ble.w	405a6a <_svfprintf_r+0xdce>
  40566e:	3701      	adds	r7, #1
  405670:	3401      	adds	r4, #1
  405672:	2301      	movs	r3, #1
  405674:	2f07      	cmp	r7, #7
  405676:	9427      	str	r4, [sp, #156]	; 0x9c
  405678:	9726      	str	r7, [sp, #152]	; 0x98
  40567a:	f8c8 6000 	str.w	r6, [r8]
  40567e:	f8c8 3004 	str.w	r3, [r8, #4]
  405682:	f300 8203 	bgt.w	405a8c <_svfprintf_r+0xdf0>
  405686:	f108 0808 	add.w	r8, r8, #8
  40568a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40568c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40568e:	f8c8 3000 	str.w	r3, [r8]
  405692:	3701      	adds	r7, #1
  405694:	4414      	add	r4, r2
  405696:	2f07      	cmp	r7, #7
  405698:	9427      	str	r4, [sp, #156]	; 0x9c
  40569a:	9726      	str	r7, [sp, #152]	; 0x98
  40569c:	f8c8 2004 	str.w	r2, [r8, #4]
  4056a0:	f300 8200 	bgt.w	405aa4 <_svfprintf_r+0xe08>
  4056a4:	f108 0808 	add.w	r8, r8, #8
  4056a8:	a815      	add	r0, sp, #84	; 0x54
  4056aa:	c80d      	ldmia	r0, {r0, r2, r3}
  4056ac:	9914      	ldr	r1, [sp, #80]	; 0x50
  4056ae:	f004 fdb3 	bl	40a218 <__aeabi_dcmpeq>
  4056b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4056b4:	2800      	cmp	r0, #0
  4056b6:	f040 8101 	bne.w	4058bc <_svfprintf_r+0xc20>
  4056ba:	3b01      	subs	r3, #1
  4056bc:	3701      	adds	r7, #1
  4056be:	3601      	adds	r6, #1
  4056c0:	441c      	add	r4, r3
  4056c2:	2f07      	cmp	r7, #7
  4056c4:	9726      	str	r7, [sp, #152]	; 0x98
  4056c6:	9427      	str	r4, [sp, #156]	; 0x9c
  4056c8:	f8c8 6000 	str.w	r6, [r8]
  4056cc:	f8c8 3004 	str.w	r3, [r8, #4]
  4056d0:	f300 8127 	bgt.w	405922 <_svfprintf_r+0xc86>
  4056d4:	f108 0808 	add.w	r8, r8, #8
  4056d8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  4056da:	f8c8 2004 	str.w	r2, [r8, #4]
  4056de:	3701      	adds	r7, #1
  4056e0:	4414      	add	r4, r2
  4056e2:	ab21      	add	r3, sp, #132	; 0x84
  4056e4:	2f07      	cmp	r7, #7
  4056e6:	9427      	str	r4, [sp, #156]	; 0x9c
  4056e8:	9726      	str	r7, [sp, #152]	; 0x98
  4056ea:	f8c8 3000 	str.w	r3, [r8]
  4056ee:	f77f acb3 	ble.w	405058 <_svfprintf_r+0x3bc>
  4056f2:	aa25      	add	r2, sp, #148	; 0x94
  4056f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4056f6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4056f8:	f003 fef2 	bl	4094e0 <__ssprint_r>
  4056fc:	2800      	cmp	r0, #0
  4056fe:	f47f ab9f 	bne.w	404e40 <_svfprintf_r+0x1a4>
  405702:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405704:	46c8      	mov	r8, r9
  405706:	e4a9      	b.n	40505c <_svfprintf_r+0x3c0>
  405708:	aa25      	add	r2, sp, #148	; 0x94
  40570a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40570c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40570e:	f003 fee7 	bl	4094e0 <__ssprint_r>
  405712:	2800      	cmp	r0, #0
  405714:	f43f aceb 	beq.w	4050ee <_svfprintf_r+0x452>
  405718:	f7ff bb92 	b.w	404e40 <_svfprintf_r+0x1a4>
  40571c:	f8dd b01c 	ldr.w	fp, [sp, #28]
  405720:	2b01      	cmp	r3, #1
  405722:	f000 8134 	beq.w	40598e <_svfprintf_r+0xcf2>
  405726:	2b02      	cmp	r3, #2
  405728:	d125      	bne.n	405776 <_svfprintf_r+0xada>
  40572a:	f8cd b01c 	str.w	fp, [sp, #28]
  40572e:	2400      	movs	r4, #0
  405730:	2500      	movs	r5, #0
  405732:	e61e      	b.n	405372 <_svfprintf_r+0x6d6>
  405734:	aa25      	add	r2, sp, #148	; 0x94
  405736:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405738:	980c      	ldr	r0, [sp, #48]	; 0x30
  40573a:	f003 fed1 	bl	4094e0 <__ssprint_r>
  40573e:	2800      	cmp	r0, #0
  405740:	f47f ab7e 	bne.w	404e40 <_svfprintf_r+0x1a4>
  405744:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405746:	46c8      	mov	r8, r9
  405748:	e475      	b.n	405036 <_svfprintf_r+0x39a>
  40574a:	aa25      	add	r2, sp, #148	; 0x94
  40574c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40574e:	980c      	ldr	r0, [sp, #48]	; 0x30
  405750:	f003 fec6 	bl	4094e0 <__ssprint_r>
  405754:	2800      	cmp	r0, #0
  405756:	f47f ab73 	bne.w	404e40 <_svfprintf_r+0x1a4>
  40575a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40575c:	46c8      	mov	r8, r9
  40575e:	e41b      	b.n	404f98 <_svfprintf_r+0x2fc>
  405760:	aa25      	add	r2, sp, #148	; 0x94
  405762:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405764:	980c      	ldr	r0, [sp, #48]	; 0x30
  405766:	f003 febb 	bl	4094e0 <__ssprint_r>
  40576a:	2800      	cmp	r0, #0
  40576c:	f47f ab68 	bne.w	404e40 <_svfprintf_r+0x1a4>
  405770:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405772:	46c8      	mov	r8, r9
  405774:	e420      	b.n	404fb8 <_svfprintf_r+0x31c>
  405776:	f8cd b01c 	str.w	fp, [sp, #28]
  40577a:	2400      	movs	r4, #0
  40577c:	2500      	movs	r5, #0
  40577e:	4649      	mov	r1, r9
  405780:	e000      	b.n	405784 <_svfprintf_r+0xae8>
  405782:	4631      	mov	r1, r6
  405784:	08e2      	lsrs	r2, r4, #3
  405786:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40578a:	08e8      	lsrs	r0, r5, #3
  40578c:	f004 0307 	and.w	r3, r4, #7
  405790:	4605      	mov	r5, r0
  405792:	4614      	mov	r4, r2
  405794:	3330      	adds	r3, #48	; 0x30
  405796:	ea54 0205 	orrs.w	r2, r4, r5
  40579a:	f801 3c01 	strb.w	r3, [r1, #-1]
  40579e:	f101 36ff 	add.w	r6, r1, #4294967295
  4057a2:	d1ee      	bne.n	405782 <_svfprintf_r+0xae6>
  4057a4:	9a07      	ldr	r2, [sp, #28]
  4057a6:	07d2      	lsls	r2, r2, #31
  4057a8:	f57f adf3 	bpl.w	405392 <_svfprintf_r+0x6f6>
  4057ac:	2b30      	cmp	r3, #48	; 0x30
  4057ae:	f43f adf0 	beq.w	405392 <_svfprintf_r+0x6f6>
  4057b2:	3902      	subs	r1, #2
  4057b4:	2330      	movs	r3, #48	; 0x30
  4057b6:	f806 3c01 	strb.w	r3, [r6, #-1]
  4057ba:	eba9 0301 	sub.w	r3, r9, r1
  4057be:	930e      	str	r3, [sp, #56]	; 0x38
  4057c0:	460e      	mov	r6, r1
  4057c2:	f7ff bb7b 	b.w	404ebc <_svfprintf_r+0x220>
  4057c6:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4057c8:	2900      	cmp	r1, #0
  4057ca:	f340 822e 	ble.w	405c2a <_svfprintf_r+0xf8e>
  4057ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4057d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4057d2:	4293      	cmp	r3, r2
  4057d4:	bfa8      	it	ge
  4057d6:	4613      	movge	r3, r2
  4057d8:	2b00      	cmp	r3, #0
  4057da:	461f      	mov	r7, r3
  4057dc:	dd0d      	ble.n	4057fa <_svfprintf_r+0xb5e>
  4057de:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4057e0:	f8c8 6000 	str.w	r6, [r8]
  4057e4:	3301      	adds	r3, #1
  4057e6:	443c      	add	r4, r7
  4057e8:	2b07      	cmp	r3, #7
  4057ea:	9427      	str	r4, [sp, #156]	; 0x9c
  4057ec:	f8c8 7004 	str.w	r7, [r8, #4]
  4057f0:	9326      	str	r3, [sp, #152]	; 0x98
  4057f2:	f300 831f 	bgt.w	405e34 <_svfprintf_r+0x1198>
  4057f6:	f108 0808 	add.w	r8, r8, #8
  4057fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4057fc:	2f00      	cmp	r7, #0
  4057fe:	bfa8      	it	ge
  405800:	1bdb      	subge	r3, r3, r7
  405802:	2b00      	cmp	r3, #0
  405804:	461f      	mov	r7, r3
  405806:	f340 80d6 	ble.w	4059b6 <_svfprintf_r+0xd1a>
  40580a:	2f10      	cmp	r7, #16
  40580c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40580e:	4d31      	ldr	r5, [pc, #196]	; (4058d4 <_svfprintf_r+0xc38>)
  405810:	f340 81ed 	ble.w	405bee <_svfprintf_r+0xf52>
  405814:	4642      	mov	r2, r8
  405816:	4621      	mov	r1, r4
  405818:	46b0      	mov	r8, r6
  40581a:	f04f 0b10 	mov.w	fp, #16
  40581e:	462e      	mov	r6, r5
  405820:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405822:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  405824:	e004      	b.n	405830 <_svfprintf_r+0xb94>
  405826:	3208      	adds	r2, #8
  405828:	3f10      	subs	r7, #16
  40582a:	2f10      	cmp	r7, #16
  40582c:	f340 81db 	ble.w	405be6 <_svfprintf_r+0xf4a>
  405830:	3301      	adds	r3, #1
  405832:	3110      	adds	r1, #16
  405834:	2b07      	cmp	r3, #7
  405836:	9127      	str	r1, [sp, #156]	; 0x9c
  405838:	9326      	str	r3, [sp, #152]	; 0x98
  40583a:	e882 0840 	stmia.w	r2, {r6, fp}
  40583e:	ddf2      	ble.n	405826 <_svfprintf_r+0xb8a>
  405840:	aa25      	add	r2, sp, #148	; 0x94
  405842:	4629      	mov	r1, r5
  405844:	4620      	mov	r0, r4
  405846:	f003 fe4b 	bl	4094e0 <__ssprint_r>
  40584a:	2800      	cmp	r0, #0
  40584c:	f47f aaf8 	bne.w	404e40 <_svfprintf_r+0x1a4>
  405850:	9927      	ldr	r1, [sp, #156]	; 0x9c
  405852:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405854:	464a      	mov	r2, r9
  405856:	e7e7      	b.n	405828 <_svfprintf_r+0xb8c>
  405858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40585a:	930e      	str	r3, [sp, #56]	; 0x38
  40585c:	464e      	mov	r6, r9
  40585e:	f7ff bb2d 	b.w	404ebc <_svfprintf_r+0x220>
  405862:	2d00      	cmp	r5, #0
  405864:	bf08      	it	eq
  405866:	2c0a      	cmpeq	r4, #10
  405868:	f0c0 808f 	bcc.w	40598a <_svfprintf_r+0xcee>
  40586c:	464e      	mov	r6, r9
  40586e:	4620      	mov	r0, r4
  405870:	4629      	mov	r1, r5
  405872:	220a      	movs	r2, #10
  405874:	2300      	movs	r3, #0
  405876:	f004 fd3f 	bl	40a2f8 <__aeabi_uldivmod>
  40587a:	3230      	adds	r2, #48	; 0x30
  40587c:	f806 2d01 	strb.w	r2, [r6, #-1]!
  405880:	4620      	mov	r0, r4
  405882:	4629      	mov	r1, r5
  405884:	2300      	movs	r3, #0
  405886:	220a      	movs	r2, #10
  405888:	f004 fd36 	bl	40a2f8 <__aeabi_uldivmod>
  40588c:	4604      	mov	r4, r0
  40588e:	460d      	mov	r5, r1
  405890:	ea54 0305 	orrs.w	r3, r4, r5
  405894:	d1eb      	bne.n	40586e <_svfprintf_r+0xbd2>
  405896:	eba9 0306 	sub.w	r3, r9, r6
  40589a:	930e      	str	r3, [sp, #56]	; 0x38
  40589c:	f7ff bb0e 	b.w	404ebc <_svfprintf_r+0x220>
  4058a0:	aa25      	add	r2, sp, #148	; 0x94
  4058a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4058a4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4058a6:	f003 fe1b 	bl	4094e0 <__ssprint_r>
  4058aa:	2800      	cmp	r0, #0
  4058ac:	f47f aac8 	bne.w	404e40 <_svfprintf_r+0x1a4>
  4058b0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4058b4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4058b6:	46c8      	mov	r8, r9
  4058b8:	f7ff bb5e 	b.w	404f78 <_svfprintf_r+0x2dc>
  4058bc:	1e5e      	subs	r6, r3, #1
  4058be:	2e00      	cmp	r6, #0
  4058c0:	f77f af0a 	ble.w	4056d8 <_svfprintf_r+0xa3c>
  4058c4:	2e10      	cmp	r6, #16
  4058c6:	4d03      	ldr	r5, [pc, #12]	; (4058d4 <_svfprintf_r+0xc38>)
  4058c8:	dd22      	ble.n	405910 <_svfprintf_r+0xc74>
  4058ca:	4622      	mov	r2, r4
  4058cc:	f04f 0b10 	mov.w	fp, #16
  4058d0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4058d2:	e006      	b.n	4058e2 <_svfprintf_r+0xc46>
  4058d4:	0040a774 	.word	0x0040a774
  4058d8:	3e10      	subs	r6, #16
  4058da:	2e10      	cmp	r6, #16
  4058dc:	f108 0808 	add.w	r8, r8, #8
  4058e0:	dd15      	ble.n	40590e <_svfprintf_r+0xc72>
  4058e2:	3701      	adds	r7, #1
  4058e4:	3210      	adds	r2, #16
  4058e6:	2f07      	cmp	r7, #7
  4058e8:	9227      	str	r2, [sp, #156]	; 0x9c
  4058ea:	9726      	str	r7, [sp, #152]	; 0x98
  4058ec:	e888 0820 	stmia.w	r8, {r5, fp}
  4058f0:	ddf2      	ble.n	4058d8 <_svfprintf_r+0xc3c>
  4058f2:	aa25      	add	r2, sp, #148	; 0x94
  4058f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4058f6:	4620      	mov	r0, r4
  4058f8:	f003 fdf2 	bl	4094e0 <__ssprint_r>
  4058fc:	2800      	cmp	r0, #0
  4058fe:	f47f aa9f 	bne.w	404e40 <_svfprintf_r+0x1a4>
  405902:	3e10      	subs	r6, #16
  405904:	2e10      	cmp	r6, #16
  405906:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405908:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40590a:	46c8      	mov	r8, r9
  40590c:	dce9      	bgt.n	4058e2 <_svfprintf_r+0xc46>
  40590e:	4614      	mov	r4, r2
  405910:	3701      	adds	r7, #1
  405912:	4434      	add	r4, r6
  405914:	2f07      	cmp	r7, #7
  405916:	9427      	str	r4, [sp, #156]	; 0x9c
  405918:	9726      	str	r7, [sp, #152]	; 0x98
  40591a:	e888 0060 	stmia.w	r8, {r5, r6}
  40591e:	f77f aed9 	ble.w	4056d4 <_svfprintf_r+0xa38>
  405922:	aa25      	add	r2, sp, #148	; 0x94
  405924:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405926:	980c      	ldr	r0, [sp, #48]	; 0x30
  405928:	f003 fdda 	bl	4094e0 <__ssprint_r>
  40592c:	2800      	cmp	r0, #0
  40592e:	f47f aa87 	bne.w	404e40 <_svfprintf_r+0x1a4>
  405932:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405934:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405936:	46c8      	mov	r8, r9
  405938:	e6ce      	b.n	4056d8 <_svfprintf_r+0xa3c>
  40593a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40593c:	6814      	ldr	r4, [r2, #0]
  40593e:	4613      	mov	r3, r2
  405940:	3304      	adds	r3, #4
  405942:	17e5      	asrs	r5, r4, #31
  405944:	930f      	str	r3, [sp, #60]	; 0x3c
  405946:	4622      	mov	r2, r4
  405948:	462b      	mov	r3, r5
  40594a:	e4fa      	b.n	405342 <_svfprintf_r+0x6a6>
  40594c:	3204      	adds	r2, #4
  40594e:	681c      	ldr	r4, [r3, #0]
  405950:	920f      	str	r2, [sp, #60]	; 0x3c
  405952:	2301      	movs	r3, #1
  405954:	2500      	movs	r5, #0
  405956:	f7ff ba94 	b.w	404e82 <_svfprintf_r+0x1e6>
  40595a:	681c      	ldr	r4, [r3, #0]
  40595c:	3304      	adds	r3, #4
  40595e:	930f      	str	r3, [sp, #60]	; 0x3c
  405960:	2500      	movs	r5, #0
  405962:	e421      	b.n	4051a8 <_svfprintf_r+0x50c>
  405964:	990f      	ldr	r1, [sp, #60]	; 0x3c
  405966:	460a      	mov	r2, r1
  405968:	3204      	adds	r2, #4
  40596a:	680c      	ldr	r4, [r1, #0]
  40596c:	920f      	str	r2, [sp, #60]	; 0x3c
  40596e:	2500      	movs	r5, #0
  405970:	f7ff ba87 	b.w	404e82 <_svfprintf_r+0x1e6>
  405974:	4614      	mov	r4, r2
  405976:	3301      	adds	r3, #1
  405978:	4434      	add	r4, r6
  40597a:	2b07      	cmp	r3, #7
  40597c:	9427      	str	r4, [sp, #156]	; 0x9c
  40597e:	9326      	str	r3, [sp, #152]	; 0x98
  405980:	e888 0060 	stmia.w	r8, {r5, r6}
  405984:	f77f ab68 	ble.w	405058 <_svfprintf_r+0x3bc>
  405988:	e6b3      	b.n	4056f2 <_svfprintf_r+0xa56>
  40598a:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40598e:	f8cd b01c 	str.w	fp, [sp, #28]
  405992:	ae42      	add	r6, sp, #264	; 0x108
  405994:	3430      	adds	r4, #48	; 0x30
  405996:	2301      	movs	r3, #1
  405998:	f806 4d41 	strb.w	r4, [r6, #-65]!
  40599c:	930e      	str	r3, [sp, #56]	; 0x38
  40599e:	f7ff ba8d 	b.w	404ebc <_svfprintf_r+0x220>
  4059a2:	aa25      	add	r2, sp, #148	; 0x94
  4059a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4059a6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4059a8:	f003 fd9a 	bl	4094e0 <__ssprint_r>
  4059ac:	2800      	cmp	r0, #0
  4059ae:	f47f aa47 	bne.w	404e40 <_svfprintf_r+0x1a4>
  4059b2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4059b4:	46c8      	mov	r8, r9
  4059b6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4059b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4059ba:	429a      	cmp	r2, r3
  4059bc:	db44      	blt.n	405a48 <_svfprintf_r+0xdac>
  4059be:	9b07      	ldr	r3, [sp, #28]
  4059c0:	07d9      	lsls	r1, r3, #31
  4059c2:	d441      	bmi.n	405a48 <_svfprintf_r+0xdac>
  4059c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4059c6:	9812      	ldr	r0, [sp, #72]	; 0x48
  4059c8:	1a9a      	subs	r2, r3, r2
  4059ca:	1a1d      	subs	r5, r3, r0
  4059cc:	4295      	cmp	r5, r2
  4059ce:	bfa8      	it	ge
  4059d0:	4615      	movge	r5, r2
  4059d2:	2d00      	cmp	r5, #0
  4059d4:	dd0e      	ble.n	4059f4 <_svfprintf_r+0xd58>
  4059d6:	9926      	ldr	r1, [sp, #152]	; 0x98
  4059d8:	f8c8 5004 	str.w	r5, [r8, #4]
  4059dc:	3101      	adds	r1, #1
  4059de:	4406      	add	r6, r0
  4059e0:	442c      	add	r4, r5
  4059e2:	2907      	cmp	r1, #7
  4059e4:	f8c8 6000 	str.w	r6, [r8]
  4059e8:	9427      	str	r4, [sp, #156]	; 0x9c
  4059ea:	9126      	str	r1, [sp, #152]	; 0x98
  4059ec:	f300 823b 	bgt.w	405e66 <_svfprintf_r+0x11ca>
  4059f0:	f108 0808 	add.w	r8, r8, #8
  4059f4:	2d00      	cmp	r5, #0
  4059f6:	bfac      	ite	ge
  4059f8:	1b56      	subge	r6, r2, r5
  4059fa:	4616      	movlt	r6, r2
  4059fc:	2e00      	cmp	r6, #0
  4059fe:	f77f ab2d 	ble.w	40505c <_svfprintf_r+0x3c0>
  405a02:	2e10      	cmp	r6, #16
  405a04:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405a06:	4db0      	ldr	r5, [pc, #704]	; (405cc8 <_svfprintf_r+0x102c>)
  405a08:	ddb5      	ble.n	405976 <_svfprintf_r+0xcda>
  405a0a:	4622      	mov	r2, r4
  405a0c:	2710      	movs	r7, #16
  405a0e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  405a12:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  405a14:	e004      	b.n	405a20 <_svfprintf_r+0xd84>
  405a16:	f108 0808 	add.w	r8, r8, #8
  405a1a:	3e10      	subs	r6, #16
  405a1c:	2e10      	cmp	r6, #16
  405a1e:	dda9      	ble.n	405974 <_svfprintf_r+0xcd8>
  405a20:	3301      	adds	r3, #1
  405a22:	3210      	adds	r2, #16
  405a24:	2b07      	cmp	r3, #7
  405a26:	9227      	str	r2, [sp, #156]	; 0x9c
  405a28:	9326      	str	r3, [sp, #152]	; 0x98
  405a2a:	e888 00a0 	stmia.w	r8, {r5, r7}
  405a2e:	ddf2      	ble.n	405a16 <_svfprintf_r+0xd7a>
  405a30:	aa25      	add	r2, sp, #148	; 0x94
  405a32:	4621      	mov	r1, r4
  405a34:	4658      	mov	r0, fp
  405a36:	f003 fd53 	bl	4094e0 <__ssprint_r>
  405a3a:	2800      	cmp	r0, #0
  405a3c:	f47f aa00 	bne.w	404e40 <_svfprintf_r+0x1a4>
  405a40:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405a42:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405a44:	46c8      	mov	r8, r9
  405a46:	e7e8      	b.n	405a1a <_svfprintf_r+0xd7e>
  405a48:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405a4a:	9819      	ldr	r0, [sp, #100]	; 0x64
  405a4c:	991a      	ldr	r1, [sp, #104]	; 0x68
  405a4e:	f8c8 1000 	str.w	r1, [r8]
  405a52:	3301      	adds	r3, #1
  405a54:	4404      	add	r4, r0
  405a56:	2b07      	cmp	r3, #7
  405a58:	9427      	str	r4, [sp, #156]	; 0x9c
  405a5a:	f8c8 0004 	str.w	r0, [r8, #4]
  405a5e:	9326      	str	r3, [sp, #152]	; 0x98
  405a60:	f300 81f5 	bgt.w	405e4e <_svfprintf_r+0x11b2>
  405a64:	f108 0808 	add.w	r8, r8, #8
  405a68:	e7ac      	b.n	4059c4 <_svfprintf_r+0xd28>
  405a6a:	9b07      	ldr	r3, [sp, #28]
  405a6c:	07da      	lsls	r2, r3, #31
  405a6e:	f53f adfe 	bmi.w	40566e <_svfprintf_r+0x9d2>
  405a72:	3701      	adds	r7, #1
  405a74:	3401      	adds	r4, #1
  405a76:	2301      	movs	r3, #1
  405a78:	2f07      	cmp	r7, #7
  405a7a:	9427      	str	r4, [sp, #156]	; 0x9c
  405a7c:	9726      	str	r7, [sp, #152]	; 0x98
  405a7e:	f8c8 6000 	str.w	r6, [r8]
  405a82:	f8c8 3004 	str.w	r3, [r8, #4]
  405a86:	f77f ae25 	ble.w	4056d4 <_svfprintf_r+0xa38>
  405a8a:	e74a      	b.n	405922 <_svfprintf_r+0xc86>
  405a8c:	aa25      	add	r2, sp, #148	; 0x94
  405a8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405a90:	980c      	ldr	r0, [sp, #48]	; 0x30
  405a92:	f003 fd25 	bl	4094e0 <__ssprint_r>
  405a96:	2800      	cmp	r0, #0
  405a98:	f47f a9d2 	bne.w	404e40 <_svfprintf_r+0x1a4>
  405a9c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405a9e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405aa0:	46c8      	mov	r8, r9
  405aa2:	e5f2      	b.n	40568a <_svfprintf_r+0x9ee>
  405aa4:	aa25      	add	r2, sp, #148	; 0x94
  405aa6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405aa8:	980c      	ldr	r0, [sp, #48]	; 0x30
  405aaa:	f003 fd19 	bl	4094e0 <__ssprint_r>
  405aae:	2800      	cmp	r0, #0
  405ab0:	f47f a9c6 	bne.w	404e40 <_svfprintf_r+0x1a4>
  405ab4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405ab6:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405ab8:	46c8      	mov	r8, r9
  405aba:	e5f5      	b.n	4056a8 <_svfprintf_r+0xa0c>
  405abc:	464e      	mov	r6, r9
  405abe:	f7ff b9fd 	b.w	404ebc <_svfprintf_r+0x220>
  405ac2:	aa25      	add	r2, sp, #148	; 0x94
  405ac4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405ac6:	980c      	ldr	r0, [sp, #48]	; 0x30
  405ac8:	f003 fd0a 	bl	4094e0 <__ssprint_r>
  405acc:	2800      	cmp	r0, #0
  405ace:	f47f a9b7 	bne.w	404e40 <_svfprintf_r+0x1a4>
  405ad2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405ad4:	46c8      	mov	r8, r9
  405ad6:	f7ff ba72 	b.w	404fbe <_svfprintf_r+0x322>
  405ada:	9c15      	ldr	r4, [sp, #84]	; 0x54
  405adc:	4622      	mov	r2, r4
  405ade:	4620      	mov	r0, r4
  405ae0:	9c14      	ldr	r4, [sp, #80]	; 0x50
  405ae2:	4623      	mov	r3, r4
  405ae4:	4621      	mov	r1, r4
  405ae6:	f004 fbc9 	bl	40a27c <__aeabi_dcmpun>
  405aea:	2800      	cmp	r0, #0
  405aec:	f040 8286 	bne.w	405ffc <_svfprintf_r+0x1360>
  405af0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405af2:	3301      	adds	r3, #1
  405af4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405af6:	f023 0320 	bic.w	r3, r3, #32
  405afa:	930e      	str	r3, [sp, #56]	; 0x38
  405afc:	f000 81e2 	beq.w	405ec4 <_svfprintf_r+0x1228>
  405b00:	2b47      	cmp	r3, #71	; 0x47
  405b02:	f000 811e 	beq.w	405d42 <_svfprintf_r+0x10a6>
  405b06:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  405b0a:	9307      	str	r3, [sp, #28]
  405b0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  405b0e:	1e1f      	subs	r7, r3, #0
  405b10:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405b12:	9308      	str	r3, [sp, #32]
  405b14:	bfbb      	ittet	lt
  405b16:	463b      	movlt	r3, r7
  405b18:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  405b1c:	2300      	movge	r3, #0
  405b1e:	232d      	movlt	r3, #45	; 0x2d
  405b20:	9310      	str	r3, [sp, #64]	; 0x40
  405b22:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405b24:	2b66      	cmp	r3, #102	; 0x66
  405b26:	f000 81bb 	beq.w	405ea0 <_svfprintf_r+0x1204>
  405b2a:	2b46      	cmp	r3, #70	; 0x46
  405b2c:	f000 80df 	beq.w	405cee <_svfprintf_r+0x1052>
  405b30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405b32:	9a08      	ldr	r2, [sp, #32]
  405b34:	2b45      	cmp	r3, #69	; 0x45
  405b36:	bf0c      	ite	eq
  405b38:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  405b3a:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  405b3c:	a823      	add	r0, sp, #140	; 0x8c
  405b3e:	a920      	add	r1, sp, #128	; 0x80
  405b40:	bf08      	it	eq
  405b42:	1c5d      	addeq	r5, r3, #1
  405b44:	9004      	str	r0, [sp, #16]
  405b46:	9103      	str	r1, [sp, #12]
  405b48:	a81f      	add	r0, sp, #124	; 0x7c
  405b4a:	2102      	movs	r1, #2
  405b4c:	463b      	mov	r3, r7
  405b4e:	9002      	str	r0, [sp, #8]
  405b50:	9501      	str	r5, [sp, #4]
  405b52:	9100      	str	r1, [sp, #0]
  405b54:	980c      	ldr	r0, [sp, #48]	; 0x30
  405b56:	f001 faa3 	bl	4070a0 <_dtoa_r>
  405b5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405b5c:	2b67      	cmp	r3, #103	; 0x67
  405b5e:	4606      	mov	r6, r0
  405b60:	f040 81e0 	bne.w	405f24 <_svfprintf_r+0x1288>
  405b64:	f01b 0f01 	tst.w	fp, #1
  405b68:	f000 8246 	beq.w	405ff8 <_svfprintf_r+0x135c>
  405b6c:	1974      	adds	r4, r6, r5
  405b6e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405b70:	9808      	ldr	r0, [sp, #32]
  405b72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  405b74:	4639      	mov	r1, r7
  405b76:	f004 fb4f 	bl	40a218 <__aeabi_dcmpeq>
  405b7a:	2800      	cmp	r0, #0
  405b7c:	f040 8165 	bne.w	405e4a <_svfprintf_r+0x11ae>
  405b80:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405b82:	42a3      	cmp	r3, r4
  405b84:	d206      	bcs.n	405b94 <_svfprintf_r+0xef8>
  405b86:	2130      	movs	r1, #48	; 0x30
  405b88:	1c5a      	adds	r2, r3, #1
  405b8a:	9223      	str	r2, [sp, #140]	; 0x8c
  405b8c:	7019      	strb	r1, [r3, #0]
  405b8e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405b90:	429c      	cmp	r4, r3
  405b92:	d8f9      	bhi.n	405b88 <_svfprintf_r+0xeec>
  405b94:	1b9b      	subs	r3, r3, r6
  405b96:	9313      	str	r3, [sp, #76]	; 0x4c
  405b98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405b9a:	2b47      	cmp	r3, #71	; 0x47
  405b9c:	f000 80e9 	beq.w	405d72 <_svfprintf_r+0x10d6>
  405ba0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405ba2:	2b65      	cmp	r3, #101	; 0x65
  405ba4:	f340 81cd 	ble.w	405f42 <_svfprintf_r+0x12a6>
  405ba8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405baa:	2b66      	cmp	r3, #102	; 0x66
  405bac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405bae:	9312      	str	r3, [sp, #72]	; 0x48
  405bb0:	f000 819e 	beq.w	405ef0 <_svfprintf_r+0x1254>
  405bb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405bb6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405bb8:	4619      	mov	r1, r3
  405bba:	4291      	cmp	r1, r2
  405bbc:	f300 818a 	bgt.w	405ed4 <_svfprintf_r+0x1238>
  405bc0:	f01b 0f01 	tst.w	fp, #1
  405bc4:	f040 8213 	bne.w	405fee <_svfprintf_r+0x1352>
  405bc8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  405bcc:	9308      	str	r3, [sp, #32]
  405bce:	2367      	movs	r3, #103	; 0x67
  405bd0:	920e      	str	r2, [sp, #56]	; 0x38
  405bd2:	9311      	str	r3, [sp, #68]	; 0x44
  405bd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405bd6:	2b00      	cmp	r3, #0
  405bd8:	f040 80c4 	bne.w	405d64 <_svfprintf_r+0x10c8>
  405bdc:	930a      	str	r3, [sp, #40]	; 0x28
  405bde:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405be2:	f7ff b973 	b.w	404ecc <_svfprintf_r+0x230>
  405be6:	4635      	mov	r5, r6
  405be8:	460c      	mov	r4, r1
  405bea:	4646      	mov	r6, r8
  405bec:	4690      	mov	r8, r2
  405bee:	3301      	adds	r3, #1
  405bf0:	443c      	add	r4, r7
  405bf2:	2b07      	cmp	r3, #7
  405bf4:	9427      	str	r4, [sp, #156]	; 0x9c
  405bf6:	9326      	str	r3, [sp, #152]	; 0x98
  405bf8:	e888 00a0 	stmia.w	r8, {r5, r7}
  405bfc:	f73f aed1 	bgt.w	4059a2 <_svfprintf_r+0xd06>
  405c00:	f108 0808 	add.w	r8, r8, #8
  405c04:	e6d7      	b.n	4059b6 <_svfprintf_r+0xd1a>
  405c06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405c08:	6813      	ldr	r3, [r2, #0]
  405c0a:	3204      	adds	r2, #4
  405c0c:	920f      	str	r2, [sp, #60]	; 0x3c
  405c0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405c10:	601a      	str	r2, [r3, #0]
  405c12:	f7ff b86a 	b.w	404cea <_svfprintf_r+0x4e>
  405c16:	aa25      	add	r2, sp, #148	; 0x94
  405c18:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405c1a:	980c      	ldr	r0, [sp, #48]	; 0x30
  405c1c:	f003 fc60 	bl	4094e0 <__ssprint_r>
  405c20:	2800      	cmp	r0, #0
  405c22:	f47f a90d 	bne.w	404e40 <_svfprintf_r+0x1a4>
  405c26:	46c8      	mov	r8, r9
  405c28:	e48d      	b.n	405546 <_svfprintf_r+0x8aa>
  405c2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405c2c:	4a27      	ldr	r2, [pc, #156]	; (405ccc <_svfprintf_r+0x1030>)
  405c2e:	f8c8 2000 	str.w	r2, [r8]
  405c32:	3301      	adds	r3, #1
  405c34:	3401      	adds	r4, #1
  405c36:	2201      	movs	r2, #1
  405c38:	2b07      	cmp	r3, #7
  405c3a:	9427      	str	r4, [sp, #156]	; 0x9c
  405c3c:	9326      	str	r3, [sp, #152]	; 0x98
  405c3e:	f8c8 2004 	str.w	r2, [r8, #4]
  405c42:	dc72      	bgt.n	405d2a <_svfprintf_r+0x108e>
  405c44:	f108 0808 	add.w	r8, r8, #8
  405c48:	b929      	cbnz	r1, 405c56 <_svfprintf_r+0xfba>
  405c4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405c4c:	b91b      	cbnz	r3, 405c56 <_svfprintf_r+0xfba>
  405c4e:	9b07      	ldr	r3, [sp, #28]
  405c50:	07d8      	lsls	r0, r3, #31
  405c52:	f57f aa03 	bpl.w	40505c <_svfprintf_r+0x3c0>
  405c56:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405c58:	9819      	ldr	r0, [sp, #100]	; 0x64
  405c5a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  405c5c:	f8c8 2000 	str.w	r2, [r8]
  405c60:	3301      	adds	r3, #1
  405c62:	4602      	mov	r2, r0
  405c64:	4422      	add	r2, r4
  405c66:	2b07      	cmp	r3, #7
  405c68:	9227      	str	r2, [sp, #156]	; 0x9c
  405c6a:	f8c8 0004 	str.w	r0, [r8, #4]
  405c6e:	9326      	str	r3, [sp, #152]	; 0x98
  405c70:	f300 818d 	bgt.w	405f8e <_svfprintf_r+0x12f2>
  405c74:	f108 0808 	add.w	r8, r8, #8
  405c78:	2900      	cmp	r1, #0
  405c7a:	f2c0 8165 	blt.w	405f48 <_svfprintf_r+0x12ac>
  405c7e:	9913      	ldr	r1, [sp, #76]	; 0x4c
  405c80:	f8c8 6000 	str.w	r6, [r8]
  405c84:	3301      	adds	r3, #1
  405c86:	188c      	adds	r4, r1, r2
  405c88:	2b07      	cmp	r3, #7
  405c8a:	9427      	str	r4, [sp, #156]	; 0x9c
  405c8c:	9326      	str	r3, [sp, #152]	; 0x98
  405c8e:	f8c8 1004 	str.w	r1, [r8, #4]
  405c92:	f77f a9e1 	ble.w	405058 <_svfprintf_r+0x3bc>
  405c96:	e52c      	b.n	4056f2 <_svfprintf_r+0xa56>
  405c98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405c9a:	9909      	ldr	r1, [sp, #36]	; 0x24
  405c9c:	6813      	ldr	r3, [r2, #0]
  405c9e:	17cd      	asrs	r5, r1, #31
  405ca0:	4608      	mov	r0, r1
  405ca2:	3204      	adds	r2, #4
  405ca4:	4629      	mov	r1, r5
  405ca6:	920f      	str	r2, [sp, #60]	; 0x3c
  405ca8:	e9c3 0100 	strd	r0, r1, [r3]
  405cac:	f7ff b81d 	b.w	404cea <_svfprintf_r+0x4e>
  405cb0:	aa25      	add	r2, sp, #148	; 0x94
  405cb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405cb4:	980c      	ldr	r0, [sp, #48]	; 0x30
  405cb6:	f003 fc13 	bl	4094e0 <__ssprint_r>
  405cba:	2800      	cmp	r0, #0
  405cbc:	f47f a8c0 	bne.w	404e40 <_svfprintf_r+0x1a4>
  405cc0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405cc2:	46c8      	mov	r8, r9
  405cc4:	e458      	b.n	405578 <_svfprintf_r+0x8dc>
  405cc6:	bf00      	nop
  405cc8:	0040a774 	.word	0x0040a774
  405ccc:	0040a760 	.word	0x0040a760
  405cd0:	2140      	movs	r1, #64	; 0x40
  405cd2:	980c      	ldr	r0, [sp, #48]	; 0x30
  405cd4:	f7fe fa30 	bl	404138 <_malloc_r>
  405cd8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405cda:	6010      	str	r0, [r2, #0]
  405cdc:	6110      	str	r0, [r2, #16]
  405cde:	2800      	cmp	r0, #0
  405ce0:	f000 81f2 	beq.w	4060c8 <_svfprintf_r+0x142c>
  405ce4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405ce6:	2340      	movs	r3, #64	; 0x40
  405ce8:	6153      	str	r3, [r2, #20]
  405cea:	f7fe bfee 	b.w	404cca <_svfprintf_r+0x2e>
  405cee:	a823      	add	r0, sp, #140	; 0x8c
  405cf0:	a920      	add	r1, sp, #128	; 0x80
  405cf2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  405cf4:	9004      	str	r0, [sp, #16]
  405cf6:	9103      	str	r1, [sp, #12]
  405cf8:	a81f      	add	r0, sp, #124	; 0x7c
  405cfa:	2103      	movs	r1, #3
  405cfc:	9002      	str	r0, [sp, #8]
  405cfe:	9a08      	ldr	r2, [sp, #32]
  405d00:	9401      	str	r4, [sp, #4]
  405d02:	463b      	mov	r3, r7
  405d04:	9100      	str	r1, [sp, #0]
  405d06:	980c      	ldr	r0, [sp, #48]	; 0x30
  405d08:	f001 f9ca 	bl	4070a0 <_dtoa_r>
  405d0c:	4625      	mov	r5, r4
  405d0e:	4606      	mov	r6, r0
  405d10:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405d12:	2b46      	cmp	r3, #70	; 0x46
  405d14:	eb06 0405 	add.w	r4, r6, r5
  405d18:	f47f af29 	bne.w	405b6e <_svfprintf_r+0xed2>
  405d1c:	7833      	ldrb	r3, [r6, #0]
  405d1e:	2b30      	cmp	r3, #48	; 0x30
  405d20:	f000 8178 	beq.w	406014 <_svfprintf_r+0x1378>
  405d24:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  405d26:	442c      	add	r4, r5
  405d28:	e721      	b.n	405b6e <_svfprintf_r+0xed2>
  405d2a:	aa25      	add	r2, sp, #148	; 0x94
  405d2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405d2e:	980c      	ldr	r0, [sp, #48]	; 0x30
  405d30:	f003 fbd6 	bl	4094e0 <__ssprint_r>
  405d34:	2800      	cmp	r0, #0
  405d36:	f47f a883 	bne.w	404e40 <_svfprintf_r+0x1a4>
  405d3a:	991f      	ldr	r1, [sp, #124]	; 0x7c
  405d3c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405d3e:	46c8      	mov	r8, r9
  405d40:	e782      	b.n	405c48 <_svfprintf_r+0xfac>
  405d42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405d44:	2b00      	cmp	r3, #0
  405d46:	bf08      	it	eq
  405d48:	2301      	moveq	r3, #1
  405d4a:	930a      	str	r3, [sp, #40]	; 0x28
  405d4c:	e6db      	b.n	405b06 <_svfprintf_r+0xe6a>
  405d4e:	4630      	mov	r0, r6
  405d50:	940a      	str	r4, [sp, #40]	; 0x28
  405d52:	f7fe ff35 	bl	404bc0 <strlen>
  405d56:	950f      	str	r5, [sp, #60]	; 0x3c
  405d58:	900e      	str	r0, [sp, #56]	; 0x38
  405d5a:	f8cd b01c 	str.w	fp, [sp, #28]
  405d5e:	4603      	mov	r3, r0
  405d60:	f7ff b9f9 	b.w	405156 <_svfprintf_r+0x4ba>
  405d64:	272d      	movs	r7, #45	; 0x2d
  405d66:	2300      	movs	r3, #0
  405d68:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  405d6c:	930a      	str	r3, [sp, #40]	; 0x28
  405d6e:	f7ff b8ae 	b.w	404ece <_svfprintf_r+0x232>
  405d72:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405d74:	9312      	str	r3, [sp, #72]	; 0x48
  405d76:	461a      	mov	r2, r3
  405d78:	3303      	adds	r3, #3
  405d7a:	db04      	blt.n	405d86 <_svfprintf_r+0x10ea>
  405d7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405d7e:	4619      	mov	r1, r3
  405d80:	4291      	cmp	r1, r2
  405d82:	f6bf af17 	bge.w	405bb4 <_svfprintf_r+0xf18>
  405d86:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405d88:	3b02      	subs	r3, #2
  405d8a:	9311      	str	r3, [sp, #68]	; 0x44
  405d8c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  405d90:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  405d94:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405d96:	3b01      	subs	r3, #1
  405d98:	2b00      	cmp	r3, #0
  405d9a:	931f      	str	r3, [sp, #124]	; 0x7c
  405d9c:	bfbd      	ittte	lt
  405d9e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  405da0:	f1c3 0301 	rsblt	r3, r3, #1
  405da4:	222d      	movlt	r2, #45	; 0x2d
  405da6:	222b      	movge	r2, #43	; 0x2b
  405da8:	2b09      	cmp	r3, #9
  405daa:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  405dae:	f340 8116 	ble.w	405fde <_svfprintf_r+0x1342>
  405db2:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  405db6:	4620      	mov	r0, r4
  405db8:	4dab      	ldr	r5, [pc, #684]	; (406068 <_svfprintf_r+0x13cc>)
  405dba:	e000      	b.n	405dbe <_svfprintf_r+0x1122>
  405dbc:	4610      	mov	r0, r2
  405dbe:	fb85 1203 	smull	r1, r2, r5, r3
  405dc2:	17d9      	asrs	r1, r3, #31
  405dc4:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  405dc8:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  405dcc:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  405dd0:	3230      	adds	r2, #48	; 0x30
  405dd2:	2909      	cmp	r1, #9
  405dd4:	f800 2c01 	strb.w	r2, [r0, #-1]
  405dd8:	460b      	mov	r3, r1
  405dda:	f100 32ff 	add.w	r2, r0, #4294967295
  405dde:	dced      	bgt.n	405dbc <_svfprintf_r+0x1120>
  405de0:	3330      	adds	r3, #48	; 0x30
  405de2:	3802      	subs	r0, #2
  405de4:	b2d9      	uxtb	r1, r3
  405de6:	4284      	cmp	r4, r0
  405de8:	f802 1c01 	strb.w	r1, [r2, #-1]
  405dec:	f240 8165 	bls.w	4060ba <_svfprintf_r+0x141e>
  405df0:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  405df4:	4613      	mov	r3, r2
  405df6:	e001      	b.n	405dfc <_svfprintf_r+0x1160>
  405df8:	f813 1b01 	ldrb.w	r1, [r3], #1
  405dfc:	f800 1b01 	strb.w	r1, [r0], #1
  405e00:	42a3      	cmp	r3, r4
  405e02:	d1f9      	bne.n	405df8 <_svfprintf_r+0x115c>
  405e04:	3301      	adds	r3, #1
  405e06:	1a9b      	subs	r3, r3, r2
  405e08:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  405e0c:	4413      	add	r3, r2
  405e0e:	aa21      	add	r2, sp, #132	; 0x84
  405e10:	1a9b      	subs	r3, r3, r2
  405e12:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  405e14:	931b      	str	r3, [sp, #108]	; 0x6c
  405e16:	2a01      	cmp	r2, #1
  405e18:	4413      	add	r3, r2
  405e1a:	930e      	str	r3, [sp, #56]	; 0x38
  405e1c:	f340 8119 	ble.w	406052 <_svfprintf_r+0x13b6>
  405e20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405e22:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405e24:	4413      	add	r3, r2
  405e26:	930e      	str	r3, [sp, #56]	; 0x38
  405e28:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405e2c:	9308      	str	r3, [sp, #32]
  405e2e:	2300      	movs	r3, #0
  405e30:	9312      	str	r3, [sp, #72]	; 0x48
  405e32:	e6cf      	b.n	405bd4 <_svfprintf_r+0xf38>
  405e34:	aa25      	add	r2, sp, #148	; 0x94
  405e36:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405e38:	980c      	ldr	r0, [sp, #48]	; 0x30
  405e3a:	f003 fb51 	bl	4094e0 <__ssprint_r>
  405e3e:	2800      	cmp	r0, #0
  405e40:	f47e affe 	bne.w	404e40 <_svfprintf_r+0x1a4>
  405e44:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405e46:	46c8      	mov	r8, r9
  405e48:	e4d7      	b.n	4057fa <_svfprintf_r+0xb5e>
  405e4a:	4623      	mov	r3, r4
  405e4c:	e6a2      	b.n	405b94 <_svfprintf_r+0xef8>
  405e4e:	aa25      	add	r2, sp, #148	; 0x94
  405e50:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405e52:	980c      	ldr	r0, [sp, #48]	; 0x30
  405e54:	f003 fb44 	bl	4094e0 <__ssprint_r>
  405e58:	2800      	cmp	r0, #0
  405e5a:	f47e aff1 	bne.w	404e40 <_svfprintf_r+0x1a4>
  405e5e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  405e60:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405e62:	46c8      	mov	r8, r9
  405e64:	e5ae      	b.n	4059c4 <_svfprintf_r+0xd28>
  405e66:	aa25      	add	r2, sp, #148	; 0x94
  405e68:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405e6a:	980c      	ldr	r0, [sp, #48]	; 0x30
  405e6c:	f003 fb38 	bl	4094e0 <__ssprint_r>
  405e70:	2800      	cmp	r0, #0
  405e72:	f47e afe5 	bne.w	404e40 <_svfprintf_r+0x1a4>
  405e76:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  405e78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405e7a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405e7c:	1a9a      	subs	r2, r3, r2
  405e7e:	46c8      	mov	r8, r9
  405e80:	e5b8      	b.n	4059f4 <_svfprintf_r+0xd58>
  405e82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405e84:	9612      	str	r6, [sp, #72]	; 0x48
  405e86:	2b06      	cmp	r3, #6
  405e88:	bf28      	it	cs
  405e8a:	2306      	movcs	r3, #6
  405e8c:	960a      	str	r6, [sp, #40]	; 0x28
  405e8e:	4637      	mov	r7, r6
  405e90:	9308      	str	r3, [sp, #32]
  405e92:	950f      	str	r5, [sp, #60]	; 0x3c
  405e94:	f8cd b01c 	str.w	fp, [sp, #28]
  405e98:	930e      	str	r3, [sp, #56]	; 0x38
  405e9a:	4e74      	ldr	r6, [pc, #464]	; (40606c <_svfprintf_r+0x13d0>)
  405e9c:	f7ff b816 	b.w	404ecc <_svfprintf_r+0x230>
  405ea0:	a823      	add	r0, sp, #140	; 0x8c
  405ea2:	a920      	add	r1, sp, #128	; 0x80
  405ea4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  405ea6:	9004      	str	r0, [sp, #16]
  405ea8:	9103      	str	r1, [sp, #12]
  405eaa:	a81f      	add	r0, sp, #124	; 0x7c
  405eac:	2103      	movs	r1, #3
  405eae:	9002      	str	r0, [sp, #8]
  405eb0:	9a08      	ldr	r2, [sp, #32]
  405eb2:	9501      	str	r5, [sp, #4]
  405eb4:	463b      	mov	r3, r7
  405eb6:	9100      	str	r1, [sp, #0]
  405eb8:	980c      	ldr	r0, [sp, #48]	; 0x30
  405eba:	f001 f8f1 	bl	4070a0 <_dtoa_r>
  405ebe:	4606      	mov	r6, r0
  405ec0:	1944      	adds	r4, r0, r5
  405ec2:	e72b      	b.n	405d1c <_svfprintf_r+0x1080>
  405ec4:	2306      	movs	r3, #6
  405ec6:	930a      	str	r3, [sp, #40]	; 0x28
  405ec8:	e61d      	b.n	405b06 <_svfprintf_r+0xe6a>
  405eca:	272d      	movs	r7, #45	; 0x2d
  405ecc:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  405ed0:	f7ff bacd 	b.w	40546e <_svfprintf_r+0x7d2>
  405ed4:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405ed6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405ed8:	4413      	add	r3, r2
  405eda:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405edc:	930e      	str	r3, [sp, #56]	; 0x38
  405ede:	2a00      	cmp	r2, #0
  405ee0:	f340 80b0 	ble.w	406044 <_svfprintf_r+0x13a8>
  405ee4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405ee8:	9308      	str	r3, [sp, #32]
  405eea:	2367      	movs	r3, #103	; 0x67
  405eec:	9311      	str	r3, [sp, #68]	; 0x44
  405eee:	e671      	b.n	405bd4 <_svfprintf_r+0xf38>
  405ef0:	2b00      	cmp	r3, #0
  405ef2:	f340 80c3 	ble.w	40607c <_svfprintf_r+0x13e0>
  405ef6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405ef8:	2a00      	cmp	r2, #0
  405efa:	f040 8099 	bne.w	406030 <_svfprintf_r+0x1394>
  405efe:	f01b 0f01 	tst.w	fp, #1
  405f02:	f040 8095 	bne.w	406030 <_svfprintf_r+0x1394>
  405f06:	9308      	str	r3, [sp, #32]
  405f08:	930e      	str	r3, [sp, #56]	; 0x38
  405f0a:	e663      	b.n	405bd4 <_svfprintf_r+0xf38>
  405f0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405f0e:	9308      	str	r3, [sp, #32]
  405f10:	930e      	str	r3, [sp, #56]	; 0x38
  405f12:	900a      	str	r0, [sp, #40]	; 0x28
  405f14:	950f      	str	r5, [sp, #60]	; 0x3c
  405f16:	f8cd b01c 	str.w	fp, [sp, #28]
  405f1a:	9012      	str	r0, [sp, #72]	; 0x48
  405f1c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405f20:	f7fe bfd4 	b.w	404ecc <_svfprintf_r+0x230>
  405f24:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405f26:	2b47      	cmp	r3, #71	; 0x47
  405f28:	f47f ae20 	bne.w	405b6c <_svfprintf_r+0xed0>
  405f2c:	f01b 0f01 	tst.w	fp, #1
  405f30:	f47f aeee 	bne.w	405d10 <_svfprintf_r+0x1074>
  405f34:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405f36:	1b9b      	subs	r3, r3, r6
  405f38:	9313      	str	r3, [sp, #76]	; 0x4c
  405f3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405f3c:	2b47      	cmp	r3, #71	; 0x47
  405f3e:	f43f af18 	beq.w	405d72 <_svfprintf_r+0x10d6>
  405f42:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405f44:	9312      	str	r3, [sp, #72]	; 0x48
  405f46:	e721      	b.n	405d8c <_svfprintf_r+0x10f0>
  405f48:	424f      	negs	r7, r1
  405f4a:	3110      	adds	r1, #16
  405f4c:	4d48      	ldr	r5, [pc, #288]	; (406070 <_svfprintf_r+0x13d4>)
  405f4e:	da2f      	bge.n	405fb0 <_svfprintf_r+0x1314>
  405f50:	2410      	movs	r4, #16
  405f52:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  405f56:	e004      	b.n	405f62 <_svfprintf_r+0x12c6>
  405f58:	f108 0808 	add.w	r8, r8, #8
  405f5c:	3f10      	subs	r7, #16
  405f5e:	2f10      	cmp	r7, #16
  405f60:	dd26      	ble.n	405fb0 <_svfprintf_r+0x1314>
  405f62:	3301      	adds	r3, #1
  405f64:	3210      	adds	r2, #16
  405f66:	2b07      	cmp	r3, #7
  405f68:	9227      	str	r2, [sp, #156]	; 0x9c
  405f6a:	9326      	str	r3, [sp, #152]	; 0x98
  405f6c:	f8c8 5000 	str.w	r5, [r8]
  405f70:	f8c8 4004 	str.w	r4, [r8, #4]
  405f74:	ddf0      	ble.n	405f58 <_svfprintf_r+0x12bc>
  405f76:	aa25      	add	r2, sp, #148	; 0x94
  405f78:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405f7a:	4658      	mov	r0, fp
  405f7c:	f003 fab0 	bl	4094e0 <__ssprint_r>
  405f80:	2800      	cmp	r0, #0
  405f82:	f47e af5d 	bne.w	404e40 <_svfprintf_r+0x1a4>
  405f86:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405f88:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405f8a:	46c8      	mov	r8, r9
  405f8c:	e7e6      	b.n	405f5c <_svfprintf_r+0x12c0>
  405f8e:	aa25      	add	r2, sp, #148	; 0x94
  405f90:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405f92:	980c      	ldr	r0, [sp, #48]	; 0x30
  405f94:	f003 faa4 	bl	4094e0 <__ssprint_r>
  405f98:	2800      	cmp	r0, #0
  405f9a:	f47e af51 	bne.w	404e40 <_svfprintf_r+0x1a4>
  405f9e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  405fa0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405fa2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405fa4:	46c8      	mov	r8, r9
  405fa6:	e667      	b.n	405c78 <_svfprintf_r+0xfdc>
  405fa8:	2000      	movs	r0, #0
  405faa:	900a      	str	r0, [sp, #40]	; 0x28
  405fac:	f7fe bed0 	b.w	404d50 <_svfprintf_r+0xb4>
  405fb0:	3301      	adds	r3, #1
  405fb2:	443a      	add	r2, r7
  405fb4:	2b07      	cmp	r3, #7
  405fb6:	e888 00a0 	stmia.w	r8, {r5, r7}
  405fba:	9227      	str	r2, [sp, #156]	; 0x9c
  405fbc:	9326      	str	r3, [sp, #152]	; 0x98
  405fbe:	f108 0808 	add.w	r8, r8, #8
  405fc2:	f77f ae5c 	ble.w	405c7e <_svfprintf_r+0xfe2>
  405fc6:	aa25      	add	r2, sp, #148	; 0x94
  405fc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405fca:	980c      	ldr	r0, [sp, #48]	; 0x30
  405fcc:	f003 fa88 	bl	4094e0 <__ssprint_r>
  405fd0:	2800      	cmp	r0, #0
  405fd2:	f47e af35 	bne.w	404e40 <_svfprintf_r+0x1a4>
  405fd6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405fd8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405fda:	46c8      	mov	r8, r9
  405fdc:	e64f      	b.n	405c7e <_svfprintf_r+0xfe2>
  405fde:	3330      	adds	r3, #48	; 0x30
  405fe0:	2230      	movs	r2, #48	; 0x30
  405fe2:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  405fe6:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  405fea:	ab22      	add	r3, sp, #136	; 0x88
  405fec:	e70f      	b.n	405e0e <_svfprintf_r+0x1172>
  405fee:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405ff0:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405ff2:	4413      	add	r3, r2
  405ff4:	930e      	str	r3, [sp, #56]	; 0x38
  405ff6:	e775      	b.n	405ee4 <_svfprintf_r+0x1248>
  405ff8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405ffa:	e5cb      	b.n	405b94 <_svfprintf_r+0xef8>
  405ffc:	9b14      	ldr	r3, [sp, #80]	; 0x50
  405ffe:	4e1d      	ldr	r6, [pc, #116]	; (406074 <_svfprintf_r+0x13d8>)
  406000:	2b00      	cmp	r3, #0
  406002:	bfb6      	itet	lt
  406004:	272d      	movlt	r7, #45	; 0x2d
  406006:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  40600a:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  40600e:	4b1a      	ldr	r3, [pc, #104]	; (406078 <_svfprintf_r+0x13dc>)
  406010:	f7ff ba2f 	b.w	405472 <_svfprintf_r+0x7d6>
  406014:	9a16      	ldr	r2, [sp, #88]	; 0x58
  406016:	9808      	ldr	r0, [sp, #32]
  406018:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40601a:	4639      	mov	r1, r7
  40601c:	f004 f8fc 	bl	40a218 <__aeabi_dcmpeq>
  406020:	2800      	cmp	r0, #0
  406022:	f47f ae7f 	bne.w	405d24 <_svfprintf_r+0x1088>
  406026:	f1c5 0501 	rsb	r5, r5, #1
  40602a:	951f      	str	r5, [sp, #124]	; 0x7c
  40602c:	442c      	add	r4, r5
  40602e:	e59e      	b.n	405b6e <_svfprintf_r+0xed2>
  406030:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406032:	9a19      	ldr	r2, [sp, #100]	; 0x64
  406034:	4413      	add	r3, r2
  406036:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  406038:	441a      	add	r2, r3
  40603a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40603e:	920e      	str	r2, [sp, #56]	; 0x38
  406040:	9308      	str	r3, [sp, #32]
  406042:	e5c7      	b.n	405bd4 <_svfprintf_r+0xf38>
  406044:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406046:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406048:	f1c3 0301 	rsb	r3, r3, #1
  40604c:	441a      	add	r2, r3
  40604e:	4613      	mov	r3, r2
  406050:	e7d0      	b.n	405ff4 <_svfprintf_r+0x1358>
  406052:	f01b 0301 	ands.w	r3, fp, #1
  406056:	9312      	str	r3, [sp, #72]	; 0x48
  406058:	f47f aee2 	bne.w	405e20 <_svfprintf_r+0x1184>
  40605c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40605e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  406062:	9308      	str	r3, [sp, #32]
  406064:	e5b6      	b.n	405bd4 <_svfprintf_r+0xf38>
  406066:	bf00      	nop
  406068:	66666667 	.word	0x66666667
  40606c:	0040a758 	.word	0x0040a758
  406070:	0040a774 	.word	0x0040a774
  406074:	0040a72c 	.word	0x0040a72c
  406078:	0040a728 	.word	0x0040a728
  40607c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40607e:	b913      	cbnz	r3, 406086 <_svfprintf_r+0x13ea>
  406080:	f01b 0f01 	tst.w	fp, #1
  406084:	d002      	beq.n	40608c <_svfprintf_r+0x13f0>
  406086:	9b19      	ldr	r3, [sp, #100]	; 0x64
  406088:	3301      	adds	r3, #1
  40608a:	e7d4      	b.n	406036 <_svfprintf_r+0x139a>
  40608c:	2301      	movs	r3, #1
  40608e:	e73a      	b.n	405f06 <_svfprintf_r+0x126a>
  406090:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  406092:	f89a 3001 	ldrb.w	r3, [sl, #1]
  406096:	6828      	ldr	r0, [r5, #0]
  406098:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  40609c:	900a      	str	r0, [sp, #40]	; 0x28
  40609e:	4628      	mov	r0, r5
  4060a0:	3004      	adds	r0, #4
  4060a2:	46a2      	mov	sl, r4
  4060a4:	900f      	str	r0, [sp, #60]	; 0x3c
  4060a6:	f7fe be51 	b.w	404d4c <_svfprintf_r+0xb0>
  4060aa:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4060ae:	f7ff b867 	b.w	405180 <_svfprintf_r+0x4e4>
  4060b2:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4060b6:	f7ff ba15 	b.w	4054e4 <_svfprintf_r+0x848>
  4060ba:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  4060be:	e6a6      	b.n	405e0e <_svfprintf_r+0x1172>
  4060c0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4060c4:	f7ff b8eb 	b.w	40529e <_svfprintf_r+0x602>
  4060c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4060ca:	230c      	movs	r3, #12
  4060cc:	6013      	str	r3, [r2, #0]
  4060ce:	f04f 33ff 	mov.w	r3, #4294967295
  4060d2:	9309      	str	r3, [sp, #36]	; 0x24
  4060d4:	f7fe bebd 	b.w	404e52 <_svfprintf_r+0x1b6>
  4060d8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4060dc:	f7ff b99a 	b.w	405414 <_svfprintf_r+0x778>
  4060e0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4060e4:	f7ff b976 	b.w	4053d4 <_svfprintf_r+0x738>
  4060e8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4060ec:	f7ff b959 	b.w	4053a2 <_svfprintf_r+0x706>
  4060f0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4060f4:	f7ff b912 	b.w	40531c <_svfprintf_r+0x680>

004060f8 <__sprint_r.part.0>:
  4060f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4060fc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4060fe:	049c      	lsls	r4, r3, #18
  406100:	4693      	mov	fp, r2
  406102:	d52f      	bpl.n	406164 <__sprint_r.part.0+0x6c>
  406104:	6893      	ldr	r3, [r2, #8]
  406106:	6812      	ldr	r2, [r2, #0]
  406108:	b353      	cbz	r3, 406160 <__sprint_r.part.0+0x68>
  40610a:	460e      	mov	r6, r1
  40610c:	4607      	mov	r7, r0
  40610e:	f102 0908 	add.w	r9, r2, #8
  406112:	e919 0420 	ldmdb	r9, {r5, sl}
  406116:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40611a:	d017      	beq.n	40614c <__sprint_r.part.0+0x54>
  40611c:	3d04      	subs	r5, #4
  40611e:	2400      	movs	r4, #0
  406120:	e001      	b.n	406126 <__sprint_r.part.0+0x2e>
  406122:	45a0      	cmp	r8, r4
  406124:	d010      	beq.n	406148 <__sprint_r.part.0+0x50>
  406126:	4632      	mov	r2, r6
  406128:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40612c:	4638      	mov	r0, r7
  40612e:	f002 f87b 	bl	408228 <_fputwc_r>
  406132:	1c43      	adds	r3, r0, #1
  406134:	f104 0401 	add.w	r4, r4, #1
  406138:	d1f3      	bne.n	406122 <__sprint_r.part.0+0x2a>
  40613a:	2300      	movs	r3, #0
  40613c:	f8cb 3008 	str.w	r3, [fp, #8]
  406140:	f8cb 3004 	str.w	r3, [fp, #4]
  406144:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406148:	f8db 3008 	ldr.w	r3, [fp, #8]
  40614c:	f02a 0a03 	bic.w	sl, sl, #3
  406150:	eba3 030a 	sub.w	r3, r3, sl
  406154:	f8cb 3008 	str.w	r3, [fp, #8]
  406158:	f109 0908 	add.w	r9, r9, #8
  40615c:	2b00      	cmp	r3, #0
  40615e:	d1d8      	bne.n	406112 <__sprint_r.part.0+0x1a>
  406160:	2000      	movs	r0, #0
  406162:	e7ea      	b.n	40613a <__sprint_r.part.0+0x42>
  406164:	f002 f9ca 	bl	4084fc <__sfvwrite_r>
  406168:	2300      	movs	r3, #0
  40616a:	f8cb 3008 	str.w	r3, [fp, #8]
  40616e:	f8cb 3004 	str.w	r3, [fp, #4]
  406172:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406176:	bf00      	nop

00406178 <_vfiprintf_r>:
  406178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40617c:	b0ad      	sub	sp, #180	; 0xb4
  40617e:	461d      	mov	r5, r3
  406180:	468b      	mov	fp, r1
  406182:	4690      	mov	r8, r2
  406184:	9307      	str	r3, [sp, #28]
  406186:	9006      	str	r0, [sp, #24]
  406188:	b118      	cbz	r0, 406192 <_vfiprintf_r+0x1a>
  40618a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40618c:	2b00      	cmp	r3, #0
  40618e:	f000 80f3 	beq.w	406378 <_vfiprintf_r+0x200>
  406192:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406196:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40619a:	07df      	lsls	r7, r3, #31
  40619c:	b281      	uxth	r1, r0
  40619e:	d402      	bmi.n	4061a6 <_vfiprintf_r+0x2e>
  4061a0:	058e      	lsls	r6, r1, #22
  4061a2:	f140 80fc 	bpl.w	40639e <_vfiprintf_r+0x226>
  4061a6:	048c      	lsls	r4, r1, #18
  4061a8:	d40a      	bmi.n	4061c0 <_vfiprintf_r+0x48>
  4061aa:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4061ae:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  4061b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4061b6:	f8ab 100c 	strh.w	r1, [fp, #12]
  4061ba:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  4061be:	b289      	uxth	r1, r1
  4061c0:	0708      	lsls	r0, r1, #28
  4061c2:	f140 80b3 	bpl.w	40632c <_vfiprintf_r+0x1b4>
  4061c6:	f8db 3010 	ldr.w	r3, [fp, #16]
  4061ca:	2b00      	cmp	r3, #0
  4061cc:	f000 80ae 	beq.w	40632c <_vfiprintf_r+0x1b4>
  4061d0:	f001 031a 	and.w	r3, r1, #26
  4061d4:	2b0a      	cmp	r3, #10
  4061d6:	f000 80b5 	beq.w	406344 <_vfiprintf_r+0x1cc>
  4061da:	2300      	movs	r3, #0
  4061dc:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  4061e0:	930b      	str	r3, [sp, #44]	; 0x2c
  4061e2:	9311      	str	r3, [sp, #68]	; 0x44
  4061e4:	9310      	str	r3, [sp, #64]	; 0x40
  4061e6:	9303      	str	r3, [sp, #12]
  4061e8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  4061ec:	46ca      	mov	sl, r9
  4061ee:	f8cd b010 	str.w	fp, [sp, #16]
  4061f2:	f898 3000 	ldrb.w	r3, [r8]
  4061f6:	4644      	mov	r4, r8
  4061f8:	b1fb      	cbz	r3, 40623a <_vfiprintf_r+0xc2>
  4061fa:	2b25      	cmp	r3, #37	; 0x25
  4061fc:	d102      	bne.n	406204 <_vfiprintf_r+0x8c>
  4061fe:	e01c      	b.n	40623a <_vfiprintf_r+0xc2>
  406200:	2b25      	cmp	r3, #37	; 0x25
  406202:	d003      	beq.n	40620c <_vfiprintf_r+0x94>
  406204:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  406208:	2b00      	cmp	r3, #0
  40620a:	d1f9      	bne.n	406200 <_vfiprintf_r+0x88>
  40620c:	eba4 0508 	sub.w	r5, r4, r8
  406210:	b19d      	cbz	r5, 40623a <_vfiprintf_r+0xc2>
  406212:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406214:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406216:	f8ca 8000 	str.w	r8, [sl]
  40621a:	3301      	adds	r3, #1
  40621c:	442a      	add	r2, r5
  40621e:	2b07      	cmp	r3, #7
  406220:	f8ca 5004 	str.w	r5, [sl, #4]
  406224:	9211      	str	r2, [sp, #68]	; 0x44
  406226:	9310      	str	r3, [sp, #64]	; 0x40
  406228:	dd7a      	ble.n	406320 <_vfiprintf_r+0x1a8>
  40622a:	2a00      	cmp	r2, #0
  40622c:	f040 84b0 	bne.w	406b90 <_vfiprintf_r+0xa18>
  406230:	9b03      	ldr	r3, [sp, #12]
  406232:	9210      	str	r2, [sp, #64]	; 0x40
  406234:	442b      	add	r3, r5
  406236:	46ca      	mov	sl, r9
  406238:	9303      	str	r3, [sp, #12]
  40623a:	7823      	ldrb	r3, [r4, #0]
  40623c:	2b00      	cmp	r3, #0
  40623e:	f000 83e0 	beq.w	406a02 <_vfiprintf_r+0x88a>
  406242:	2000      	movs	r0, #0
  406244:	f04f 0300 	mov.w	r3, #0
  406248:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  40624c:	f104 0801 	add.w	r8, r4, #1
  406250:	7862      	ldrb	r2, [r4, #1]
  406252:	4605      	mov	r5, r0
  406254:	4606      	mov	r6, r0
  406256:	4603      	mov	r3, r0
  406258:	f04f 34ff 	mov.w	r4, #4294967295
  40625c:	f108 0801 	add.w	r8, r8, #1
  406260:	f1a2 0120 	sub.w	r1, r2, #32
  406264:	2958      	cmp	r1, #88	; 0x58
  406266:	f200 82de 	bhi.w	406826 <_vfiprintf_r+0x6ae>
  40626a:	e8df f011 	tbh	[pc, r1, lsl #1]
  40626e:	0221      	.short	0x0221
  406270:	02dc02dc 	.word	0x02dc02dc
  406274:	02dc0229 	.word	0x02dc0229
  406278:	02dc02dc 	.word	0x02dc02dc
  40627c:	02dc02dc 	.word	0x02dc02dc
  406280:	028902dc 	.word	0x028902dc
  406284:	02dc0295 	.word	0x02dc0295
  406288:	02bd00a2 	.word	0x02bd00a2
  40628c:	019f02dc 	.word	0x019f02dc
  406290:	01a401a4 	.word	0x01a401a4
  406294:	01a401a4 	.word	0x01a401a4
  406298:	01a401a4 	.word	0x01a401a4
  40629c:	01a401a4 	.word	0x01a401a4
  4062a0:	02dc01a4 	.word	0x02dc01a4
  4062a4:	02dc02dc 	.word	0x02dc02dc
  4062a8:	02dc02dc 	.word	0x02dc02dc
  4062ac:	02dc02dc 	.word	0x02dc02dc
  4062b0:	02dc02dc 	.word	0x02dc02dc
  4062b4:	01b202dc 	.word	0x01b202dc
  4062b8:	02dc02dc 	.word	0x02dc02dc
  4062bc:	02dc02dc 	.word	0x02dc02dc
  4062c0:	02dc02dc 	.word	0x02dc02dc
  4062c4:	02dc02dc 	.word	0x02dc02dc
  4062c8:	02dc02dc 	.word	0x02dc02dc
  4062cc:	02dc0197 	.word	0x02dc0197
  4062d0:	02dc02dc 	.word	0x02dc02dc
  4062d4:	02dc02dc 	.word	0x02dc02dc
  4062d8:	02dc019b 	.word	0x02dc019b
  4062dc:	025302dc 	.word	0x025302dc
  4062e0:	02dc02dc 	.word	0x02dc02dc
  4062e4:	02dc02dc 	.word	0x02dc02dc
  4062e8:	02dc02dc 	.word	0x02dc02dc
  4062ec:	02dc02dc 	.word	0x02dc02dc
  4062f0:	02dc02dc 	.word	0x02dc02dc
  4062f4:	021b025a 	.word	0x021b025a
  4062f8:	02dc02dc 	.word	0x02dc02dc
  4062fc:	026e02dc 	.word	0x026e02dc
  406300:	02dc021b 	.word	0x02dc021b
  406304:	027302dc 	.word	0x027302dc
  406308:	01f502dc 	.word	0x01f502dc
  40630c:	02090182 	.word	0x02090182
  406310:	02dc02d7 	.word	0x02dc02d7
  406314:	02dc029a 	.word	0x02dc029a
  406318:	02dc00a7 	.word	0x02dc00a7
  40631c:	022e02dc 	.word	0x022e02dc
  406320:	f10a 0a08 	add.w	sl, sl, #8
  406324:	9b03      	ldr	r3, [sp, #12]
  406326:	442b      	add	r3, r5
  406328:	9303      	str	r3, [sp, #12]
  40632a:	e786      	b.n	40623a <_vfiprintf_r+0xc2>
  40632c:	4659      	mov	r1, fp
  40632e:	9806      	ldr	r0, [sp, #24]
  406330:	f000 fdac 	bl	406e8c <__swsetup_r>
  406334:	bb18      	cbnz	r0, 40637e <_vfiprintf_r+0x206>
  406336:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40633a:	f001 031a 	and.w	r3, r1, #26
  40633e:	2b0a      	cmp	r3, #10
  406340:	f47f af4b 	bne.w	4061da <_vfiprintf_r+0x62>
  406344:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  406348:	2b00      	cmp	r3, #0
  40634a:	f6ff af46 	blt.w	4061da <_vfiprintf_r+0x62>
  40634e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406352:	07db      	lsls	r3, r3, #31
  406354:	d405      	bmi.n	406362 <_vfiprintf_r+0x1ea>
  406356:	058f      	lsls	r7, r1, #22
  406358:	d403      	bmi.n	406362 <_vfiprintf_r+0x1ea>
  40635a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40635e:	f002 fa91 	bl	408884 <__retarget_lock_release_recursive>
  406362:	462b      	mov	r3, r5
  406364:	4642      	mov	r2, r8
  406366:	4659      	mov	r1, fp
  406368:	9806      	ldr	r0, [sp, #24]
  40636a:	f000 fd4d 	bl	406e08 <__sbprintf>
  40636e:	9003      	str	r0, [sp, #12]
  406370:	9803      	ldr	r0, [sp, #12]
  406372:	b02d      	add	sp, #180	; 0xb4
  406374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406378:	f001 feb4 	bl	4080e4 <__sinit>
  40637c:	e709      	b.n	406192 <_vfiprintf_r+0x1a>
  40637e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406382:	07d9      	lsls	r1, r3, #31
  406384:	d404      	bmi.n	406390 <_vfiprintf_r+0x218>
  406386:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40638a:	059a      	lsls	r2, r3, #22
  40638c:	f140 84aa 	bpl.w	406ce4 <_vfiprintf_r+0xb6c>
  406390:	f04f 33ff 	mov.w	r3, #4294967295
  406394:	9303      	str	r3, [sp, #12]
  406396:	9803      	ldr	r0, [sp, #12]
  406398:	b02d      	add	sp, #180	; 0xb4
  40639a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40639e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4063a2:	f002 fa6d 	bl	408880 <__retarget_lock_acquire_recursive>
  4063a6:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4063aa:	b281      	uxth	r1, r0
  4063ac:	e6fb      	b.n	4061a6 <_vfiprintf_r+0x2e>
  4063ae:	4276      	negs	r6, r6
  4063b0:	9207      	str	r2, [sp, #28]
  4063b2:	f043 0304 	orr.w	r3, r3, #4
  4063b6:	f898 2000 	ldrb.w	r2, [r8]
  4063ba:	e74f      	b.n	40625c <_vfiprintf_r+0xe4>
  4063bc:	9608      	str	r6, [sp, #32]
  4063be:	069e      	lsls	r6, r3, #26
  4063c0:	f100 8450 	bmi.w	406c64 <_vfiprintf_r+0xaec>
  4063c4:	9907      	ldr	r1, [sp, #28]
  4063c6:	06dd      	lsls	r5, r3, #27
  4063c8:	460a      	mov	r2, r1
  4063ca:	f100 83ef 	bmi.w	406bac <_vfiprintf_r+0xa34>
  4063ce:	0658      	lsls	r0, r3, #25
  4063d0:	f140 83ec 	bpl.w	406bac <_vfiprintf_r+0xa34>
  4063d4:	880e      	ldrh	r6, [r1, #0]
  4063d6:	3104      	adds	r1, #4
  4063d8:	2700      	movs	r7, #0
  4063da:	2201      	movs	r2, #1
  4063dc:	9107      	str	r1, [sp, #28]
  4063de:	f04f 0100 	mov.w	r1, #0
  4063e2:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  4063e6:	2500      	movs	r5, #0
  4063e8:	1c61      	adds	r1, r4, #1
  4063ea:	f000 8116 	beq.w	40661a <_vfiprintf_r+0x4a2>
  4063ee:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  4063f2:	9102      	str	r1, [sp, #8]
  4063f4:	ea56 0107 	orrs.w	r1, r6, r7
  4063f8:	f040 8114 	bne.w	406624 <_vfiprintf_r+0x4ac>
  4063fc:	2c00      	cmp	r4, #0
  4063fe:	f040 835c 	bne.w	406aba <_vfiprintf_r+0x942>
  406402:	2a00      	cmp	r2, #0
  406404:	f040 83b7 	bne.w	406b76 <_vfiprintf_r+0x9fe>
  406408:	f013 0301 	ands.w	r3, r3, #1
  40640c:	9305      	str	r3, [sp, #20]
  40640e:	f000 8457 	beq.w	406cc0 <_vfiprintf_r+0xb48>
  406412:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  406416:	2330      	movs	r3, #48	; 0x30
  406418:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  40641c:	9b05      	ldr	r3, [sp, #20]
  40641e:	42a3      	cmp	r3, r4
  406420:	bfb8      	it	lt
  406422:	4623      	movlt	r3, r4
  406424:	9301      	str	r3, [sp, #4]
  406426:	b10d      	cbz	r5, 40642c <_vfiprintf_r+0x2b4>
  406428:	3301      	adds	r3, #1
  40642a:	9301      	str	r3, [sp, #4]
  40642c:	9b02      	ldr	r3, [sp, #8]
  40642e:	f013 0302 	ands.w	r3, r3, #2
  406432:	9309      	str	r3, [sp, #36]	; 0x24
  406434:	d002      	beq.n	40643c <_vfiprintf_r+0x2c4>
  406436:	9b01      	ldr	r3, [sp, #4]
  406438:	3302      	adds	r3, #2
  40643a:	9301      	str	r3, [sp, #4]
  40643c:	9b02      	ldr	r3, [sp, #8]
  40643e:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  406442:	930a      	str	r3, [sp, #40]	; 0x28
  406444:	f040 8217 	bne.w	406876 <_vfiprintf_r+0x6fe>
  406448:	9b08      	ldr	r3, [sp, #32]
  40644a:	9a01      	ldr	r2, [sp, #4]
  40644c:	1a9d      	subs	r5, r3, r2
  40644e:	2d00      	cmp	r5, #0
  406450:	f340 8211 	ble.w	406876 <_vfiprintf_r+0x6fe>
  406454:	2d10      	cmp	r5, #16
  406456:	f340 8490 	ble.w	406d7a <_vfiprintf_r+0xc02>
  40645a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40645c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40645e:	4ec4      	ldr	r6, [pc, #784]	; (406770 <_vfiprintf_r+0x5f8>)
  406460:	46d6      	mov	lr, sl
  406462:	2710      	movs	r7, #16
  406464:	46a2      	mov	sl, r4
  406466:	4619      	mov	r1, r3
  406468:	9c06      	ldr	r4, [sp, #24]
  40646a:	e007      	b.n	40647c <_vfiprintf_r+0x304>
  40646c:	f101 0c02 	add.w	ip, r1, #2
  406470:	f10e 0e08 	add.w	lr, lr, #8
  406474:	4601      	mov	r1, r0
  406476:	3d10      	subs	r5, #16
  406478:	2d10      	cmp	r5, #16
  40647a:	dd11      	ble.n	4064a0 <_vfiprintf_r+0x328>
  40647c:	1c48      	adds	r0, r1, #1
  40647e:	3210      	adds	r2, #16
  406480:	2807      	cmp	r0, #7
  406482:	9211      	str	r2, [sp, #68]	; 0x44
  406484:	e88e 00c0 	stmia.w	lr, {r6, r7}
  406488:	9010      	str	r0, [sp, #64]	; 0x40
  40648a:	ddef      	ble.n	40646c <_vfiprintf_r+0x2f4>
  40648c:	2a00      	cmp	r2, #0
  40648e:	f040 81e4 	bne.w	40685a <_vfiprintf_r+0x6e2>
  406492:	3d10      	subs	r5, #16
  406494:	2d10      	cmp	r5, #16
  406496:	4611      	mov	r1, r2
  406498:	f04f 0c01 	mov.w	ip, #1
  40649c:	46ce      	mov	lr, r9
  40649e:	dced      	bgt.n	40647c <_vfiprintf_r+0x304>
  4064a0:	4654      	mov	r4, sl
  4064a2:	4661      	mov	r1, ip
  4064a4:	46f2      	mov	sl, lr
  4064a6:	442a      	add	r2, r5
  4064a8:	2907      	cmp	r1, #7
  4064aa:	9211      	str	r2, [sp, #68]	; 0x44
  4064ac:	f8ca 6000 	str.w	r6, [sl]
  4064b0:	f8ca 5004 	str.w	r5, [sl, #4]
  4064b4:	9110      	str	r1, [sp, #64]	; 0x40
  4064b6:	f300 82ec 	bgt.w	406a92 <_vfiprintf_r+0x91a>
  4064ba:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4064be:	f10a 0a08 	add.w	sl, sl, #8
  4064c2:	1c48      	adds	r0, r1, #1
  4064c4:	2d00      	cmp	r5, #0
  4064c6:	f040 81de 	bne.w	406886 <_vfiprintf_r+0x70e>
  4064ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4064cc:	2b00      	cmp	r3, #0
  4064ce:	f000 81f8 	beq.w	4068c2 <_vfiprintf_r+0x74a>
  4064d2:	3202      	adds	r2, #2
  4064d4:	a90e      	add	r1, sp, #56	; 0x38
  4064d6:	2302      	movs	r3, #2
  4064d8:	2807      	cmp	r0, #7
  4064da:	9211      	str	r2, [sp, #68]	; 0x44
  4064dc:	9010      	str	r0, [sp, #64]	; 0x40
  4064de:	e88a 000a 	stmia.w	sl, {r1, r3}
  4064e2:	f340 81ea 	ble.w	4068ba <_vfiprintf_r+0x742>
  4064e6:	2a00      	cmp	r2, #0
  4064e8:	f040 838c 	bne.w	406c04 <_vfiprintf_r+0xa8c>
  4064ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4064ee:	2b80      	cmp	r3, #128	; 0x80
  4064f0:	f04f 0001 	mov.w	r0, #1
  4064f4:	4611      	mov	r1, r2
  4064f6:	46ca      	mov	sl, r9
  4064f8:	f040 81e7 	bne.w	4068ca <_vfiprintf_r+0x752>
  4064fc:	9b08      	ldr	r3, [sp, #32]
  4064fe:	9d01      	ldr	r5, [sp, #4]
  406500:	1b5e      	subs	r6, r3, r5
  406502:	2e00      	cmp	r6, #0
  406504:	f340 81e1 	ble.w	4068ca <_vfiprintf_r+0x752>
  406508:	2e10      	cmp	r6, #16
  40650a:	4d9a      	ldr	r5, [pc, #616]	; (406774 <_vfiprintf_r+0x5fc>)
  40650c:	f340 8450 	ble.w	406db0 <_vfiprintf_r+0xc38>
  406510:	46d4      	mov	ip, sl
  406512:	2710      	movs	r7, #16
  406514:	46a2      	mov	sl, r4
  406516:	9c06      	ldr	r4, [sp, #24]
  406518:	e007      	b.n	40652a <_vfiprintf_r+0x3b2>
  40651a:	f101 0e02 	add.w	lr, r1, #2
  40651e:	f10c 0c08 	add.w	ip, ip, #8
  406522:	4601      	mov	r1, r0
  406524:	3e10      	subs	r6, #16
  406526:	2e10      	cmp	r6, #16
  406528:	dd11      	ble.n	40654e <_vfiprintf_r+0x3d6>
  40652a:	1c48      	adds	r0, r1, #1
  40652c:	3210      	adds	r2, #16
  40652e:	2807      	cmp	r0, #7
  406530:	9211      	str	r2, [sp, #68]	; 0x44
  406532:	e88c 00a0 	stmia.w	ip, {r5, r7}
  406536:	9010      	str	r0, [sp, #64]	; 0x40
  406538:	ddef      	ble.n	40651a <_vfiprintf_r+0x3a2>
  40653a:	2a00      	cmp	r2, #0
  40653c:	f040 829d 	bne.w	406a7a <_vfiprintf_r+0x902>
  406540:	3e10      	subs	r6, #16
  406542:	2e10      	cmp	r6, #16
  406544:	f04f 0e01 	mov.w	lr, #1
  406548:	4611      	mov	r1, r2
  40654a:	46cc      	mov	ip, r9
  40654c:	dced      	bgt.n	40652a <_vfiprintf_r+0x3b2>
  40654e:	4654      	mov	r4, sl
  406550:	46e2      	mov	sl, ip
  406552:	4432      	add	r2, r6
  406554:	f1be 0f07 	cmp.w	lr, #7
  406558:	9211      	str	r2, [sp, #68]	; 0x44
  40655a:	e88a 0060 	stmia.w	sl, {r5, r6}
  40655e:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  406562:	f300 8369 	bgt.w	406c38 <_vfiprintf_r+0xac0>
  406566:	f10a 0a08 	add.w	sl, sl, #8
  40656a:	f10e 0001 	add.w	r0, lr, #1
  40656e:	4671      	mov	r1, lr
  406570:	e1ab      	b.n	4068ca <_vfiprintf_r+0x752>
  406572:	9608      	str	r6, [sp, #32]
  406574:	f013 0220 	ands.w	r2, r3, #32
  406578:	f040 838c 	bne.w	406c94 <_vfiprintf_r+0xb1c>
  40657c:	f013 0110 	ands.w	r1, r3, #16
  406580:	f040 831a 	bne.w	406bb8 <_vfiprintf_r+0xa40>
  406584:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  406588:	f000 8316 	beq.w	406bb8 <_vfiprintf_r+0xa40>
  40658c:	9807      	ldr	r0, [sp, #28]
  40658e:	460a      	mov	r2, r1
  406590:	4601      	mov	r1, r0
  406592:	3104      	adds	r1, #4
  406594:	8806      	ldrh	r6, [r0, #0]
  406596:	9107      	str	r1, [sp, #28]
  406598:	2700      	movs	r7, #0
  40659a:	e720      	b.n	4063de <_vfiprintf_r+0x266>
  40659c:	9608      	str	r6, [sp, #32]
  40659e:	f043 0310 	orr.w	r3, r3, #16
  4065a2:	e7e7      	b.n	406574 <_vfiprintf_r+0x3fc>
  4065a4:	9608      	str	r6, [sp, #32]
  4065a6:	f043 0310 	orr.w	r3, r3, #16
  4065aa:	e708      	b.n	4063be <_vfiprintf_r+0x246>
  4065ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4065b0:	f898 2000 	ldrb.w	r2, [r8]
  4065b4:	e652      	b.n	40625c <_vfiprintf_r+0xe4>
  4065b6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4065ba:	2600      	movs	r6, #0
  4065bc:	f818 2b01 	ldrb.w	r2, [r8], #1
  4065c0:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4065c4:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  4065c8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4065cc:	2909      	cmp	r1, #9
  4065ce:	d9f5      	bls.n	4065bc <_vfiprintf_r+0x444>
  4065d0:	e646      	b.n	406260 <_vfiprintf_r+0xe8>
  4065d2:	9608      	str	r6, [sp, #32]
  4065d4:	2800      	cmp	r0, #0
  4065d6:	f040 8408 	bne.w	406dea <_vfiprintf_r+0xc72>
  4065da:	f043 0310 	orr.w	r3, r3, #16
  4065de:	069e      	lsls	r6, r3, #26
  4065e0:	f100 834c 	bmi.w	406c7c <_vfiprintf_r+0xb04>
  4065e4:	06dd      	lsls	r5, r3, #27
  4065e6:	f100 82f3 	bmi.w	406bd0 <_vfiprintf_r+0xa58>
  4065ea:	0658      	lsls	r0, r3, #25
  4065ec:	f140 82f0 	bpl.w	406bd0 <_vfiprintf_r+0xa58>
  4065f0:	9d07      	ldr	r5, [sp, #28]
  4065f2:	f9b5 6000 	ldrsh.w	r6, [r5]
  4065f6:	462a      	mov	r2, r5
  4065f8:	17f7      	asrs	r7, r6, #31
  4065fa:	3204      	adds	r2, #4
  4065fc:	4630      	mov	r0, r6
  4065fe:	4639      	mov	r1, r7
  406600:	9207      	str	r2, [sp, #28]
  406602:	2800      	cmp	r0, #0
  406604:	f171 0200 	sbcs.w	r2, r1, #0
  406608:	f2c0 835d 	blt.w	406cc6 <_vfiprintf_r+0xb4e>
  40660c:	1c61      	adds	r1, r4, #1
  40660e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406612:	f04f 0201 	mov.w	r2, #1
  406616:	f47f aeea 	bne.w	4063ee <_vfiprintf_r+0x276>
  40661a:	ea56 0107 	orrs.w	r1, r6, r7
  40661e:	f000 824d 	beq.w	406abc <_vfiprintf_r+0x944>
  406622:	9302      	str	r3, [sp, #8]
  406624:	2a01      	cmp	r2, #1
  406626:	f000 828c 	beq.w	406b42 <_vfiprintf_r+0x9ca>
  40662a:	2a02      	cmp	r2, #2
  40662c:	f040 825c 	bne.w	406ae8 <_vfiprintf_r+0x970>
  406630:	980b      	ldr	r0, [sp, #44]	; 0x2c
  406632:	46cb      	mov	fp, r9
  406634:	0933      	lsrs	r3, r6, #4
  406636:	f006 010f 	and.w	r1, r6, #15
  40663a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  40663e:	093a      	lsrs	r2, r7, #4
  406640:	461e      	mov	r6, r3
  406642:	4617      	mov	r7, r2
  406644:	5c43      	ldrb	r3, [r0, r1]
  406646:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40664a:	ea56 0307 	orrs.w	r3, r6, r7
  40664e:	d1f1      	bne.n	406634 <_vfiprintf_r+0x4bc>
  406650:	eba9 030b 	sub.w	r3, r9, fp
  406654:	9305      	str	r3, [sp, #20]
  406656:	e6e1      	b.n	40641c <_vfiprintf_r+0x2a4>
  406658:	2800      	cmp	r0, #0
  40665a:	f040 83c0 	bne.w	406dde <_vfiprintf_r+0xc66>
  40665e:	0699      	lsls	r1, r3, #26
  406660:	f100 8367 	bmi.w	406d32 <_vfiprintf_r+0xbba>
  406664:	06da      	lsls	r2, r3, #27
  406666:	f100 80f1 	bmi.w	40684c <_vfiprintf_r+0x6d4>
  40666a:	065b      	lsls	r3, r3, #25
  40666c:	f140 80ee 	bpl.w	40684c <_vfiprintf_r+0x6d4>
  406670:	9a07      	ldr	r2, [sp, #28]
  406672:	6813      	ldr	r3, [r2, #0]
  406674:	3204      	adds	r2, #4
  406676:	9207      	str	r2, [sp, #28]
  406678:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  40667c:	801a      	strh	r2, [r3, #0]
  40667e:	e5b8      	b.n	4061f2 <_vfiprintf_r+0x7a>
  406680:	9807      	ldr	r0, [sp, #28]
  406682:	4a3d      	ldr	r2, [pc, #244]	; (406778 <_vfiprintf_r+0x600>)
  406684:	9608      	str	r6, [sp, #32]
  406686:	920b      	str	r2, [sp, #44]	; 0x2c
  406688:	6806      	ldr	r6, [r0, #0]
  40668a:	2278      	movs	r2, #120	; 0x78
  40668c:	2130      	movs	r1, #48	; 0x30
  40668e:	3004      	adds	r0, #4
  406690:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  406694:	f043 0302 	orr.w	r3, r3, #2
  406698:	9007      	str	r0, [sp, #28]
  40669a:	2700      	movs	r7, #0
  40669c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4066a0:	2202      	movs	r2, #2
  4066a2:	e69c      	b.n	4063de <_vfiprintf_r+0x266>
  4066a4:	9608      	str	r6, [sp, #32]
  4066a6:	2800      	cmp	r0, #0
  4066a8:	d099      	beq.n	4065de <_vfiprintf_r+0x466>
  4066aa:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4066ae:	e796      	b.n	4065de <_vfiprintf_r+0x466>
  4066b0:	f898 2000 	ldrb.w	r2, [r8]
  4066b4:	2d00      	cmp	r5, #0
  4066b6:	f47f add1 	bne.w	40625c <_vfiprintf_r+0xe4>
  4066ba:	2001      	movs	r0, #1
  4066bc:	2520      	movs	r5, #32
  4066be:	e5cd      	b.n	40625c <_vfiprintf_r+0xe4>
  4066c0:	f043 0301 	orr.w	r3, r3, #1
  4066c4:	f898 2000 	ldrb.w	r2, [r8]
  4066c8:	e5c8      	b.n	40625c <_vfiprintf_r+0xe4>
  4066ca:	9608      	str	r6, [sp, #32]
  4066cc:	2800      	cmp	r0, #0
  4066ce:	f040 8393 	bne.w	406df8 <_vfiprintf_r+0xc80>
  4066d2:	4929      	ldr	r1, [pc, #164]	; (406778 <_vfiprintf_r+0x600>)
  4066d4:	910b      	str	r1, [sp, #44]	; 0x2c
  4066d6:	069f      	lsls	r7, r3, #26
  4066d8:	f100 82e8 	bmi.w	406cac <_vfiprintf_r+0xb34>
  4066dc:	9807      	ldr	r0, [sp, #28]
  4066de:	06de      	lsls	r6, r3, #27
  4066e0:	4601      	mov	r1, r0
  4066e2:	f100 8270 	bmi.w	406bc6 <_vfiprintf_r+0xa4e>
  4066e6:	065d      	lsls	r5, r3, #25
  4066e8:	f140 826d 	bpl.w	406bc6 <_vfiprintf_r+0xa4e>
  4066ec:	3104      	adds	r1, #4
  4066ee:	8806      	ldrh	r6, [r0, #0]
  4066f0:	9107      	str	r1, [sp, #28]
  4066f2:	2700      	movs	r7, #0
  4066f4:	07d8      	lsls	r0, r3, #31
  4066f6:	f140 8222 	bpl.w	406b3e <_vfiprintf_r+0x9c6>
  4066fa:	ea56 0107 	orrs.w	r1, r6, r7
  4066fe:	f000 821e 	beq.w	406b3e <_vfiprintf_r+0x9c6>
  406702:	2130      	movs	r1, #48	; 0x30
  406704:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  406708:	f043 0302 	orr.w	r3, r3, #2
  40670c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  406710:	2202      	movs	r2, #2
  406712:	e664      	b.n	4063de <_vfiprintf_r+0x266>
  406714:	9608      	str	r6, [sp, #32]
  406716:	2800      	cmp	r0, #0
  406718:	f040 836b 	bne.w	406df2 <_vfiprintf_r+0xc7a>
  40671c:	4917      	ldr	r1, [pc, #92]	; (40677c <_vfiprintf_r+0x604>)
  40671e:	910b      	str	r1, [sp, #44]	; 0x2c
  406720:	e7d9      	b.n	4066d6 <_vfiprintf_r+0x55e>
  406722:	9907      	ldr	r1, [sp, #28]
  406724:	9608      	str	r6, [sp, #32]
  406726:	680a      	ldr	r2, [r1, #0]
  406728:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40672c:	f04f 0000 	mov.w	r0, #0
  406730:	460a      	mov	r2, r1
  406732:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  406736:	3204      	adds	r2, #4
  406738:	2001      	movs	r0, #1
  40673a:	9001      	str	r0, [sp, #4]
  40673c:	9207      	str	r2, [sp, #28]
  40673e:	9005      	str	r0, [sp, #20]
  406740:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  406744:	9302      	str	r3, [sp, #8]
  406746:	2400      	movs	r4, #0
  406748:	e670      	b.n	40642c <_vfiprintf_r+0x2b4>
  40674a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40674e:	f898 2000 	ldrb.w	r2, [r8]
  406752:	e583      	b.n	40625c <_vfiprintf_r+0xe4>
  406754:	f898 2000 	ldrb.w	r2, [r8]
  406758:	2a6c      	cmp	r2, #108	; 0x6c
  40675a:	bf03      	ittte	eq
  40675c:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  406760:	f043 0320 	orreq.w	r3, r3, #32
  406764:	f108 0801 	addeq.w	r8, r8, #1
  406768:	f043 0310 	orrne.w	r3, r3, #16
  40676c:	e576      	b.n	40625c <_vfiprintf_r+0xe4>
  40676e:	bf00      	nop
  406770:	0040a784 	.word	0x0040a784
  406774:	0040a794 	.word	0x0040a794
  406778:	0040a744 	.word	0x0040a744
  40677c:	0040a730 	.word	0x0040a730
  406780:	9907      	ldr	r1, [sp, #28]
  406782:	680e      	ldr	r6, [r1, #0]
  406784:	460a      	mov	r2, r1
  406786:	2e00      	cmp	r6, #0
  406788:	f102 0204 	add.w	r2, r2, #4
  40678c:	f6ff ae0f 	blt.w	4063ae <_vfiprintf_r+0x236>
  406790:	9207      	str	r2, [sp, #28]
  406792:	f898 2000 	ldrb.w	r2, [r8]
  406796:	e561      	b.n	40625c <_vfiprintf_r+0xe4>
  406798:	f898 2000 	ldrb.w	r2, [r8]
  40679c:	2001      	movs	r0, #1
  40679e:	252b      	movs	r5, #43	; 0x2b
  4067a0:	e55c      	b.n	40625c <_vfiprintf_r+0xe4>
  4067a2:	9907      	ldr	r1, [sp, #28]
  4067a4:	9608      	str	r6, [sp, #32]
  4067a6:	f8d1 b000 	ldr.w	fp, [r1]
  4067aa:	f04f 0200 	mov.w	r2, #0
  4067ae:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4067b2:	1d0e      	adds	r6, r1, #4
  4067b4:	f1bb 0f00 	cmp.w	fp, #0
  4067b8:	f000 82e5 	beq.w	406d86 <_vfiprintf_r+0xc0e>
  4067bc:	1c67      	adds	r7, r4, #1
  4067be:	f000 82c4 	beq.w	406d4a <_vfiprintf_r+0xbd2>
  4067c2:	4622      	mov	r2, r4
  4067c4:	2100      	movs	r1, #0
  4067c6:	4658      	mov	r0, fp
  4067c8:	9301      	str	r3, [sp, #4]
  4067ca:	f002 f8f1 	bl	4089b0 <memchr>
  4067ce:	9b01      	ldr	r3, [sp, #4]
  4067d0:	2800      	cmp	r0, #0
  4067d2:	f000 82e5 	beq.w	406da0 <_vfiprintf_r+0xc28>
  4067d6:	eba0 020b 	sub.w	r2, r0, fp
  4067da:	9205      	str	r2, [sp, #20]
  4067dc:	9607      	str	r6, [sp, #28]
  4067de:	9302      	str	r3, [sp, #8]
  4067e0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4067e4:	2400      	movs	r4, #0
  4067e6:	e619      	b.n	40641c <_vfiprintf_r+0x2a4>
  4067e8:	f898 2000 	ldrb.w	r2, [r8]
  4067ec:	2a2a      	cmp	r2, #42	; 0x2a
  4067ee:	f108 0701 	add.w	r7, r8, #1
  4067f2:	f000 82e9 	beq.w	406dc8 <_vfiprintf_r+0xc50>
  4067f6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4067fa:	2909      	cmp	r1, #9
  4067fc:	46b8      	mov	r8, r7
  4067fe:	f04f 0400 	mov.w	r4, #0
  406802:	f63f ad2d 	bhi.w	406260 <_vfiprintf_r+0xe8>
  406806:	f818 2b01 	ldrb.w	r2, [r8], #1
  40680a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40680e:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  406812:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  406816:	2909      	cmp	r1, #9
  406818:	d9f5      	bls.n	406806 <_vfiprintf_r+0x68e>
  40681a:	e521      	b.n	406260 <_vfiprintf_r+0xe8>
  40681c:	f043 0320 	orr.w	r3, r3, #32
  406820:	f898 2000 	ldrb.w	r2, [r8]
  406824:	e51a      	b.n	40625c <_vfiprintf_r+0xe4>
  406826:	9608      	str	r6, [sp, #32]
  406828:	2800      	cmp	r0, #0
  40682a:	f040 82db 	bne.w	406de4 <_vfiprintf_r+0xc6c>
  40682e:	2a00      	cmp	r2, #0
  406830:	f000 80e7 	beq.w	406a02 <_vfiprintf_r+0x88a>
  406834:	2101      	movs	r1, #1
  406836:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40683a:	f04f 0200 	mov.w	r2, #0
  40683e:	9101      	str	r1, [sp, #4]
  406840:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  406844:	9105      	str	r1, [sp, #20]
  406846:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40684a:	e77b      	b.n	406744 <_vfiprintf_r+0x5cc>
  40684c:	9a07      	ldr	r2, [sp, #28]
  40684e:	6813      	ldr	r3, [r2, #0]
  406850:	3204      	adds	r2, #4
  406852:	9207      	str	r2, [sp, #28]
  406854:	9a03      	ldr	r2, [sp, #12]
  406856:	601a      	str	r2, [r3, #0]
  406858:	e4cb      	b.n	4061f2 <_vfiprintf_r+0x7a>
  40685a:	aa0f      	add	r2, sp, #60	; 0x3c
  40685c:	9904      	ldr	r1, [sp, #16]
  40685e:	4620      	mov	r0, r4
  406860:	f7ff fc4a 	bl	4060f8 <__sprint_r.part.0>
  406864:	2800      	cmp	r0, #0
  406866:	f040 8139 	bne.w	406adc <_vfiprintf_r+0x964>
  40686a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40686c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40686e:	f101 0c01 	add.w	ip, r1, #1
  406872:	46ce      	mov	lr, r9
  406874:	e5ff      	b.n	406476 <_vfiprintf_r+0x2fe>
  406876:	9910      	ldr	r1, [sp, #64]	; 0x40
  406878:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40687a:	1c48      	adds	r0, r1, #1
  40687c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406880:	2d00      	cmp	r5, #0
  406882:	f43f ae22 	beq.w	4064ca <_vfiprintf_r+0x352>
  406886:	3201      	adds	r2, #1
  406888:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  40688c:	2101      	movs	r1, #1
  40688e:	2807      	cmp	r0, #7
  406890:	9211      	str	r2, [sp, #68]	; 0x44
  406892:	9010      	str	r0, [sp, #64]	; 0x40
  406894:	f8ca 5000 	str.w	r5, [sl]
  406898:	f8ca 1004 	str.w	r1, [sl, #4]
  40689c:	f340 8108 	ble.w	406ab0 <_vfiprintf_r+0x938>
  4068a0:	2a00      	cmp	r2, #0
  4068a2:	f040 81bc 	bne.w	406c1e <_vfiprintf_r+0xaa6>
  4068a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4068a8:	2b00      	cmp	r3, #0
  4068aa:	f43f ae1f 	beq.w	4064ec <_vfiprintf_r+0x374>
  4068ae:	ab0e      	add	r3, sp, #56	; 0x38
  4068b0:	2202      	movs	r2, #2
  4068b2:	4608      	mov	r0, r1
  4068b4:	931c      	str	r3, [sp, #112]	; 0x70
  4068b6:	921d      	str	r2, [sp, #116]	; 0x74
  4068b8:	46ca      	mov	sl, r9
  4068ba:	4601      	mov	r1, r0
  4068bc:	f10a 0a08 	add.w	sl, sl, #8
  4068c0:	3001      	adds	r0, #1
  4068c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4068c4:	2b80      	cmp	r3, #128	; 0x80
  4068c6:	f43f ae19 	beq.w	4064fc <_vfiprintf_r+0x384>
  4068ca:	9b05      	ldr	r3, [sp, #20]
  4068cc:	1ae4      	subs	r4, r4, r3
  4068ce:	2c00      	cmp	r4, #0
  4068d0:	dd2e      	ble.n	406930 <_vfiprintf_r+0x7b8>
  4068d2:	2c10      	cmp	r4, #16
  4068d4:	4db3      	ldr	r5, [pc, #716]	; (406ba4 <_vfiprintf_r+0xa2c>)
  4068d6:	dd1e      	ble.n	406916 <_vfiprintf_r+0x79e>
  4068d8:	46d6      	mov	lr, sl
  4068da:	2610      	movs	r6, #16
  4068dc:	9f06      	ldr	r7, [sp, #24]
  4068de:	f8dd a010 	ldr.w	sl, [sp, #16]
  4068e2:	e006      	b.n	4068f2 <_vfiprintf_r+0x77a>
  4068e4:	1c88      	adds	r0, r1, #2
  4068e6:	f10e 0e08 	add.w	lr, lr, #8
  4068ea:	4619      	mov	r1, r3
  4068ec:	3c10      	subs	r4, #16
  4068ee:	2c10      	cmp	r4, #16
  4068f0:	dd10      	ble.n	406914 <_vfiprintf_r+0x79c>
  4068f2:	1c4b      	adds	r3, r1, #1
  4068f4:	3210      	adds	r2, #16
  4068f6:	2b07      	cmp	r3, #7
  4068f8:	9211      	str	r2, [sp, #68]	; 0x44
  4068fa:	e88e 0060 	stmia.w	lr, {r5, r6}
  4068fe:	9310      	str	r3, [sp, #64]	; 0x40
  406900:	ddf0      	ble.n	4068e4 <_vfiprintf_r+0x76c>
  406902:	2a00      	cmp	r2, #0
  406904:	d165      	bne.n	4069d2 <_vfiprintf_r+0x85a>
  406906:	3c10      	subs	r4, #16
  406908:	2c10      	cmp	r4, #16
  40690a:	f04f 0001 	mov.w	r0, #1
  40690e:	4611      	mov	r1, r2
  406910:	46ce      	mov	lr, r9
  406912:	dcee      	bgt.n	4068f2 <_vfiprintf_r+0x77a>
  406914:	46f2      	mov	sl, lr
  406916:	4422      	add	r2, r4
  406918:	2807      	cmp	r0, #7
  40691a:	9211      	str	r2, [sp, #68]	; 0x44
  40691c:	f8ca 5000 	str.w	r5, [sl]
  406920:	f8ca 4004 	str.w	r4, [sl, #4]
  406924:	9010      	str	r0, [sp, #64]	; 0x40
  406926:	f300 8085 	bgt.w	406a34 <_vfiprintf_r+0x8bc>
  40692a:	f10a 0a08 	add.w	sl, sl, #8
  40692e:	3001      	adds	r0, #1
  406930:	9905      	ldr	r1, [sp, #20]
  406932:	f8ca b000 	str.w	fp, [sl]
  406936:	440a      	add	r2, r1
  406938:	2807      	cmp	r0, #7
  40693a:	9211      	str	r2, [sp, #68]	; 0x44
  40693c:	f8ca 1004 	str.w	r1, [sl, #4]
  406940:	9010      	str	r0, [sp, #64]	; 0x40
  406942:	f340 8082 	ble.w	406a4a <_vfiprintf_r+0x8d2>
  406946:	2a00      	cmp	r2, #0
  406948:	f040 8118 	bne.w	406b7c <_vfiprintf_r+0xa04>
  40694c:	9b02      	ldr	r3, [sp, #8]
  40694e:	9210      	str	r2, [sp, #64]	; 0x40
  406950:	0758      	lsls	r0, r3, #29
  406952:	d535      	bpl.n	4069c0 <_vfiprintf_r+0x848>
  406954:	9b08      	ldr	r3, [sp, #32]
  406956:	9901      	ldr	r1, [sp, #4]
  406958:	1a5c      	subs	r4, r3, r1
  40695a:	2c00      	cmp	r4, #0
  40695c:	f340 80e7 	ble.w	406b2e <_vfiprintf_r+0x9b6>
  406960:	46ca      	mov	sl, r9
  406962:	2c10      	cmp	r4, #16
  406964:	f340 8218 	ble.w	406d98 <_vfiprintf_r+0xc20>
  406968:	9910      	ldr	r1, [sp, #64]	; 0x40
  40696a:	4e8f      	ldr	r6, [pc, #572]	; (406ba8 <_vfiprintf_r+0xa30>)
  40696c:	9f06      	ldr	r7, [sp, #24]
  40696e:	f8dd b010 	ldr.w	fp, [sp, #16]
  406972:	2510      	movs	r5, #16
  406974:	e006      	b.n	406984 <_vfiprintf_r+0x80c>
  406976:	1c88      	adds	r0, r1, #2
  406978:	f10a 0a08 	add.w	sl, sl, #8
  40697c:	4619      	mov	r1, r3
  40697e:	3c10      	subs	r4, #16
  406980:	2c10      	cmp	r4, #16
  406982:	dd11      	ble.n	4069a8 <_vfiprintf_r+0x830>
  406984:	1c4b      	adds	r3, r1, #1
  406986:	3210      	adds	r2, #16
  406988:	2b07      	cmp	r3, #7
  40698a:	9211      	str	r2, [sp, #68]	; 0x44
  40698c:	f8ca 6000 	str.w	r6, [sl]
  406990:	f8ca 5004 	str.w	r5, [sl, #4]
  406994:	9310      	str	r3, [sp, #64]	; 0x40
  406996:	ddee      	ble.n	406976 <_vfiprintf_r+0x7fe>
  406998:	bb42      	cbnz	r2, 4069ec <_vfiprintf_r+0x874>
  40699a:	3c10      	subs	r4, #16
  40699c:	2c10      	cmp	r4, #16
  40699e:	f04f 0001 	mov.w	r0, #1
  4069a2:	4611      	mov	r1, r2
  4069a4:	46ca      	mov	sl, r9
  4069a6:	dced      	bgt.n	406984 <_vfiprintf_r+0x80c>
  4069a8:	4422      	add	r2, r4
  4069aa:	2807      	cmp	r0, #7
  4069ac:	9211      	str	r2, [sp, #68]	; 0x44
  4069ae:	f8ca 6000 	str.w	r6, [sl]
  4069b2:	f8ca 4004 	str.w	r4, [sl, #4]
  4069b6:	9010      	str	r0, [sp, #64]	; 0x40
  4069b8:	dd51      	ble.n	406a5e <_vfiprintf_r+0x8e6>
  4069ba:	2a00      	cmp	r2, #0
  4069bc:	f040 819b 	bne.w	406cf6 <_vfiprintf_r+0xb7e>
  4069c0:	9b03      	ldr	r3, [sp, #12]
  4069c2:	9a08      	ldr	r2, [sp, #32]
  4069c4:	9901      	ldr	r1, [sp, #4]
  4069c6:	428a      	cmp	r2, r1
  4069c8:	bfac      	ite	ge
  4069ca:	189b      	addge	r3, r3, r2
  4069cc:	185b      	addlt	r3, r3, r1
  4069ce:	9303      	str	r3, [sp, #12]
  4069d0:	e04e      	b.n	406a70 <_vfiprintf_r+0x8f8>
  4069d2:	aa0f      	add	r2, sp, #60	; 0x3c
  4069d4:	4651      	mov	r1, sl
  4069d6:	4638      	mov	r0, r7
  4069d8:	f7ff fb8e 	bl	4060f8 <__sprint_r.part.0>
  4069dc:	2800      	cmp	r0, #0
  4069de:	f040 813f 	bne.w	406c60 <_vfiprintf_r+0xae8>
  4069e2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4069e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4069e6:	1c48      	adds	r0, r1, #1
  4069e8:	46ce      	mov	lr, r9
  4069ea:	e77f      	b.n	4068ec <_vfiprintf_r+0x774>
  4069ec:	aa0f      	add	r2, sp, #60	; 0x3c
  4069ee:	4659      	mov	r1, fp
  4069f0:	4638      	mov	r0, r7
  4069f2:	f7ff fb81 	bl	4060f8 <__sprint_r.part.0>
  4069f6:	b960      	cbnz	r0, 406a12 <_vfiprintf_r+0x89a>
  4069f8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4069fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4069fc:	1c48      	adds	r0, r1, #1
  4069fe:	46ca      	mov	sl, r9
  406a00:	e7bd      	b.n	40697e <_vfiprintf_r+0x806>
  406a02:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406a04:	f8dd b010 	ldr.w	fp, [sp, #16]
  406a08:	2b00      	cmp	r3, #0
  406a0a:	f040 81d4 	bne.w	406db6 <_vfiprintf_r+0xc3e>
  406a0e:	2300      	movs	r3, #0
  406a10:	9310      	str	r3, [sp, #64]	; 0x40
  406a12:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406a16:	f013 0f01 	tst.w	r3, #1
  406a1a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  406a1e:	d102      	bne.n	406a26 <_vfiprintf_r+0x8ae>
  406a20:	059a      	lsls	r2, r3, #22
  406a22:	f140 80de 	bpl.w	406be2 <_vfiprintf_r+0xa6a>
  406a26:	065b      	lsls	r3, r3, #25
  406a28:	f53f acb2 	bmi.w	406390 <_vfiprintf_r+0x218>
  406a2c:	9803      	ldr	r0, [sp, #12]
  406a2e:	b02d      	add	sp, #180	; 0xb4
  406a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406a34:	2a00      	cmp	r2, #0
  406a36:	f040 8106 	bne.w	406c46 <_vfiprintf_r+0xace>
  406a3a:	9a05      	ldr	r2, [sp, #20]
  406a3c:	921d      	str	r2, [sp, #116]	; 0x74
  406a3e:	2301      	movs	r3, #1
  406a40:	9211      	str	r2, [sp, #68]	; 0x44
  406a42:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  406a46:	9310      	str	r3, [sp, #64]	; 0x40
  406a48:	46ca      	mov	sl, r9
  406a4a:	f10a 0a08 	add.w	sl, sl, #8
  406a4e:	9b02      	ldr	r3, [sp, #8]
  406a50:	0759      	lsls	r1, r3, #29
  406a52:	d504      	bpl.n	406a5e <_vfiprintf_r+0x8e6>
  406a54:	9b08      	ldr	r3, [sp, #32]
  406a56:	9901      	ldr	r1, [sp, #4]
  406a58:	1a5c      	subs	r4, r3, r1
  406a5a:	2c00      	cmp	r4, #0
  406a5c:	dc81      	bgt.n	406962 <_vfiprintf_r+0x7ea>
  406a5e:	9b03      	ldr	r3, [sp, #12]
  406a60:	9908      	ldr	r1, [sp, #32]
  406a62:	9801      	ldr	r0, [sp, #4]
  406a64:	4281      	cmp	r1, r0
  406a66:	bfac      	ite	ge
  406a68:	185b      	addge	r3, r3, r1
  406a6a:	181b      	addlt	r3, r3, r0
  406a6c:	9303      	str	r3, [sp, #12]
  406a6e:	bb72      	cbnz	r2, 406ace <_vfiprintf_r+0x956>
  406a70:	2300      	movs	r3, #0
  406a72:	9310      	str	r3, [sp, #64]	; 0x40
  406a74:	46ca      	mov	sl, r9
  406a76:	f7ff bbbc 	b.w	4061f2 <_vfiprintf_r+0x7a>
  406a7a:	aa0f      	add	r2, sp, #60	; 0x3c
  406a7c:	9904      	ldr	r1, [sp, #16]
  406a7e:	4620      	mov	r0, r4
  406a80:	f7ff fb3a 	bl	4060f8 <__sprint_r.part.0>
  406a84:	bb50      	cbnz	r0, 406adc <_vfiprintf_r+0x964>
  406a86:	9910      	ldr	r1, [sp, #64]	; 0x40
  406a88:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406a8a:	f101 0e01 	add.w	lr, r1, #1
  406a8e:	46cc      	mov	ip, r9
  406a90:	e548      	b.n	406524 <_vfiprintf_r+0x3ac>
  406a92:	2a00      	cmp	r2, #0
  406a94:	f040 8140 	bne.w	406d18 <_vfiprintf_r+0xba0>
  406a98:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  406a9c:	2900      	cmp	r1, #0
  406a9e:	f000 811b 	beq.w	406cd8 <_vfiprintf_r+0xb60>
  406aa2:	2201      	movs	r2, #1
  406aa4:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  406aa8:	4610      	mov	r0, r2
  406aaa:	921d      	str	r2, [sp, #116]	; 0x74
  406aac:	911c      	str	r1, [sp, #112]	; 0x70
  406aae:	46ca      	mov	sl, r9
  406ab0:	4601      	mov	r1, r0
  406ab2:	f10a 0a08 	add.w	sl, sl, #8
  406ab6:	3001      	adds	r0, #1
  406ab8:	e507      	b.n	4064ca <_vfiprintf_r+0x352>
  406aba:	9b02      	ldr	r3, [sp, #8]
  406abc:	2a01      	cmp	r2, #1
  406abe:	f000 8098 	beq.w	406bf2 <_vfiprintf_r+0xa7a>
  406ac2:	2a02      	cmp	r2, #2
  406ac4:	d10d      	bne.n	406ae2 <_vfiprintf_r+0x96a>
  406ac6:	9302      	str	r3, [sp, #8]
  406ac8:	2600      	movs	r6, #0
  406aca:	2700      	movs	r7, #0
  406acc:	e5b0      	b.n	406630 <_vfiprintf_r+0x4b8>
  406ace:	aa0f      	add	r2, sp, #60	; 0x3c
  406ad0:	9904      	ldr	r1, [sp, #16]
  406ad2:	9806      	ldr	r0, [sp, #24]
  406ad4:	f7ff fb10 	bl	4060f8 <__sprint_r.part.0>
  406ad8:	2800      	cmp	r0, #0
  406ada:	d0c9      	beq.n	406a70 <_vfiprintf_r+0x8f8>
  406adc:	f8dd b010 	ldr.w	fp, [sp, #16]
  406ae0:	e797      	b.n	406a12 <_vfiprintf_r+0x89a>
  406ae2:	9302      	str	r3, [sp, #8]
  406ae4:	2600      	movs	r6, #0
  406ae6:	2700      	movs	r7, #0
  406ae8:	4649      	mov	r1, r9
  406aea:	e000      	b.n	406aee <_vfiprintf_r+0x976>
  406aec:	4659      	mov	r1, fp
  406aee:	08f2      	lsrs	r2, r6, #3
  406af0:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  406af4:	08f8      	lsrs	r0, r7, #3
  406af6:	f006 0307 	and.w	r3, r6, #7
  406afa:	4607      	mov	r7, r0
  406afc:	4616      	mov	r6, r2
  406afe:	3330      	adds	r3, #48	; 0x30
  406b00:	ea56 0207 	orrs.w	r2, r6, r7
  406b04:	f801 3c01 	strb.w	r3, [r1, #-1]
  406b08:	f101 3bff 	add.w	fp, r1, #4294967295
  406b0c:	d1ee      	bne.n	406aec <_vfiprintf_r+0x974>
  406b0e:	9a02      	ldr	r2, [sp, #8]
  406b10:	07d6      	lsls	r6, r2, #31
  406b12:	f57f ad9d 	bpl.w	406650 <_vfiprintf_r+0x4d8>
  406b16:	2b30      	cmp	r3, #48	; 0x30
  406b18:	f43f ad9a 	beq.w	406650 <_vfiprintf_r+0x4d8>
  406b1c:	3902      	subs	r1, #2
  406b1e:	2330      	movs	r3, #48	; 0x30
  406b20:	f80b 3c01 	strb.w	r3, [fp, #-1]
  406b24:	eba9 0301 	sub.w	r3, r9, r1
  406b28:	9305      	str	r3, [sp, #20]
  406b2a:	468b      	mov	fp, r1
  406b2c:	e476      	b.n	40641c <_vfiprintf_r+0x2a4>
  406b2e:	9b03      	ldr	r3, [sp, #12]
  406b30:	9a08      	ldr	r2, [sp, #32]
  406b32:	428a      	cmp	r2, r1
  406b34:	bfac      	ite	ge
  406b36:	189b      	addge	r3, r3, r2
  406b38:	185b      	addlt	r3, r3, r1
  406b3a:	9303      	str	r3, [sp, #12]
  406b3c:	e798      	b.n	406a70 <_vfiprintf_r+0x8f8>
  406b3e:	2202      	movs	r2, #2
  406b40:	e44d      	b.n	4063de <_vfiprintf_r+0x266>
  406b42:	2f00      	cmp	r7, #0
  406b44:	bf08      	it	eq
  406b46:	2e0a      	cmpeq	r6, #10
  406b48:	d352      	bcc.n	406bf0 <_vfiprintf_r+0xa78>
  406b4a:	46cb      	mov	fp, r9
  406b4c:	4630      	mov	r0, r6
  406b4e:	4639      	mov	r1, r7
  406b50:	220a      	movs	r2, #10
  406b52:	2300      	movs	r3, #0
  406b54:	f003 fbd0 	bl	40a2f8 <__aeabi_uldivmod>
  406b58:	3230      	adds	r2, #48	; 0x30
  406b5a:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  406b5e:	4630      	mov	r0, r6
  406b60:	4639      	mov	r1, r7
  406b62:	2300      	movs	r3, #0
  406b64:	220a      	movs	r2, #10
  406b66:	f003 fbc7 	bl	40a2f8 <__aeabi_uldivmod>
  406b6a:	4606      	mov	r6, r0
  406b6c:	460f      	mov	r7, r1
  406b6e:	ea56 0307 	orrs.w	r3, r6, r7
  406b72:	d1eb      	bne.n	406b4c <_vfiprintf_r+0x9d4>
  406b74:	e56c      	b.n	406650 <_vfiprintf_r+0x4d8>
  406b76:	9405      	str	r4, [sp, #20]
  406b78:	46cb      	mov	fp, r9
  406b7a:	e44f      	b.n	40641c <_vfiprintf_r+0x2a4>
  406b7c:	aa0f      	add	r2, sp, #60	; 0x3c
  406b7e:	9904      	ldr	r1, [sp, #16]
  406b80:	9806      	ldr	r0, [sp, #24]
  406b82:	f7ff fab9 	bl	4060f8 <__sprint_r.part.0>
  406b86:	2800      	cmp	r0, #0
  406b88:	d1a8      	bne.n	406adc <_vfiprintf_r+0x964>
  406b8a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406b8c:	46ca      	mov	sl, r9
  406b8e:	e75e      	b.n	406a4e <_vfiprintf_r+0x8d6>
  406b90:	aa0f      	add	r2, sp, #60	; 0x3c
  406b92:	9904      	ldr	r1, [sp, #16]
  406b94:	9806      	ldr	r0, [sp, #24]
  406b96:	f7ff faaf 	bl	4060f8 <__sprint_r.part.0>
  406b9a:	2800      	cmp	r0, #0
  406b9c:	d19e      	bne.n	406adc <_vfiprintf_r+0x964>
  406b9e:	46ca      	mov	sl, r9
  406ba0:	f7ff bbc0 	b.w	406324 <_vfiprintf_r+0x1ac>
  406ba4:	0040a794 	.word	0x0040a794
  406ba8:	0040a784 	.word	0x0040a784
  406bac:	3104      	adds	r1, #4
  406bae:	6816      	ldr	r6, [r2, #0]
  406bb0:	9107      	str	r1, [sp, #28]
  406bb2:	2201      	movs	r2, #1
  406bb4:	2700      	movs	r7, #0
  406bb6:	e412      	b.n	4063de <_vfiprintf_r+0x266>
  406bb8:	9807      	ldr	r0, [sp, #28]
  406bba:	4601      	mov	r1, r0
  406bbc:	3104      	adds	r1, #4
  406bbe:	6806      	ldr	r6, [r0, #0]
  406bc0:	9107      	str	r1, [sp, #28]
  406bc2:	2700      	movs	r7, #0
  406bc4:	e40b      	b.n	4063de <_vfiprintf_r+0x266>
  406bc6:	680e      	ldr	r6, [r1, #0]
  406bc8:	3104      	adds	r1, #4
  406bca:	9107      	str	r1, [sp, #28]
  406bcc:	2700      	movs	r7, #0
  406bce:	e591      	b.n	4066f4 <_vfiprintf_r+0x57c>
  406bd0:	9907      	ldr	r1, [sp, #28]
  406bd2:	680e      	ldr	r6, [r1, #0]
  406bd4:	460a      	mov	r2, r1
  406bd6:	17f7      	asrs	r7, r6, #31
  406bd8:	3204      	adds	r2, #4
  406bda:	9207      	str	r2, [sp, #28]
  406bdc:	4630      	mov	r0, r6
  406bde:	4639      	mov	r1, r7
  406be0:	e50f      	b.n	406602 <_vfiprintf_r+0x48a>
  406be2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  406be6:	f001 fe4d 	bl	408884 <__retarget_lock_release_recursive>
  406bea:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  406bee:	e71a      	b.n	406a26 <_vfiprintf_r+0x8ae>
  406bf0:	9b02      	ldr	r3, [sp, #8]
  406bf2:	9302      	str	r3, [sp, #8]
  406bf4:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  406bf8:	3630      	adds	r6, #48	; 0x30
  406bfa:	2301      	movs	r3, #1
  406bfc:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  406c00:	9305      	str	r3, [sp, #20]
  406c02:	e40b      	b.n	40641c <_vfiprintf_r+0x2a4>
  406c04:	aa0f      	add	r2, sp, #60	; 0x3c
  406c06:	9904      	ldr	r1, [sp, #16]
  406c08:	9806      	ldr	r0, [sp, #24]
  406c0a:	f7ff fa75 	bl	4060f8 <__sprint_r.part.0>
  406c0e:	2800      	cmp	r0, #0
  406c10:	f47f af64 	bne.w	406adc <_vfiprintf_r+0x964>
  406c14:	9910      	ldr	r1, [sp, #64]	; 0x40
  406c16:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406c18:	1c48      	adds	r0, r1, #1
  406c1a:	46ca      	mov	sl, r9
  406c1c:	e651      	b.n	4068c2 <_vfiprintf_r+0x74a>
  406c1e:	aa0f      	add	r2, sp, #60	; 0x3c
  406c20:	9904      	ldr	r1, [sp, #16]
  406c22:	9806      	ldr	r0, [sp, #24]
  406c24:	f7ff fa68 	bl	4060f8 <__sprint_r.part.0>
  406c28:	2800      	cmp	r0, #0
  406c2a:	f47f af57 	bne.w	406adc <_vfiprintf_r+0x964>
  406c2e:	9910      	ldr	r1, [sp, #64]	; 0x40
  406c30:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406c32:	1c48      	adds	r0, r1, #1
  406c34:	46ca      	mov	sl, r9
  406c36:	e448      	b.n	4064ca <_vfiprintf_r+0x352>
  406c38:	2a00      	cmp	r2, #0
  406c3a:	f040 8091 	bne.w	406d60 <_vfiprintf_r+0xbe8>
  406c3e:	2001      	movs	r0, #1
  406c40:	4611      	mov	r1, r2
  406c42:	46ca      	mov	sl, r9
  406c44:	e641      	b.n	4068ca <_vfiprintf_r+0x752>
  406c46:	aa0f      	add	r2, sp, #60	; 0x3c
  406c48:	9904      	ldr	r1, [sp, #16]
  406c4a:	9806      	ldr	r0, [sp, #24]
  406c4c:	f7ff fa54 	bl	4060f8 <__sprint_r.part.0>
  406c50:	2800      	cmp	r0, #0
  406c52:	f47f af43 	bne.w	406adc <_vfiprintf_r+0x964>
  406c56:	9810      	ldr	r0, [sp, #64]	; 0x40
  406c58:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406c5a:	3001      	adds	r0, #1
  406c5c:	46ca      	mov	sl, r9
  406c5e:	e667      	b.n	406930 <_vfiprintf_r+0x7b8>
  406c60:	46d3      	mov	fp, sl
  406c62:	e6d6      	b.n	406a12 <_vfiprintf_r+0x89a>
  406c64:	9e07      	ldr	r6, [sp, #28]
  406c66:	3607      	adds	r6, #7
  406c68:	f026 0207 	bic.w	r2, r6, #7
  406c6c:	f102 0108 	add.w	r1, r2, #8
  406c70:	e9d2 6700 	ldrd	r6, r7, [r2]
  406c74:	9107      	str	r1, [sp, #28]
  406c76:	2201      	movs	r2, #1
  406c78:	f7ff bbb1 	b.w	4063de <_vfiprintf_r+0x266>
  406c7c:	9e07      	ldr	r6, [sp, #28]
  406c7e:	3607      	adds	r6, #7
  406c80:	f026 0607 	bic.w	r6, r6, #7
  406c84:	e9d6 0100 	ldrd	r0, r1, [r6]
  406c88:	f106 0208 	add.w	r2, r6, #8
  406c8c:	9207      	str	r2, [sp, #28]
  406c8e:	4606      	mov	r6, r0
  406c90:	460f      	mov	r7, r1
  406c92:	e4b6      	b.n	406602 <_vfiprintf_r+0x48a>
  406c94:	9e07      	ldr	r6, [sp, #28]
  406c96:	3607      	adds	r6, #7
  406c98:	f026 0207 	bic.w	r2, r6, #7
  406c9c:	f102 0108 	add.w	r1, r2, #8
  406ca0:	e9d2 6700 	ldrd	r6, r7, [r2]
  406ca4:	9107      	str	r1, [sp, #28]
  406ca6:	2200      	movs	r2, #0
  406ca8:	f7ff bb99 	b.w	4063de <_vfiprintf_r+0x266>
  406cac:	9e07      	ldr	r6, [sp, #28]
  406cae:	3607      	adds	r6, #7
  406cb0:	f026 0107 	bic.w	r1, r6, #7
  406cb4:	f101 0008 	add.w	r0, r1, #8
  406cb8:	9007      	str	r0, [sp, #28]
  406cba:	e9d1 6700 	ldrd	r6, r7, [r1]
  406cbe:	e519      	b.n	4066f4 <_vfiprintf_r+0x57c>
  406cc0:	46cb      	mov	fp, r9
  406cc2:	f7ff bbab 	b.w	40641c <_vfiprintf_r+0x2a4>
  406cc6:	252d      	movs	r5, #45	; 0x2d
  406cc8:	4276      	negs	r6, r6
  406cca:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  406cce:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406cd2:	2201      	movs	r2, #1
  406cd4:	f7ff bb88 	b.w	4063e8 <_vfiprintf_r+0x270>
  406cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406cda:	b9b3      	cbnz	r3, 406d0a <_vfiprintf_r+0xb92>
  406cdc:	4611      	mov	r1, r2
  406cde:	2001      	movs	r0, #1
  406ce0:	46ca      	mov	sl, r9
  406ce2:	e5f2      	b.n	4068ca <_vfiprintf_r+0x752>
  406ce4:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  406ce8:	f001 fdcc 	bl	408884 <__retarget_lock_release_recursive>
  406cec:	f04f 33ff 	mov.w	r3, #4294967295
  406cf0:	9303      	str	r3, [sp, #12]
  406cf2:	f7ff bb50 	b.w	406396 <_vfiprintf_r+0x21e>
  406cf6:	aa0f      	add	r2, sp, #60	; 0x3c
  406cf8:	9904      	ldr	r1, [sp, #16]
  406cfa:	9806      	ldr	r0, [sp, #24]
  406cfc:	f7ff f9fc 	bl	4060f8 <__sprint_r.part.0>
  406d00:	2800      	cmp	r0, #0
  406d02:	f47f aeeb 	bne.w	406adc <_vfiprintf_r+0x964>
  406d06:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406d08:	e6a9      	b.n	406a5e <_vfiprintf_r+0x8e6>
  406d0a:	ab0e      	add	r3, sp, #56	; 0x38
  406d0c:	2202      	movs	r2, #2
  406d0e:	931c      	str	r3, [sp, #112]	; 0x70
  406d10:	921d      	str	r2, [sp, #116]	; 0x74
  406d12:	2001      	movs	r0, #1
  406d14:	46ca      	mov	sl, r9
  406d16:	e5d0      	b.n	4068ba <_vfiprintf_r+0x742>
  406d18:	aa0f      	add	r2, sp, #60	; 0x3c
  406d1a:	9904      	ldr	r1, [sp, #16]
  406d1c:	9806      	ldr	r0, [sp, #24]
  406d1e:	f7ff f9eb 	bl	4060f8 <__sprint_r.part.0>
  406d22:	2800      	cmp	r0, #0
  406d24:	f47f aeda 	bne.w	406adc <_vfiprintf_r+0x964>
  406d28:	9910      	ldr	r1, [sp, #64]	; 0x40
  406d2a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406d2c:	1c48      	adds	r0, r1, #1
  406d2e:	46ca      	mov	sl, r9
  406d30:	e5a4      	b.n	40687c <_vfiprintf_r+0x704>
  406d32:	9a07      	ldr	r2, [sp, #28]
  406d34:	9903      	ldr	r1, [sp, #12]
  406d36:	6813      	ldr	r3, [r2, #0]
  406d38:	17cd      	asrs	r5, r1, #31
  406d3a:	4608      	mov	r0, r1
  406d3c:	3204      	adds	r2, #4
  406d3e:	4629      	mov	r1, r5
  406d40:	9207      	str	r2, [sp, #28]
  406d42:	e9c3 0100 	strd	r0, r1, [r3]
  406d46:	f7ff ba54 	b.w	4061f2 <_vfiprintf_r+0x7a>
  406d4a:	4658      	mov	r0, fp
  406d4c:	9607      	str	r6, [sp, #28]
  406d4e:	9302      	str	r3, [sp, #8]
  406d50:	f7fd ff36 	bl	404bc0 <strlen>
  406d54:	2400      	movs	r4, #0
  406d56:	9005      	str	r0, [sp, #20]
  406d58:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406d5c:	f7ff bb5e 	b.w	40641c <_vfiprintf_r+0x2a4>
  406d60:	aa0f      	add	r2, sp, #60	; 0x3c
  406d62:	9904      	ldr	r1, [sp, #16]
  406d64:	9806      	ldr	r0, [sp, #24]
  406d66:	f7ff f9c7 	bl	4060f8 <__sprint_r.part.0>
  406d6a:	2800      	cmp	r0, #0
  406d6c:	f47f aeb6 	bne.w	406adc <_vfiprintf_r+0x964>
  406d70:	9910      	ldr	r1, [sp, #64]	; 0x40
  406d72:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406d74:	1c48      	adds	r0, r1, #1
  406d76:	46ca      	mov	sl, r9
  406d78:	e5a7      	b.n	4068ca <_vfiprintf_r+0x752>
  406d7a:	9910      	ldr	r1, [sp, #64]	; 0x40
  406d7c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406d7e:	4e20      	ldr	r6, [pc, #128]	; (406e00 <_vfiprintf_r+0xc88>)
  406d80:	3101      	adds	r1, #1
  406d82:	f7ff bb90 	b.w	4064a6 <_vfiprintf_r+0x32e>
  406d86:	2c06      	cmp	r4, #6
  406d88:	bf28      	it	cs
  406d8a:	2406      	movcs	r4, #6
  406d8c:	9405      	str	r4, [sp, #20]
  406d8e:	9607      	str	r6, [sp, #28]
  406d90:	9401      	str	r4, [sp, #4]
  406d92:	f8df b070 	ldr.w	fp, [pc, #112]	; 406e04 <_vfiprintf_r+0xc8c>
  406d96:	e4d5      	b.n	406744 <_vfiprintf_r+0x5cc>
  406d98:	9810      	ldr	r0, [sp, #64]	; 0x40
  406d9a:	4e19      	ldr	r6, [pc, #100]	; (406e00 <_vfiprintf_r+0xc88>)
  406d9c:	3001      	adds	r0, #1
  406d9e:	e603      	b.n	4069a8 <_vfiprintf_r+0x830>
  406da0:	9405      	str	r4, [sp, #20]
  406da2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406da6:	9607      	str	r6, [sp, #28]
  406da8:	9302      	str	r3, [sp, #8]
  406daa:	4604      	mov	r4, r0
  406dac:	f7ff bb36 	b.w	40641c <_vfiprintf_r+0x2a4>
  406db0:	4686      	mov	lr, r0
  406db2:	f7ff bbce 	b.w	406552 <_vfiprintf_r+0x3da>
  406db6:	9806      	ldr	r0, [sp, #24]
  406db8:	aa0f      	add	r2, sp, #60	; 0x3c
  406dba:	4659      	mov	r1, fp
  406dbc:	f7ff f99c 	bl	4060f8 <__sprint_r.part.0>
  406dc0:	2800      	cmp	r0, #0
  406dc2:	f43f ae24 	beq.w	406a0e <_vfiprintf_r+0x896>
  406dc6:	e624      	b.n	406a12 <_vfiprintf_r+0x89a>
  406dc8:	9907      	ldr	r1, [sp, #28]
  406dca:	f898 2001 	ldrb.w	r2, [r8, #1]
  406dce:	680c      	ldr	r4, [r1, #0]
  406dd0:	3104      	adds	r1, #4
  406dd2:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  406dd6:	46b8      	mov	r8, r7
  406dd8:	9107      	str	r1, [sp, #28]
  406dda:	f7ff ba3f 	b.w	40625c <_vfiprintf_r+0xe4>
  406dde:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406de2:	e43c      	b.n	40665e <_vfiprintf_r+0x4e6>
  406de4:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406de8:	e521      	b.n	40682e <_vfiprintf_r+0x6b6>
  406dea:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406dee:	f7ff bbf4 	b.w	4065da <_vfiprintf_r+0x462>
  406df2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406df6:	e491      	b.n	40671c <_vfiprintf_r+0x5a4>
  406df8:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406dfc:	e469      	b.n	4066d2 <_vfiprintf_r+0x55a>
  406dfe:	bf00      	nop
  406e00:	0040a784 	.word	0x0040a784
  406e04:	0040a758 	.word	0x0040a758

00406e08 <__sbprintf>:
  406e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406e0c:	460c      	mov	r4, r1
  406e0e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  406e12:	8989      	ldrh	r1, [r1, #12]
  406e14:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406e16:	89e5      	ldrh	r5, [r4, #14]
  406e18:	9619      	str	r6, [sp, #100]	; 0x64
  406e1a:	f021 0102 	bic.w	r1, r1, #2
  406e1e:	4606      	mov	r6, r0
  406e20:	69e0      	ldr	r0, [r4, #28]
  406e22:	f8ad 100c 	strh.w	r1, [sp, #12]
  406e26:	4617      	mov	r7, r2
  406e28:	f44f 6180 	mov.w	r1, #1024	; 0x400
  406e2c:	6a62      	ldr	r2, [r4, #36]	; 0x24
  406e2e:	f8ad 500e 	strh.w	r5, [sp, #14]
  406e32:	4698      	mov	r8, r3
  406e34:	ad1a      	add	r5, sp, #104	; 0x68
  406e36:	2300      	movs	r3, #0
  406e38:	9007      	str	r0, [sp, #28]
  406e3a:	a816      	add	r0, sp, #88	; 0x58
  406e3c:	9209      	str	r2, [sp, #36]	; 0x24
  406e3e:	9306      	str	r3, [sp, #24]
  406e40:	9500      	str	r5, [sp, #0]
  406e42:	9504      	str	r5, [sp, #16]
  406e44:	9102      	str	r1, [sp, #8]
  406e46:	9105      	str	r1, [sp, #20]
  406e48:	f001 fd16 	bl	408878 <__retarget_lock_init_recursive>
  406e4c:	4643      	mov	r3, r8
  406e4e:	463a      	mov	r2, r7
  406e50:	4669      	mov	r1, sp
  406e52:	4630      	mov	r0, r6
  406e54:	f7ff f990 	bl	406178 <_vfiprintf_r>
  406e58:	1e05      	subs	r5, r0, #0
  406e5a:	db07      	blt.n	406e6c <__sbprintf+0x64>
  406e5c:	4630      	mov	r0, r6
  406e5e:	4669      	mov	r1, sp
  406e60:	f001 f8e8 	bl	408034 <_fflush_r>
  406e64:	2800      	cmp	r0, #0
  406e66:	bf18      	it	ne
  406e68:	f04f 35ff 	movne.w	r5, #4294967295
  406e6c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  406e70:	065b      	lsls	r3, r3, #25
  406e72:	d503      	bpl.n	406e7c <__sbprintf+0x74>
  406e74:	89a3      	ldrh	r3, [r4, #12]
  406e76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406e7a:	81a3      	strh	r3, [r4, #12]
  406e7c:	9816      	ldr	r0, [sp, #88]	; 0x58
  406e7e:	f001 fcfd 	bl	40887c <__retarget_lock_close_recursive>
  406e82:	4628      	mov	r0, r5
  406e84:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  406e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00406e8c <__swsetup_r>:
  406e8c:	b538      	push	{r3, r4, r5, lr}
  406e8e:	4b30      	ldr	r3, [pc, #192]	; (406f50 <__swsetup_r+0xc4>)
  406e90:	681b      	ldr	r3, [r3, #0]
  406e92:	4605      	mov	r5, r0
  406e94:	460c      	mov	r4, r1
  406e96:	b113      	cbz	r3, 406e9e <__swsetup_r+0x12>
  406e98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  406e9a:	2a00      	cmp	r2, #0
  406e9c:	d038      	beq.n	406f10 <__swsetup_r+0x84>
  406e9e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406ea2:	b293      	uxth	r3, r2
  406ea4:	0718      	lsls	r0, r3, #28
  406ea6:	d50c      	bpl.n	406ec2 <__swsetup_r+0x36>
  406ea8:	6920      	ldr	r0, [r4, #16]
  406eaa:	b1a8      	cbz	r0, 406ed8 <__swsetup_r+0x4c>
  406eac:	f013 0201 	ands.w	r2, r3, #1
  406eb0:	d01e      	beq.n	406ef0 <__swsetup_r+0x64>
  406eb2:	6963      	ldr	r3, [r4, #20]
  406eb4:	2200      	movs	r2, #0
  406eb6:	425b      	negs	r3, r3
  406eb8:	61a3      	str	r3, [r4, #24]
  406eba:	60a2      	str	r2, [r4, #8]
  406ebc:	b1f0      	cbz	r0, 406efc <__swsetup_r+0x70>
  406ebe:	2000      	movs	r0, #0
  406ec0:	bd38      	pop	{r3, r4, r5, pc}
  406ec2:	06d9      	lsls	r1, r3, #27
  406ec4:	d53c      	bpl.n	406f40 <__swsetup_r+0xb4>
  406ec6:	0758      	lsls	r0, r3, #29
  406ec8:	d426      	bmi.n	406f18 <__swsetup_r+0x8c>
  406eca:	6920      	ldr	r0, [r4, #16]
  406ecc:	f042 0308 	orr.w	r3, r2, #8
  406ed0:	81a3      	strh	r3, [r4, #12]
  406ed2:	b29b      	uxth	r3, r3
  406ed4:	2800      	cmp	r0, #0
  406ed6:	d1e9      	bne.n	406eac <__swsetup_r+0x20>
  406ed8:	f403 7220 	and.w	r2, r3, #640	; 0x280
  406edc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  406ee0:	d0e4      	beq.n	406eac <__swsetup_r+0x20>
  406ee2:	4628      	mov	r0, r5
  406ee4:	4621      	mov	r1, r4
  406ee6:	f001 fcfd 	bl	4088e4 <__smakebuf_r>
  406eea:	89a3      	ldrh	r3, [r4, #12]
  406eec:	6920      	ldr	r0, [r4, #16]
  406eee:	e7dd      	b.n	406eac <__swsetup_r+0x20>
  406ef0:	0799      	lsls	r1, r3, #30
  406ef2:	bf58      	it	pl
  406ef4:	6962      	ldrpl	r2, [r4, #20]
  406ef6:	60a2      	str	r2, [r4, #8]
  406ef8:	2800      	cmp	r0, #0
  406efa:	d1e0      	bne.n	406ebe <__swsetup_r+0x32>
  406efc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406f00:	061a      	lsls	r2, r3, #24
  406f02:	d5dd      	bpl.n	406ec0 <__swsetup_r+0x34>
  406f04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406f08:	81a3      	strh	r3, [r4, #12]
  406f0a:	f04f 30ff 	mov.w	r0, #4294967295
  406f0e:	bd38      	pop	{r3, r4, r5, pc}
  406f10:	4618      	mov	r0, r3
  406f12:	f001 f8e7 	bl	4080e4 <__sinit>
  406f16:	e7c2      	b.n	406e9e <__swsetup_r+0x12>
  406f18:	6b21      	ldr	r1, [r4, #48]	; 0x30
  406f1a:	b151      	cbz	r1, 406f32 <__swsetup_r+0xa6>
  406f1c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406f20:	4299      	cmp	r1, r3
  406f22:	d004      	beq.n	406f2e <__swsetup_r+0xa2>
  406f24:	4628      	mov	r0, r5
  406f26:	f001 fa03 	bl	408330 <_free_r>
  406f2a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406f2e:	2300      	movs	r3, #0
  406f30:	6323      	str	r3, [r4, #48]	; 0x30
  406f32:	2300      	movs	r3, #0
  406f34:	6920      	ldr	r0, [r4, #16]
  406f36:	6063      	str	r3, [r4, #4]
  406f38:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  406f3c:	6020      	str	r0, [r4, #0]
  406f3e:	e7c5      	b.n	406ecc <__swsetup_r+0x40>
  406f40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  406f44:	2309      	movs	r3, #9
  406f46:	602b      	str	r3, [r5, #0]
  406f48:	f04f 30ff 	mov.w	r0, #4294967295
  406f4c:	81a2      	strh	r2, [r4, #12]
  406f4e:	bd38      	pop	{r3, r4, r5, pc}
  406f50:	2040001c 	.word	0x2040001c

00406f54 <register_fini>:
  406f54:	4b02      	ldr	r3, [pc, #8]	; (406f60 <register_fini+0xc>)
  406f56:	b113      	cbz	r3, 406f5e <register_fini+0xa>
  406f58:	4802      	ldr	r0, [pc, #8]	; (406f64 <register_fini+0x10>)
  406f5a:	f000 b805 	b.w	406f68 <atexit>
  406f5e:	4770      	bx	lr
  406f60:	00000000 	.word	0x00000000
  406f64:	00408155 	.word	0x00408155

00406f68 <atexit>:
  406f68:	2300      	movs	r3, #0
  406f6a:	4601      	mov	r1, r0
  406f6c:	461a      	mov	r2, r3
  406f6e:	4618      	mov	r0, r3
  406f70:	f002 bbda 	b.w	409728 <__register_exitproc>

00406f74 <quorem>:
  406f74:	6902      	ldr	r2, [r0, #16]
  406f76:	690b      	ldr	r3, [r1, #16]
  406f78:	4293      	cmp	r3, r2
  406f7a:	f300 808d 	bgt.w	407098 <quorem+0x124>
  406f7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406f82:	f103 38ff 	add.w	r8, r3, #4294967295
  406f86:	f101 0714 	add.w	r7, r1, #20
  406f8a:	f100 0b14 	add.w	fp, r0, #20
  406f8e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  406f92:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  406f96:	ea4f 0488 	mov.w	r4, r8, lsl #2
  406f9a:	b083      	sub	sp, #12
  406f9c:	3201      	adds	r2, #1
  406f9e:	fbb3 f9f2 	udiv	r9, r3, r2
  406fa2:	eb0b 0304 	add.w	r3, fp, r4
  406fa6:	9400      	str	r4, [sp, #0]
  406fa8:	eb07 0a04 	add.w	sl, r7, r4
  406fac:	9301      	str	r3, [sp, #4]
  406fae:	f1b9 0f00 	cmp.w	r9, #0
  406fb2:	d039      	beq.n	407028 <quorem+0xb4>
  406fb4:	2500      	movs	r5, #0
  406fb6:	462e      	mov	r6, r5
  406fb8:	46bc      	mov	ip, r7
  406fba:	46de      	mov	lr, fp
  406fbc:	f85c 4b04 	ldr.w	r4, [ip], #4
  406fc0:	f8de 3000 	ldr.w	r3, [lr]
  406fc4:	b2a2      	uxth	r2, r4
  406fc6:	fb09 5502 	mla	r5, r9, r2, r5
  406fca:	0c22      	lsrs	r2, r4, #16
  406fcc:	0c2c      	lsrs	r4, r5, #16
  406fce:	fb09 4202 	mla	r2, r9, r2, r4
  406fd2:	b2ad      	uxth	r5, r5
  406fd4:	1b75      	subs	r5, r6, r5
  406fd6:	b296      	uxth	r6, r2
  406fd8:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  406fdc:	fa15 f383 	uxtah	r3, r5, r3
  406fe0:	eb06 4623 	add.w	r6, r6, r3, asr #16
  406fe4:	b29b      	uxth	r3, r3
  406fe6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  406fea:	45e2      	cmp	sl, ip
  406fec:	ea4f 4512 	mov.w	r5, r2, lsr #16
  406ff0:	f84e 3b04 	str.w	r3, [lr], #4
  406ff4:	ea4f 4626 	mov.w	r6, r6, asr #16
  406ff8:	d2e0      	bcs.n	406fbc <quorem+0x48>
  406ffa:	9b00      	ldr	r3, [sp, #0]
  406ffc:	f85b 3003 	ldr.w	r3, [fp, r3]
  407000:	b993      	cbnz	r3, 407028 <quorem+0xb4>
  407002:	9c01      	ldr	r4, [sp, #4]
  407004:	1f23      	subs	r3, r4, #4
  407006:	459b      	cmp	fp, r3
  407008:	d20c      	bcs.n	407024 <quorem+0xb0>
  40700a:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40700e:	b94b      	cbnz	r3, 407024 <quorem+0xb0>
  407010:	f1a4 0308 	sub.w	r3, r4, #8
  407014:	e002      	b.n	40701c <quorem+0xa8>
  407016:	681a      	ldr	r2, [r3, #0]
  407018:	3b04      	subs	r3, #4
  40701a:	b91a      	cbnz	r2, 407024 <quorem+0xb0>
  40701c:	459b      	cmp	fp, r3
  40701e:	f108 38ff 	add.w	r8, r8, #4294967295
  407022:	d3f8      	bcc.n	407016 <quorem+0xa2>
  407024:	f8c0 8010 	str.w	r8, [r0, #16]
  407028:	4604      	mov	r4, r0
  40702a:	f001 ff73 	bl	408f14 <__mcmp>
  40702e:	2800      	cmp	r0, #0
  407030:	db2e      	blt.n	407090 <quorem+0x11c>
  407032:	f109 0901 	add.w	r9, r9, #1
  407036:	465d      	mov	r5, fp
  407038:	2300      	movs	r3, #0
  40703a:	f857 1b04 	ldr.w	r1, [r7], #4
  40703e:	6828      	ldr	r0, [r5, #0]
  407040:	b28a      	uxth	r2, r1
  407042:	1a9a      	subs	r2, r3, r2
  407044:	0c0b      	lsrs	r3, r1, #16
  407046:	fa12 f280 	uxtah	r2, r2, r0
  40704a:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  40704e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  407052:	b292      	uxth	r2, r2
  407054:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  407058:	45ba      	cmp	sl, r7
  40705a:	f845 2b04 	str.w	r2, [r5], #4
  40705e:	ea4f 4323 	mov.w	r3, r3, asr #16
  407062:	d2ea      	bcs.n	40703a <quorem+0xc6>
  407064:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  407068:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  40706c:	b982      	cbnz	r2, 407090 <quorem+0x11c>
  40706e:	1f1a      	subs	r2, r3, #4
  407070:	4593      	cmp	fp, r2
  407072:	d20b      	bcs.n	40708c <quorem+0x118>
  407074:	f853 2c04 	ldr.w	r2, [r3, #-4]
  407078:	b942      	cbnz	r2, 40708c <quorem+0x118>
  40707a:	3b08      	subs	r3, #8
  40707c:	e002      	b.n	407084 <quorem+0x110>
  40707e:	681a      	ldr	r2, [r3, #0]
  407080:	3b04      	subs	r3, #4
  407082:	b91a      	cbnz	r2, 40708c <quorem+0x118>
  407084:	459b      	cmp	fp, r3
  407086:	f108 38ff 	add.w	r8, r8, #4294967295
  40708a:	d3f8      	bcc.n	40707e <quorem+0x10a>
  40708c:	f8c4 8010 	str.w	r8, [r4, #16]
  407090:	4648      	mov	r0, r9
  407092:	b003      	add	sp, #12
  407094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407098:	2000      	movs	r0, #0
  40709a:	4770      	bx	lr
  40709c:	0000      	movs	r0, r0
	...

004070a0 <_dtoa_r>:
  4070a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4070a4:	6c01      	ldr	r1, [r0, #64]	; 0x40
  4070a6:	b09b      	sub	sp, #108	; 0x6c
  4070a8:	4604      	mov	r4, r0
  4070aa:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  4070ac:	4692      	mov	sl, r2
  4070ae:	469b      	mov	fp, r3
  4070b0:	b141      	cbz	r1, 4070c4 <_dtoa_r+0x24>
  4070b2:	6c42      	ldr	r2, [r0, #68]	; 0x44
  4070b4:	604a      	str	r2, [r1, #4]
  4070b6:	2301      	movs	r3, #1
  4070b8:	4093      	lsls	r3, r2
  4070ba:	608b      	str	r3, [r1, #8]
  4070bc:	f001 fd52 	bl	408b64 <_Bfree>
  4070c0:	2300      	movs	r3, #0
  4070c2:	6423      	str	r3, [r4, #64]	; 0x40
  4070c4:	f1bb 0f00 	cmp.w	fp, #0
  4070c8:	465d      	mov	r5, fp
  4070ca:	db35      	blt.n	407138 <_dtoa_r+0x98>
  4070cc:	2300      	movs	r3, #0
  4070ce:	6033      	str	r3, [r6, #0]
  4070d0:	4b9d      	ldr	r3, [pc, #628]	; (407348 <_dtoa_r+0x2a8>)
  4070d2:	43ab      	bics	r3, r5
  4070d4:	d015      	beq.n	407102 <_dtoa_r+0x62>
  4070d6:	4650      	mov	r0, sl
  4070d8:	4659      	mov	r1, fp
  4070da:	2200      	movs	r2, #0
  4070dc:	2300      	movs	r3, #0
  4070de:	f003 f89b 	bl	40a218 <__aeabi_dcmpeq>
  4070e2:	4680      	mov	r8, r0
  4070e4:	2800      	cmp	r0, #0
  4070e6:	d02d      	beq.n	407144 <_dtoa_r+0xa4>
  4070e8:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4070ea:	2301      	movs	r3, #1
  4070ec:	6013      	str	r3, [r2, #0]
  4070ee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4070f0:	2b00      	cmp	r3, #0
  4070f2:	f000 80bd 	beq.w	407270 <_dtoa_r+0x1d0>
  4070f6:	4895      	ldr	r0, [pc, #596]	; (40734c <_dtoa_r+0x2ac>)
  4070f8:	6018      	str	r0, [r3, #0]
  4070fa:	3801      	subs	r0, #1
  4070fc:	b01b      	add	sp, #108	; 0x6c
  4070fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407102:	9a26      	ldr	r2, [sp, #152]	; 0x98
  407104:	f242 730f 	movw	r3, #9999	; 0x270f
  407108:	6013      	str	r3, [r2, #0]
  40710a:	f1ba 0f00 	cmp.w	sl, #0
  40710e:	d10d      	bne.n	40712c <_dtoa_r+0x8c>
  407110:	f3c5 0513 	ubfx	r5, r5, #0, #20
  407114:	b955      	cbnz	r5, 40712c <_dtoa_r+0x8c>
  407116:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  407118:	488d      	ldr	r0, [pc, #564]	; (407350 <_dtoa_r+0x2b0>)
  40711a:	2b00      	cmp	r3, #0
  40711c:	d0ee      	beq.n	4070fc <_dtoa_r+0x5c>
  40711e:	f100 0308 	add.w	r3, r0, #8
  407122:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  407124:	6013      	str	r3, [r2, #0]
  407126:	b01b      	add	sp, #108	; 0x6c
  407128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40712c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40712e:	4889      	ldr	r0, [pc, #548]	; (407354 <_dtoa_r+0x2b4>)
  407130:	2b00      	cmp	r3, #0
  407132:	d0e3      	beq.n	4070fc <_dtoa_r+0x5c>
  407134:	1cc3      	adds	r3, r0, #3
  407136:	e7f4      	b.n	407122 <_dtoa_r+0x82>
  407138:	2301      	movs	r3, #1
  40713a:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  40713e:	6033      	str	r3, [r6, #0]
  407140:	46ab      	mov	fp, r5
  407142:	e7c5      	b.n	4070d0 <_dtoa_r+0x30>
  407144:	aa18      	add	r2, sp, #96	; 0x60
  407146:	ab19      	add	r3, sp, #100	; 0x64
  407148:	9201      	str	r2, [sp, #4]
  40714a:	9300      	str	r3, [sp, #0]
  40714c:	4652      	mov	r2, sl
  40714e:	465b      	mov	r3, fp
  407150:	4620      	mov	r0, r4
  407152:	f001 ff7f 	bl	409054 <__d2b>
  407156:	0d2b      	lsrs	r3, r5, #20
  407158:	4681      	mov	r9, r0
  40715a:	d071      	beq.n	407240 <_dtoa_r+0x1a0>
  40715c:	f3cb 0213 	ubfx	r2, fp, #0, #20
  407160:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  407164:	9f18      	ldr	r7, [sp, #96]	; 0x60
  407166:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  40716a:	4650      	mov	r0, sl
  40716c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  407170:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  407174:	2200      	movs	r2, #0
  407176:	4b78      	ldr	r3, [pc, #480]	; (407358 <_dtoa_r+0x2b8>)
  407178:	f002 fc32 	bl	4099e0 <__aeabi_dsub>
  40717c:	a36c      	add	r3, pc, #432	; (adr r3, 407330 <_dtoa_r+0x290>)
  40717e:	e9d3 2300 	ldrd	r2, r3, [r3]
  407182:	f002 fde1 	bl	409d48 <__aeabi_dmul>
  407186:	a36c      	add	r3, pc, #432	; (adr r3, 407338 <_dtoa_r+0x298>)
  407188:	e9d3 2300 	ldrd	r2, r3, [r3]
  40718c:	f002 fc2a 	bl	4099e4 <__adddf3>
  407190:	e9cd 0102 	strd	r0, r1, [sp, #8]
  407194:	4630      	mov	r0, r6
  407196:	f002 fd71 	bl	409c7c <__aeabi_i2d>
  40719a:	a369      	add	r3, pc, #420	; (adr r3, 407340 <_dtoa_r+0x2a0>)
  40719c:	e9d3 2300 	ldrd	r2, r3, [r3]
  4071a0:	f002 fdd2 	bl	409d48 <__aeabi_dmul>
  4071a4:	4602      	mov	r2, r0
  4071a6:	460b      	mov	r3, r1
  4071a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4071ac:	f002 fc1a 	bl	4099e4 <__adddf3>
  4071b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4071b4:	f003 f878 	bl	40a2a8 <__aeabi_d2iz>
  4071b8:	2200      	movs	r2, #0
  4071ba:	9002      	str	r0, [sp, #8]
  4071bc:	2300      	movs	r3, #0
  4071be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4071c2:	f003 f833 	bl	40a22c <__aeabi_dcmplt>
  4071c6:	2800      	cmp	r0, #0
  4071c8:	f040 8173 	bne.w	4074b2 <_dtoa_r+0x412>
  4071cc:	9d02      	ldr	r5, [sp, #8]
  4071ce:	2d16      	cmp	r5, #22
  4071d0:	f200 815d 	bhi.w	40748e <_dtoa_r+0x3ee>
  4071d4:	4b61      	ldr	r3, [pc, #388]	; (40735c <_dtoa_r+0x2bc>)
  4071d6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  4071da:	e9d3 0100 	ldrd	r0, r1, [r3]
  4071de:	4652      	mov	r2, sl
  4071e0:	465b      	mov	r3, fp
  4071e2:	f003 f841 	bl	40a268 <__aeabi_dcmpgt>
  4071e6:	2800      	cmp	r0, #0
  4071e8:	f000 81c5 	beq.w	407576 <_dtoa_r+0x4d6>
  4071ec:	1e6b      	subs	r3, r5, #1
  4071ee:	9302      	str	r3, [sp, #8]
  4071f0:	2300      	movs	r3, #0
  4071f2:	930e      	str	r3, [sp, #56]	; 0x38
  4071f4:	1bbf      	subs	r7, r7, r6
  4071f6:	1e7b      	subs	r3, r7, #1
  4071f8:	9306      	str	r3, [sp, #24]
  4071fa:	f100 8154 	bmi.w	4074a6 <_dtoa_r+0x406>
  4071fe:	2300      	movs	r3, #0
  407200:	9308      	str	r3, [sp, #32]
  407202:	9b02      	ldr	r3, [sp, #8]
  407204:	2b00      	cmp	r3, #0
  407206:	f2c0 8145 	blt.w	407494 <_dtoa_r+0x3f4>
  40720a:	9a06      	ldr	r2, [sp, #24]
  40720c:	930d      	str	r3, [sp, #52]	; 0x34
  40720e:	4611      	mov	r1, r2
  407210:	4419      	add	r1, r3
  407212:	2300      	movs	r3, #0
  407214:	9106      	str	r1, [sp, #24]
  407216:	930c      	str	r3, [sp, #48]	; 0x30
  407218:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40721a:	2b09      	cmp	r3, #9
  40721c:	d82a      	bhi.n	407274 <_dtoa_r+0x1d4>
  40721e:	2b05      	cmp	r3, #5
  407220:	f340 865b 	ble.w	407eda <_dtoa_r+0xe3a>
  407224:	3b04      	subs	r3, #4
  407226:	9324      	str	r3, [sp, #144]	; 0x90
  407228:	2500      	movs	r5, #0
  40722a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40722c:	3b02      	subs	r3, #2
  40722e:	2b03      	cmp	r3, #3
  407230:	f200 8642 	bhi.w	407eb8 <_dtoa_r+0xe18>
  407234:	e8df f013 	tbh	[pc, r3, lsl #1]
  407238:	02c903d4 	.word	0x02c903d4
  40723c:	046103df 	.word	0x046103df
  407240:	9f18      	ldr	r7, [sp, #96]	; 0x60
  407242:	9e19      	ldr	r6, [sp, #100]	; 0x64
  407244:	443e      	add	r6, r7
  407246:	f206 4332 	addw	r3, r6, #1074	; 0x432
  40724a:	2b20      	cmp	r3, #32
  40724c:	f340 818e 	ble.w	40756c <_dtoa_r+0x4cc>
  407250:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  407254:	f206 4012 	addw	r0, r6, #1042	; 0x412
  407258:	409d      	lsls	r5, r3
  40725a:	fa2a f000 	lsr.w	r0, sl, r0
  40725e:	4328      	orrs	r0, r5
  407260:	f002 fcfc 	bl	409c5c <__aeabi_ui2d>
  407264:	2301      	movs	r3, #1
  407266:	3e01      	subs	r6, #1
  407268:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40726c:	9314      	str	r3, [sp, #80]	; 0x50
  40726e:	e781      	b.n	407174 <_dtoa_r+0xd4>
  407270:	483b      	ldr	r0, [pc, #236]	; (407360 <_dtoa_r+0x2c0>)
  407272:	e743      	b.n	4070fc <_dtoa_r+0x5c>
  407274:	2100      	movs	r1, #0
  407276:	6461      	str	r1, [r4, #68]	; 0x44
  407278:	4620      	mov	r0, r4
  40727a:	9125      	str	r1, [sp, #148]	; 0x94
  40727c:	f001 fc4c 	bl	408b18 <_Balloc>
  407280:	f04f 33ff 	mov.w	r3, #4294967295
  407284:	930a      	str	r3, [sp, #40]	; 0x28
  407286:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407288:	930f      	str	r3, [sp, #60]	; 0x3c
  40728a:	2301      	movs	r3, #1
  40728c:	9004      	str	r0, [sp, #16]
  40728e:	6420      	str	r0, [r4, #64]	; 0x40
  407290:	9224      	str	r2, [sp, #144]	; 0x90
  407292:	930b      	str	r3, [sp, #44]	; 0x2c
  407294:	9b19      	ldr	r3, [sp, #100]	; 0x64
  407296:	2b00      	cmp	r3, #0
  407298:	f2c0 80d9 	blt.w	40744e <_dtoa_r+0x3ae>
  40729c:	9a02      	ldr	r2, [sp, #8]
  40729e:	2a0e      	cmp	r2, #14
  4072a0:	f300 80d5 	bgt.w	40744e <_dtoa_r+0x3ae>
  4072a4:	4b2d      	ldr	r3, [pc, #180]	; (40735c <_dtoa_r+0x2bc>)
  4072a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4072aa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4072ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
  4072b2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4072b4:	2b00      	cmp	r3, #0
  4072b6:	f2c0 83ba 	blt.w	407a2e <_dtoa_r+0x98e>
  4072ba:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  4072be:	4650      	mov	r0, sl
  4072c0:	462a      	mov	r2, r5
  4072c2:	4633      	mov	r3, r6
  4072c4:	4659      	mov	r1, fp
  4072c6:	f002 fe69 	bl	409f9c <__aeabi_ddiv>
  4072ca:	f002 ffed 	bl	40a2a8 <__aeabi_d2iz>
  4072ce:	4680      	mov	r8, r0
  4072d0:	f002 fcd4 	bl	409c7c <__aeabi_i2d>
  4072d4:	462a      	mov	r2, r5
  4072d6:	4633      	mov	r3, r6
  4072d8:	f002 fd36 	bl	409d48 <__aeabi_dmul>
  4072dc:	460b      	mov	r3, r1
  4072de:	4602      	mov	r2, r0
  4072e0:	4659      	mov	r1, fp
  4072e2:	4650      	mov	r0, sl
  4072e4:	f002 fb7c 	bl	4099e0 <__aeabi_dsub>
  4072e8:	9d04      	ldr	r5, [sp, #16]
  4072ea:	f108 0330 	add.w	r3, r8, #48	; 0x30
  4072ee:	702b      	strb	r3, [r5, #0]
  4072f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4072f2:	2b01      	cmp	r3, #1
  4072f4:	4606      	mov	r6, r0
  4072f6:	460f      	mov	r7, r1
  4072f8:	f105 0501 	add.w	r5, r5, #1
  4072fc:	d068      	beq.n	4073d0 <_dtoa_r+0x330>
  4072fe:	2200      	movs	r2, #0
  407300:	4b18      	ldr	r3, [pc, #96]	; (407364 <_dtoa_r+0x2c4>)
  407302:	f002 fd21 	bl	409d48 <__aeabi_dmul>
  407306:	2200      	movs	r2, #0
  407308:	2300      	movs	r3, #0
  40730a:	4606      	mov	r6, r0
  40730c:	460f      	mov	r7, r1
  40730e:	f002 ff83 	bl	40a218 <__aeabi_dcmpeq>
  407312:	2800      	cmp	r0, #0
  407314:	f040 8088 	bne.w	407428 <_dtoa_r+0x388>
  407318:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  40731c:	f04f 0a00 	mov.w	sl, #0
  407320:	f8df b040 	ldr.w	fp, [pc, #64]	; 407364 <_dtoa_r+0x2c4>
  407324:	940c      	str	r4, [sp, #48]	; 0x30
  407326:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  40732a:	e028      	b.n	40737e <_dtoa_r+0x2de>
  40732c:	f3af 8000 	nop.w
  407330:	636f4361 	.word	0x636f4361
  407334:	3fd287a7 	.word	0x3fd287a7
  407338:	8b60c8b3 	.word	0x8b60c8b3
  40733c:	3fc68a28 	.word	0x3fc68a28
  407340:	509f79fb 	.word	0x509f79fb
  407344:	3fd34413 	.word	0x3fd34413
  407348:	7ff00000 	.word	0x7ff00000
  40734c:	0040a761 	.word	0x0040a761
  407350:	0040a7a4 	.word	0x0040a7a4
  407354:	0040a7b0 	.word	0x0040a7b0
  407358:	3ff80000 	.word	0x3ff80000
  40735c:	0040a7f0 	.word	0x0040a7f0
  407360:	0040a760 	.word	0x0040a760
  407364:	40240000 	.word	0x40240000
  407368:	f002 fcee 	bl	409d48 <__aeabi_dmul>
  40736c:	2200      	movs	r2, #0
  40736e:	2300      	movs	r3, #0
  407370:	4606      	mov	r6, r0
  407372:	460f      	mov	r7, r1
  407374:	f002 ff50 	bl	40a218 <__aeabi_dcmpeq>
  407378:	2800      	cmp	r0, #0
  40737a:	f040 83c1 	bne.w	407b00 <_dtoa_r+0xa60>
  40737e:	4642      	mov	r2, r8
  407380:	464b      	mov	r3, r9
  407382:	4630      	mov	r0, r6
  407384:	4639      	mov	r1, r7
  407386:	f002 fe09 	bl	409f9c <__aeabi_ddiv>
  40738a:	f002 ff8d 	bl	40a2a8 <__aeabi_d2iz>
  40738e:	4604      	mov	r4, r0
  407390:	f002 fc74 	bl	409c7c <__aeabi_i2d>
  407394:	4642      	mov	r2, r8
  407396:	464b      	mov	r3, r9
  407398:	f002 fcd6 	bl	409d48 <__aeabi_dmul>
  40739c:	4602      	mov	r2, r0
  40739e:	460b      	mov	r3, r1
  4073a0:	4630      	mov	r0, r6
  4073a2:	4639      	mov	r1, r7
  4073a4:	f002 fb1c 	bl	4099e0 <__aeabi_dsub>
  4073a8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  4073ac:	9e04      	ldr	r6, [sp, #16]
  4073ae:	f805 eb01 	strb.w	lr, [r5], #1
  4073b2:	eba5 0e06 	sub.w	lr, r5, r6
  4073b6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  4073b8:	45b6      	cmp	lr, r6
  4073ba:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4073be:	4652      	mov	r2, sl
  4073c0:	465b      	mov	r3, fp
  4073c2:	d1d1      	bne.n	407368 <_dtoa_r+0x2c8>
  4073c4:	46a0      	mov	r8, r4
  4073c6:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  4073ca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4073cc:	4606      	mov	r6, r0
  4073ce:	460f      	mov	r7, r1
  4073d0:	4632      	mov	r2, r6
  4073d2:	463b      	mov	r3, r7
  4073d4:	4630      	mov	r0, r6
  4073d6:	4639      	mov	r1, r7
  4073d8:	f002 fb04 	bl	4099e4 <__adddf3>
  4073dc:	4606      	mov	r6, r0
  4073de:	460f      	mov	r7, r1
  4073e0:	4602      	mov	r2, r0
  4073e2:	460b      	mov	r3, r1
  4073e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4073e8:	f002 ff20 	bl	40a22c <__aeabi_dcmplt>
  4073ec:	b948      	cbnz	r0, 407402 <_dtoa_r+0x362>
  4073ee:	4632      	mov	r2, r6
  4073f0:	463b      	mov	r3, r7
  4073f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4073f6:	f002 ff0f 	bl	40a218 <__aeabi_dcmpeq>
  4073fa:	b1a8      	cbz	r0, 407428 <_dtoa_r+0x388>
  4073fc:	f018 0f01 	tst.w	r8, #1
  407400:	d012      	beq.n	407428 <_dtoa_r+0x388>
  407402:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  407406:	9a04      	ldr	r2, [sp, #16]
  407408:	1e6b      	subs	r3, r5, #1
  40740a:	e004      	b.n	407416 <_dtoa_r+0x376>
  40740c:	429a      	cmp	r2, r3
  40740e:	f000 8401 	beq.w	407c14 <_dtoa_r+0xb74>
  407412:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  407416:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  40741a:	f103 0501 	add.w	r5, r3, #1
  40741e:	d0f5      	beq.n	40740c <_dtoa_r+0x36c>
  407420:	f108 0801 	add.w	r8, r8, #1
  407424:	f883 8000 	strb.w	r8, [r3]
  407428:	4649      	mov	r1, r9
  40742a:	4620      	mov	r0, r4
  40742c:	f001 fb9a 	bl	408b64 <_Bfree>
  407430:	2200      	movs	r2, #0
  407432:	9b02      	ldr	r3, [sp, #8]
  407434:	702a      	strb	r2, [r5, #0]
  407436:	9a26      	ldr	r2, [sp, #152]	; 0x98
  407438:	3301      	adds	r3, #1
  40743a:	6013      	str	r3, [r2, #0]
  40743c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40743e:	2b00      	cmp	r3, #0
  407440:	f000 839e 	beq.w	407b80 <_dtoa_r+0xae0>
  407444:	9804      	ldr	r0, [sp, #16]
  407446:	601d      	str	r5, [r3, #0]
  407448:	b01b      	add	sp, #108	; 0x6c
  40744a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40744e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  407450:	2a00      	cmp	r2, #0
  407452:	d03e      	beq.n	4074d2 <_dtoa_r+0x432>
  407454:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407456:	2a01      	cmp	r2, #1
  407458:	f340 8311 	ble.w	407a7e <_dtoa_r+0x9de>
  40745c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40745e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407460:	1e5f      	subs	r7, r3, #1
  407462:	42ba      	cmp	r2, r7
  407464:	f2c0 838f 	blt.w	407b86 <_dtoa_r+0xae6>
  407468:	1bd7      	subs	r7, r2, r7
  40746a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40746c:	2b00      	cmp	r3, #0
  40746e:	f2c0 848b 	blt.w	407d88 <_dtoa_r+0xce8>
  407472:	9d08      	ldr	r5, [sp, #32]
  407474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407476:	9a08      	ldr	r2, [sp, #32]
  407478:	441a      	add	r2, r3
  40747a:	9208      	str	r2, [sp, #32]
  40747c:	9a06      	ldr	r2, [sp, #24]
  40747e:	2101      	movs	r1, #1
  407480:	441a      	add	r2, r3
  407482:	4620      	mov	r0, r4
  407484:	9206      	str	r2, [sp, #24]
  407486:	f001 fc07 	bl	408c98 <__i2b>
  40748a:	4606      	mov	r6, r0
  40748c:	e024      	b.n	4074d8 <_dtoa_r+0x438>
  40748e:	2301      	movs	r3, #1
  407490:	930e      	str	r3, [sp, #56]	; 0x38
  407492:	e6af      	b.n	4071f4 <_dtoa_r+0x154>
  407494:	9a08      	ldr	r2, [sp, #32]
  407496:	9b02      	ldr	r3, [sp, #8]
  407498:	1ad2      	subs	r2, r2, r3
  40749a:	425b      	negs	r3, r3
  40749c:	930c      	str	r3, [sp, #48]	; 0x30
  40749e:	2300      	movs	r3, #0
  4074a0:	9208      	str	r2, [sp, #32]
  4074a2:	930d      	str	r3, [sp, #52]	; 0x34
  4074a4:	e6b8      	b.n	407218 <_dtoa_r+0x178>
  4074a6:	f1c7 0301 	rsb	r3, r7, #1
  4074aa:	9308      	str	r3, [sp, #32]
  4074ac:	2300      	movs	r3, #0
  4074ae:	9306      	str	r3, [sp, #24]
  4074b0:	e6a7      	b.n	407202 <_dtoa_r+0x162>
  4074b2:	9d02      	ldr	r5, [sp, #8]
  4074b4:	4628      	mov	r0, r5
  4074b6:	f002 fbe1 	bl	409c7c <__aeabi_i2d>
  4074ba:	4602      	mov	r2, r0
  4074bc:	460b      	mov	r3, r1
  4074be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4074c2:	f002 fea9 	bl	40a218 <__aeabi_dcmpeq>
  4074c6:	2800      	cmp	r0, #0
  4074c8:	f47f ae80 	bne.w	4071cc <_dtoa_r+0x12c>
  4074cc:	1e6b      	subs	r3, r5, #1
  4074ce:	9302      	str	r3, [sp, #8]
  4074d0:	e67c      	b.n	4071cc <_dtoa_r+0x12c>
  4074d2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4074d4:	9d08      	ldr	r5, [sp, #32]
  4074d6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  4074d8:	2d00      	cmp	r5, #0
  4074da:	dd0c      	ble.n	4074f6 <_dtoa_r+0x456>
  4074dc:	9906      	ldr	r1, [sp, #24]
  4074de:	2900      	cmp	r1, #0
  4074e0:	460b      	mov	r3, r1
  4074e2:	dd08      	ble.n	4074f6 <_dtoa_r+0x456>
  4074e4:	42a9      	cmp	r1, r5
  4074e6:	9a08      	ldr	r2, [sp, #32]
  4074e8:	bfa8      	it	ge
  4074ea:	462b      	movge	r3, r5
  4074ec:	1ad2      	subs	r2, r2, r3
  4074ee:	1aed      	subs	r5, r5, r3
  4074f0:	1acb      	subs	r3, r1, r3
  4074f2:	9208      	str	r2, [sp, #32]
  4074f4:	9306      	str	r3, [sp, #24]
  4074f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4074f8:	b1d3      	cbz	r3, 407530 <_dtoa_r+0x490>
  4074fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4074fc:	2b00      	cmp	r3, #0
  4074fe:	f000 82b7 	beq.w	407a70 <_dtoa_r+0x9d0>
  407502:	2f00      	cmp	r7, #0
  407504:	dd10      	ble.n	407528 <_dtoa_r+0x488>
  407506:	4631      	mov	r1, r6
  407508:	463a      	mov	r2, r7
  40750a:	4620      	mov	r0, r4
  40750c:	f001 fc60 	bl	408dd0 <__pow5mult>
  407510:	464a      	mov	r2, r9
  407512:	4601      	mov	r1, r0
  407514:	4606      	mov	r6, r0
  407516:	4620      	mov	r0, r4
  407518:	f001 fbc8 	bl	408cac <__multiply>
  40751c:	4649      	mov	r1, r9
  40751e:	4680      	mov	r8, r0
  407520:	4620      	mov	r0, r4
  407522:	f001 fb1f 	bl	408b64 <_Bfree>
  407526:	46c1      	mov	r9, r8
  407528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40752a:	1bda      	subs	r2, r3, r7
  40752c:	f040 82a1 	bne.w	407a72 <_dtoa_r+0x9d2>
  407530:	2101      	movs	r1, #1
  407532:	4620      	mov	r0, r4
  407534:	f001 fbb0 	bl	408c98 <__i2b>
  407538:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40753a:	2b00      	cmp	r3, #0
  40753c:	4680      	mov	r8, r0
  40753e:	dd1c      	ble.n	40757a <_dtoa_r+0x4da>
  407540:	4601      	mov	r1, r0
  407542:	461a      	mov	r2, r3
  407544:	4620      	mov	r0, r4
  407546:	f001 fc43 	bl	408dd0 <__pow5mult>
  40754a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40754c:	2b01      	cmp	r3, #1
  40754e:	4680      	mov	r8, r0
  407550:	f340 8254 	ble.w	4079fc <_dtoa_r+0x95c>
  407554:	2300      	movs	r3, #0
  407556:	930c      	str	r3, [sp, #48]	; 0x30
  407558:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40755c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  407560:	6918      	ldr	r0, [r3, #16]
  407562:	f001 fb49 	bl	408bf8 <__hi0bits>
  407566:	f1c0 0020 	rsb	r0, r0, #32
  40756a:	e010      	b.n	40758e <_dtoa_r+0x4ee>
  40756c:	f1c3 0520 	rsb	r5, r3, #32
  407570:	fa0a f005 	lsl.w	r0, sl, r5
  407574:	e674      	b.n	407260 <_dtoa_r+0x1c0>
  407576:	900e      	str	r0, [sp, #56]	; 0x38
  407578:	e63c      	b.n	4071f4 <_dtoa_r+0x154>
  40757a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40757c:	2b01      	cmp	r3, #1
  40757e:	f340 8287 	ble.w	407a90 <_dtoa_r+0x9f0>
  407582:	2300      	movs	r3, #0
  407584:	930c      	str	r3, [sp, #48]	; 0x30
  407586:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407588:	2001      	movs	r0, #1
  40758a:	2b00      	cmp	r3, #0
  40758c:	d1e4      	bne.n	407558 <_dtoa_r+0x4b8>
  40758e:	9a06      	ldr	r2, [sp, #24]
  407590:	4410      	add	r0, r2
  407592:	f010 001f 	ands.w	r0, r0, #31
  407596:	f000 80a1 	beq.w	4076dc <_dtoa_r+0x63c>
  40759a:	f1c0 0320 	rsb	r3, r0, #32
  40759e:	2b04      	cmp	r3, #4
  4075a0:	f340 849e 	ble.w	407ee0 <_dtoa_r+0xe40>
  4075a4:	9b08      	ldr	r3, [sp, #32]
  4075a6:	f1c0 001c 	rsb	r0, r0, #28
  4075aa:	4403      	add	r3, r0
  4075ac:	9308      	str	r3, [sp, #32]
  4075ae:	4613      	mov	r3, r2
  4075b0:	4403      	add	r3, r0
  4075b2:	4405      	add	r5, r0
  4075b4:	9306      	str	r3, [sp, #24]
  4075b6:	9b08      	ldr	r3, [sp, #32]
  4075b8:	2b00      	cmp	r3, #0
  4075ba:	dd05      	ble.n	4075c8 <_dtoa_r+0x528>
  4075bc:	4649      	mov	r1, r9
  4075be:	461a      	mov	r2, r3
  4075c0:	4620      	mov	r0, r4
  4075c2:	f001 fc55 	bl	408e70 <__lshift>
  4075c6:	4681      	mov	r9, r0
  4075c8:	9b06      	ldr	r3, [sp, #24]
  4075ca:	2b00      	cmp	r3, #0
  4075cc:	dd05      	ble.n	4075da <_dtoa_r+0x53a>
  4075ce:	4641      	mov	r1, r8
  4075d0:	461a      	mov	r2, r3
  4075d2:	4620      	mov	r0, r4
  4075d4:	f001 fc4c 	bl	408e70 <__lshift>
  4075d8:	4680      	mov	r8, r0
  4075da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4075dc:	2b00      	cmp	r3, #0
  4075de:	f040 8086 	bne.w	4076ee <_dtoa_r+0x64e>
  4075e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4075e4:	2b00      	cmp	r3, #0
  4075e6:	f340 8266 	ble.w	407ab6 <_dtoa_r+0xa16>
  4075ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4075ec:	2b00      	cmp	r3, #0
  4075ee:	f000 8098 	beq.w	407722 <_dtoa_r+0x682>
  4075f2:	2d00      	cmp	r5, #0
  4075f4:	dd05      	ble.n	407602 <_dtoa_r+0x562>
  4075f6:	4631      	mov	r1, r6
  4075f8:	462a      	mov	r2, r5
  4075fa:	4620      	mov	r0, r4
  4075fc:	f001 fc38 	bl	408e70 <__lshift>
  407600:	4606      	mov	r6, r0
  407602:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407604:	2b00      	cmp	r3, #0
  407606:	f040 8337 	bne.w	407c78 <_dtoa_r+0xbd8>
  40760a:	9606      	str	r6, [sp, #24]
  40760c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40760e:	9a04      	ldr	r2, [sp, #16]
  407610:	f8dd b018 	ldr.w	fp, [sp, #24]
  407614:	3b01      	subs	r3, #1
  407616:	18d3      	adds	r3, r2, r3
  407618:	930b      	str	r3, [sp, #44]	; 0x2c
  40761a:	f00a 0301 	and.w	r3, sl, #1
  40761e:	930c      	str	r3, [sp, #48]	; 0x30
  407620:	4617      	mov	r7, r2
  407622:	46c2      	mov	sl, r8
  407624:	4651      	mov	r1, sl
  407626:	4648      	mov	r0, r9
  407628:	f7ff fca4 	bl	406f74 <quorem>
  40762c:	4631      	mov	r1, r6
  40762e:	4605      	mov	r5, r0
  407630:	4648      	mov	r0, r9
  407632:	f001 fc6f 	bl	408f14 <__mcmp>
  407636:	465a      	mov	r2, fp
  407638:	900a      	str	r0, [sp, #40]	; 0x28
  40763a:	4651      	mov	r1, sl
  40763c:	4620      	mov	r0, r4
  40763e:	f001 fc85 	bl	408f4c <__mdiff>
  407642:	68c2      	ldr	r2, [r0, #12]
  407644:	4680      	mov	r8, r0
  407646:	f105 0330 	add.w	r3, r5, #48	; 0x30
  40764a:	2a00      	cmp	r2, #0
  40764c:	f040 822b 	bne.w	407aa6 <_dtoa_r+0xa06>
  407650:	4601      	mov	r1, r0
  407652:	4648      	mov	r0, r9
  407654:	9308      	str	r3, [sp, #32]
  407656:	f001 fc5d 	bl	408f14 <__mcmp>
  40765a:	4641      	mov	r1, r8
  40765c:	9006      	str	r0, [sp, #24]
  40765e:	4620      	mov	r0, r4
  407660:	f001 fa80 	bl	408b64 <_Bfree>
  407664:	9a06      	ldr	r2, [sp, #24]
  407666:	9b08      	ldr	r3, [sp, #32]
  407668:	b932      	cbnz	r2, 407678 <_dtoa_r+0x5d8>
  40766a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40766c:	b921      	cbnz	r1, 407678 <_dtoa_r+0x5d8>
  40766e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407670:	2a00      	cmp	r2, #0
  407672:	f000 83ef 	beq.w	407e54 <_dtoa_r+0xdb4>
  407676:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407678:	990a      	ldr	r1, [sp, #40]	; 0x28
  40767a:	2900      	cmp	r1, #0
  40767c:	f2c0 829f 	blt.w	407bbe <_dtoa_r+0xb1e>
  407680:	d105      	bne.n	40768e <_dtoa_r+0x5ee>
  407682:	9924      	ldr	r1, [sp, #144]	; 0x90
  407684:	b919      	cbnz	r1, 40768e <_dtoa_r+0x5ee>
  407686:	990c      	ldr	r1, [sp, #48]	; 0x30
  407688:	2900      	cmp	r1, #0
  40768a:	f000 8298 	beq.w	407bbe <_dtoa_r+0xb1e>
  40768e:	2a00      	cmp	r2, #0
  407690:	f300 8306 	bgt.w	407ca0 <_dtoa_r+0xc00>
  407694:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  407696:	703b      	strb	r3, [r7, #0]
  407698:	f107 0801 	add.w	r8, r7, #1
  40769c:	4297      	cmp	r7, r2
  40769e:	4645      	mov	r5, r8
  4076a0:	f000 830c 	beq.w	407cbc <_dtoa_r+0xc1c>
  4076a4:	4649      	mov	r1, r9
  4076a6:	2300      	movs	r3, #0
  4076a8:	220a      	movs	r2, #10
  4076aa:	4620      	mov	r0, r4
  4076ac:	f001 fa64 	bl	408b78 <__multadd>
  4076b0:	455e      	cmp	r6, fp
  4076b2:	4681      	mov	r9, r0
  4076b4:	4631      	mov	r1, r6
  4076b6:	f04f 0300 	mov.w	r3, #0
  4076ba:	f04f 020a 	mov.w	r2, #10
  4076be:	4620      	mov	r0, r4
  4076c0:	f000 81eb 	beq.w	407a9a <_dtoa_r+0x9fa>
  4076c4:	f001 fa58 	bl	408b78 <__multadd>
  4076c8:	4659      	mov	r1, fp
  4076ca:	4606      	mov	r6, r0
  4076cc:	2300      	movs	r3, #0
  4076ce:	220a      	movs	r2, #10
  4076d0:	4620      	mov	r0, r4
  4076d2:	f001 fa51 	bl	408b78 <__multadd>
  4076d6:	4647      	mov	r7, r8
  4076d8:	4683      	mov	fp, r0
  4076da:	e7a3      	b.n	407624 <_dtoa_r+0x584>
  4076dc:	201c      	movs	r0, #28
  4076de:	9b08      	ldr	r3, [sp, #32]
  4076e0:	4403      	add	r3, r0
  4076e2:	9308      	str	r3, [sp, #32]
  4076e4:	9b06      	ldr	r3, [sp, #24]
  4076e6:	4403      	add	r3, r0
  4076e8:	4405      	add	r5, r0
  4076ea:	9306      	str	r3, [sp, #24]
  4076ec:	e763      	b.n	4075b6 <_dtoa_r+0x516>
  4076ee:	4641      	mov	r1, r8
  4076f0:	4648      	mov	r0, r9
  4076f2:	f001 fc0f 	bl	408f14 <__mcmp>
  4076f6:	2800      	cmp	r0, #0
  4076f8:	f6bf af73 	bge.w	4075e2 <_dtoa_r+0x542>
  4076fc:	9f02      	ldr	r7, [sp, #8]
  4076fe:	4649      	mov	r1, r9
  407700:	2300      	movs	r3, #0
  407702:	220a      	movs	r2, #10
  407704:	4620      	mov	r0, r4
  407706:	3f01      	subs	r7, #1
  407708:	9702      	str	r7, [sp, #8]
  40770a:	f001 fa35 	bl	408b78 <__multadd>
  40770e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407710:	4681      	mov	r9, r0
  407712:	2b00      	cmp	r3, #0
  407714:	f040 83b6 	bne.w	407e84 <_dtoa_r+0xde4>
  407718:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40771a:	2b00      	cmp	r3, #0
  40771c:	f340 83bf 	ble.w	407e9e <_dtoa_r+0xdfe>
  407720:	930a      	str	r3, [sp, #40]	; 0x28
  407722:	f8dd b010 	ldr.w	fp, [sp, #16]
  407726:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  407728:	465d      	mov	r5, fp
  40772a:	e002      	b.n	407732 <_dtoa_r+0x692>
  40772c:	f001 fa24 	bl	408b78 <__multadd>
  407730:	4681      	mov	r9, r0
  407732:	4641      	mov	r1, r8
  407734:	4648      	mov	r0, r9
  407736:	f7ff fc1d 	bl	406f74 <quorem>
  40773a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  40773e:	f805 ab01 	strb.w	sl, [r5], #1
  407742:	eba5 030b 	sub.w	r3, r5, fp
  407746:	42bb      	cmp	r3, r7
  407748:	f04f 020a 	mov.w	r2, #10
  40774c:	f04f 0300 	mov.w	r3, #0
  407750:	4649      	mov	r1, r9
  407752:	4620      	mov	r0, r4
  407754:	dbea      	blt.n	40772c <_dtoa_r+0x68c>
  407756:	9b04      	ldr	r3, [sp, #16]
  407758:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40775a:	2a01      	cmp	r2, #1
  40775c:	bfac      	ite	ge
  40775e:	189b      	addge	r3, r3, r2
  407760:	3301      	addlt	r3, #1
  407762:	461d      	mov	r5, r3
  407764:	f04f 0b00 	mov.w	fp, #0
  407768:	4649      	mov	r1, r9
  40776a:	2201      	movs	r2, #1
  40776c:	4620      	mov	r0, r4
  40776e:	f001 fb7f 	bl	408e70 <__lshift>
  407772:	4641      	mov	r1, r8
  407774:	4681      	mov	r9, r0
  407776:	f001 fbcd 	bl	408f14 <__mcmp>
  40777a:	2800      	cmp	r0, #0
  40777c:	f340 823d 	ble.w	407bfa <_dtoa_r+0xb5a>
  407780:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  407784:	9904      	ldr	r1, [sp, #16]
  407786:	1e6b      	subs	r3, r5, #1
  407788:	e004      	b.n	407794 <_dtoa_r+0x6f4>
  40778a:	428b      	cmp	r3, r1
  40778c:	f000 81ae 	beq.w	407aec <_dtoa_r+0xa4c>
  407790:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  407794:	2a39      	cmp	r2, #57	; 0x39
  407796:	f103 0501 	add.w	r5, r3, #1
  40779a:	d0f6      	beq.n	40778a <_dtoa_r+0x6ea>
  40779c:	3201      	adds	r2, #1
  40779e:	701a      	strb	r2, [r3, #0]
  4077a0:	4641      	mov	r1, r8
  4077a2:	4620      	mov	r0, r4
  4077a4:	f001 f9de 	bl	408b64 <_Bfree>
  4077a8:	2e00      	cmp	r6, #0
  4077aa:	f43f ae3d 	beq.w	407428 <_dtoa_r+0x388>
  4077ae:	f1bb 0f00 	cmp.w	fp, #0
  4077b2:	d005      	beq.n	4077c0 <_dtoa_r+0x720>
  4077b4:	45b3      	cmp	fp, r6
  4077b6:	d003      	beq.n	4077c0 <_dtoa_r+0x720>
  4077b8:	4659      	mov	r1, fp
  4077ba:	4620      	mov	r0, r4
  4077bc:	f001 f9d2 	bl	408b64 <_Bfree>
  4077c0:	4631      	mov	r1, r6
  4077c2:	4620      	mov	r0, r4
  4077c4:	f001 f9ce 	bl	408b64 <_Bfree>
  4077c8:	e62e      	b.n	407428 <_dtoa_r+0x388>
  4077ca:	2300      	movs	r3, #0
  4077cc:	930b      	str	r3, [sp, #44]	; 0x2c
  4077ce:	9b02      	ldr	r3, [sp, #8]
  4077d0:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4077d2:	4413      	add	r3, r2
  4077d4:	930f      	str	r3, [sp, #60]	; 0x3c
  4077d6:	3301      	adds	r3, #1
  4077d8:	2b01      	cmp	r3, #1
  4077da:	461f      	mov	r7, r3
  4077dc:	461e      	mov	r6, r3
  4077de:	930a      	str	r3, [sp, #40]	; 0x28
  4077e0:	bfb8      	it	lt
  4077e2:	2701      	movlt	r7, #1
  4077e4:	2100      	movs	r1, #0
  4077e6:	2f17      	cmp	r7, #23
  4077e8:	6461      	str	r1, [r4, #68]	; 0x44
  4077ea:	d90a      	bls.n	407802 <_dtoa_r+0x762>
  4077ec:	2201      	movs	r2, #1
  4077ee:	2304      	movs	r3, #4
  4077f0:	005b      	lsls	r3, r3, #1
  4077f2:	f103 0014 	add.w	r0, r3, #20
  4077f6:	4287      	cmp	r7, r0
  4077f8:	4611      	mov	r1, r2
  4077fa:	f102 0201 	add.w	r2, r2, #1
  4077fe:	d2f7      	bcs.n	4077f0 <_dtoa_r+0x750>
  407800:	6461      	str	r1, [r4, #68]	; 0x44
  407802:	4620      	mov	r0, r4
  407804:	f001 f988 	bl	408b18 <_Balloc>
  407808:	2e0e      	cmp	r6, #14
  40780a:	9004      	str	r0, [sp, #16]
  40780c:	6420      	str	r0, [r4, #64]	; 0x40
  40780e:	f63f ad41 	bhi.w	407294 <_dtoa_r+0x1f4>
  407812:	2d00      	cmp	r5, #0
  407814:	f43f ad3e 	beq.w	407294 <_dtoa_r+0x1f4>
  407818:	9902      	ldr	r1, [sp, #8]
  40781a:	2900      	cmp	r1, #0
  40781c:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  407820:	f340 8202 	ble.w	407c28 <_dtoa_r+0xb88>
  407824:	4bb8      	ldr	r3, [pc, #736]	; (407b08 <_dtoa_r+0xa68>)
  407826:	f001 020f 	and.w	r2, r1, #15
  40782a:	110d      	asrs	r5, r1, #4
  40782c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  407830:	06e9      	lsls	r1, r5, #27
  407832:	e9d3 6700 	ldrd	r6, r7, [r3]
  407836:	f140 81ae 	bpl.w	407b96 <_dtoa_r+0xaf6>
  40783a:	4bb4      	ldr	r3, [pc, #720]	; (407b0c <_dtoa_r+0xa6c>)
  40783c:	4650      	mov	r0, sl
  40783e:	4659      	mov	r1, fp
  407840:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  407844:	f002 fbaa 	bl	409f9c <__aeabi_ddiv>
  407848:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40784c:	f005 050f 	and.w	r5, r5, #15
  407850:	f04f 0a03 	mov.w	sl, #3
  407854:	b18d      	cbz	r5, 40787a <_dtoa_r+0x7da>
  407856:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 407b0c <_dtoa_r+0xa6c>
  40785a:	07ea      	lsls	r2, r5, #31
  40785c:	d509      	bpl.n	407872 <_dtoa_r+0x7d2>
  40785e:	4630      	mov	r0, r6
  407860:	4639      	mov	r1, r7
  407862:	e9d8 2300 	ldrd	r2, r3, [r8]
  407866:	f002 fa6f 	bl	409d48 <__aeabi_dmul>
  40786a:	f10a 0a01 	add.w	sl, sl, #1
  40786e:	4606      	mov	r6, r0
  407870:	460f      	mov	r7, r1
  407872:	106d      	asrs	r5, r5, #1
  407874:	f108 0808 	add.w	r8, r8, #8
  407878:	d1ef      	bne.n	40785a <_dtoa_r+0x7ba>
  40787a:	463b      	mov	r3, r7
  40787c:	4632      	mov	r2, r6
  40787e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  407882:	f002 fb8b 	bl	409f9c <__aeabi_ddiv>
  407886:	4607      	mov	r7, r0
  407888:	4688      	mov	r8, r1
  40788a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40788c:	b143      	cbz	r3, 4078a0 <_dtoa_r+0x800>
  40788e:	2200      	movs	r2, #0
  407890:	4b9f      	ldr	r3, [pc, #636]	; (407b10 <_dtoa_r+0xa70>)
  407892:	4638      	mov	r0, r7
  407894:	4641      	mov	r1, r8
  407896:	f002 fcc9 	bl	40a22c <__aeabi_dcmplt>
  40789a:	2800      	cmp	r0, #0
  40789c:	f040 8286 	bne.w	407dac <_dtoa_r+0xd0c>
  4078a0:	4650      	mov	r0, sl
  4078a2:	f002 f9eb 	bl	409c7c <__aeabi_i2d>
  4078a6:	463a      	mov	r2, r7
  4078a8:	4643      	mov	r3, r8
  4078aa:	f002 fa4d 	bl	409d48 <__aeabi_dmul>
  4078ae:	4b99      	ldr	r3, [pc, #612]	; (407b14 <_dtoa_r+0xa74>)
  4078b0:	2200      	movs	r2, #0
  4078b2:	f002 f897 	bl	4099e4 <__adddf3>
  4078b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4078b8:	4605      	mov	r5, r0
  4078ba:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4078be:	2b00      	cmp	r3, #0
  4078c0:	f000 813e 	beq.w	407b40 <_dtoa_r+0xaa0>
  4078c4:	9b02      	ldr	r3, [sp, #8]
  4078c6:	9315      	str	r3, [sp, #84]	; 0x54
  4078c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4078ca:	9312      	str	r3, [sp, #72]	; 0x48
  4078cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4078ce:	2b00      	cmp	r3, #0
  4078d0:	f000 81fa 	beq.w	407cc8 <_dtoa_r+0xc28>
  4078d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4078d6:	4b8c      	ldr	r3, [pc, #560]	; (407b08 <_dtoa_r+0xa68>)
  4078d8:	498f      	ldr	r1, [pc, #572]	; (407b18 <_dtoa_r+0xa78>)
  4078da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4078de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  4078e2:	2000      	movs	r0, #0
  4078e4:	f002 fb5a 	bl	409f9c <__aeabi_ddiv>
  4078e8:	462a      	mov	r2, r5
  4078ea:	4633      	mov	r3, r6
  4078ec:	f002 f878 	bl	4099e0 <__aeabi_dsub>
  4078f0:	4682      	mov	sl, r0
  4078f2:	468b      	mov	fp, r1
  4078f4:	4638      	mov	r0, r7
  4078f6:	4641      	mov	r1, r8
  4078f8:	f002 fcd6 	bl	40a2a8 <__aeabi_d2iz>
  4078fc:	4605      	mov	r5, r0
  4078fe:	f002 f9bd 	bl	409c7c <__aeabi_i2d>
  407902:	4602      	mov	r2, r0
  407904:	460b      	mov	r3, r1
  407906:	4638      	mov	r0, r7
  407908:	4641      	mov	r1, r8
  40790a:	f002 f869 	bl	4099e0 <__aeabi_dsub>
  40790e:	3530      	adds	r5, #48	; 0x30
  407910:	fa5f f885 	uxtb.w	r8, r5
  407914:	9d04      	ldr	r5, [sp, #16]
  407916:	4606      	mov	r6, r0
  407918:	460f      	mov	r7, r1
  40791a:	f885 8000 	strb.w	r8, [r5]
  40791e:	4602      	mov	r2, r0
  407920:	460b      	mov	r3, r1
  407922:	4650      	mov	r0, sl
  407924:	4659      	mov	r1, fp
  407926:	3501      	adds	r5, #1
  407928:	f002 fc9e 	bl	40a268 <__aeabi_dcmpgt>
  40792c:	2800      	cmp	r0, #0
  40792e:	d154      	bne.n	4079da <_dtoa_r+0x93a>
  407930:	4632      	mov	r2, r6
  407932:	463b      	mov	r3, r7
  407934:	2000      	movs	r0, #0
  407936:	4976      	ldr	r1, [pc, #472]	; (407b10 <_dtoa_r+0xa70>)
  407938:	f002 f852 	bl	4099e0 <__aeabi_dsub>
  40793c:	4602      	mov	r2, r0
  40793e:	460b      	mov	r3, r1
  407940:	4650      	mov	r0, sl
  407942:	4659      	mov	r1, fp
  407944:	f002 fc90 	bl	40a268 <__aeabi_dcmpgt>
  407948:	2800      	cmp	r0, #0
  40794a:	f040 8270 	bne.w	407e2e <_dtoa_r+0xd8e>
  40794e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  407950:	2a01      	cmp	r2, #1
  407952:	f000 8111 	beq.w	407b78 <_dtoa_r+0xad8>
  407956:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407958:	9a04      	ldr	r2, [sp, #16]
  40795a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40795e:	4413      	add	r3, r2
  407960:	4699      	mov	r9, r3
  407962:	e00d      	b.n	407980 <_dtoa_r+0x8e0>
  407964:	2000      	movs	r0, #0
  407966:	496a      	ldr	r1, [pc, #424]	; (407b10 <_dtoa_r+0xa70>)
  407968:	f002 f83a 	bl	4099e0 <__aeabi_dsub>
  40796c:	4652      	mov	r2, sl
  40796e:	465b      	mov	r3, fp
  407970:	f002 fc5c 	bl	40a22c <__aeabi_dcmplt>
  407974:	2800      	cmp	r0, #0
  407976:	f040 8258 	bne.w	407e2a <_dtoa_r+0xd8a>
  40797a:	454d      	cmp	r5, r9
  40797c:	f000 80fa 	beq.w	407b74 <_dtoa_r+0xad4>
  407980:	4650      	mov	r0, sl
  407982:	4659      	mov	r1, fp
  407984:	2200      	movs	r2, #0
  407986:	4b65      	ldr	r3, [pc, #404]	; (407b1c <_dtoa_r+0xa7c>)
  407988:	f002 f9de 	bl	409d48 <__aeabi_dmul>
  40798c:	2200      	movs	r2, #0
  40798e:	4b63      	ldr	r3, [pc, #396]	; (407b1c <_dtoa_r+0xa7c>)
  407990:	4682      	mov	sl, r0
  407992:	468b      	mov	fp, r1
  407994:	4630      	mov	r0, r6
  407996:	4639      	mov	r1, r7
  407998:	f002 f9d6 	bl	409d48 <__aeabi_dmul>
  40799c:	460f      	mov	r7, r1
  40799e:	4606      	mov	r6, r0
  4079a0:	f002 fc82 	bl	40a2a8 <__aeabi_d2iz>
  4079a4:	4680      	mov	r8, r0
  4079a6:	f002 f969 	bl	409c7c <__aeabi_i2d>
  4079aa:	4602      	mov	r2, r0
  4079ac:	460b      	mov	r3, r1
  4079ae:	4630      	mov	r0, r6
  4079b0:	4639      	mov	r1, r7
  4079b2:	f002 f815 	bl	4099e0 <__aeabi_dsub>
  4079b6:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4079ba:	fa5f f888 	uxtb.w	r8, r8
  4079be:	4652      	mov	r2, sl
  4079c0:	465b      	mov	r3, fp
  4079c2:	f805 8b01 	strb.w	r8, [r5], #1
  4079c6:	4606      	mov	r6, r0
  4079c8:	460f      	mov	r7, r1
  4079ca:	f002 fc2f 	bl	40a22c <__aeabi_dcmplt>
  4079ce:	4632      	mov	r2, r6
  4079d0:	463b      	mov	r3, r7
  4079d2:	2800      	cmp	r0, #0
  4079d4:	d0c6      	beq.n	407964 <_dtoa_r+0x8c4>
  4079d6:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4079da:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4079dc:	9302      	str	r3, [sp, #8]
  4079de:	e523      	b.n	407428 <_dtoa_r+0x388>
  4079e0:	2300      	movs	r3, #0
  4079e2:	930b      	str	r3, [sp, #44]	; 0x2c
  4079e4:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4079e6:	2b00      	cmp	r3, #0
  4079e8:	f340 80dc 	ble.w	407ba4 <_dtoa_r+0xb04>
  4079ec:	461f      	mov	r7, r3
  4079ee:	461e      	mov	r6, r3
  4079f0:	930f      	str	r3, [sp, #60]	; 0x3c
  4079f2:	930a      	str	r3, [sp, #40]	; 0x28
  4079f4:	e6f6      	b.n	4077e4 <_dtoa_r+0x744>
  4079f6:	2301      	movs	r3, #1
  4079f8:	930b      	str	r3, [sp, #44]	; 0x2c
  4079fa:	e7f3      	b.n	4079e4 <_dtoa_r+0x944>
  4079fc:	f1ba 0f00 	cmp.w	sl, #0
  407a00:	f47f ada8 	bne.w	407554 <_dtoa_r+0x4b4>
  407a04:	f3cb 0313 	ubfx	r3, fp, #0, #20
  407a08:	2b00      	cmp	r3, #0
  407a0a:	f47f adba 	bne.w	407582 <_dtoa_r+0x4e2>
  407a0e:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  407a12:	0d3f      	lsrs	r7, r7, #20
  407a14:	053f      	lsls	r7, r7, #20
  407a16:	2f00      	cmp	r7, #0
  407a18:	f000 820d 	beq.w	407e36 <_dtoa_r+0xd96>
  407a1c:	9b08      	ldr	r3, [sp, #32]
  407a1e:	3301      	adds	r3, #1
  407a20:	9308      	str	r3, [sp, #32]
  407a22:	9b06      	ldr	r3, [sp, #24]
  407a24:	3301      	adds	r3, #1
  407a26:	9306      	str	r3, [sp, #24]
  407a28:	2301      	movs	r3, #1
  407a2a:	930c      	str	r3, [sp, #48]	; 0x30
  407a2c:	e5ab      	b.n	407586 <_dtoa_r+0x4e6>
  407a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407a30:	2b00      	cmp	r3, #0
  407a32:	f73f ac42 	bgt.w	4072ba <_dtoa_r+0x21a>
  407a36:	f040 8221 	bne.w	407e7c <_dtoa_r+0xddc>
  407a3a:	2200      	movs	r2, #0
  407a3c:	4b38      	ldr	r3, [pc, #224]	; (407b20 <_dtoa_r+0xa80>)
  407a3e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  407a42:	f002 f981 	bl	409d48 <__aeabi_dmul>
  407a46:	4652      	mov	r2, sl
  407a48:	465b      	mov	r3, fp
  407a4a:	f002 fc03 	bl	40a254 <__aeabi_dcmpge>
  407a4e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  407a52:	4646      	mov	r6, r8
  407a54:	2800      	cmp	r0, #0
  407a56:	d041      	beq.n	407adc <_dtoa_r+0xa3c>
  407a58:	9b25      	ldr	r3, [sp, #148]	; 0x94
  407a5a:	9d04      	ldr	r5, [sp, #16]
  407a5c:	43db      	mvns	r3, r3
  407a5e:	9302      	str	r3, [sp, #8]
  407a60:	4641      	mov	r1, r8
  407a62:	4620      	mov	r0, r4
  407a64:	f001 f87e 	bl	408b64 <_Bfree>
  407a68:	2e00      	cmp	r6, #0
  407a6a:	f43f acdd 	beq.w	407428 <_dtoa_r+0x388>
  407a6e:	e6a7      	b.n	4077c0 <_dtoa_r+0x720>
  407a70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407a72:	4649      	mov	r1, r9
  407a74:	4620      	mov	r0, r4
  407a76:	f001 f9ab 	bl	408dd0 <__pow5mult>
  407a7a:	4681      	mov	r9, r0
  407a7c:	e558      	b.n	407530 <_dtoa_r+0x490>
  407a7e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  407a80:	2a00      	cmp	r2, #0
  407a82:	f000 8187 	beq.w	407d94 <_dtoa_r+0xcf4>
  407a86:	f203 4333 	addw	r3, r3, #1075	; 0x433
  407a8a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  407a8c:	9d08      	ldr	r5, [sp, #32]
  407a8e:	e4f2      	b.n	407476 <_dtoa_r+0x3d6>
  407a90:	f1ba 0f00 	cmp.w	sl, #0
  407a94:	f47f ad75 	bne.w	407582 <_dtoa_r+0x4e2>
  407a98:	e7b4      	b.n	407a04 <_dtoa_r+0x964>
  407a9a:	f001 f86d 	bl	408b78 <__multadd>
  407a9e:	4647      	mov	r7, r8
  407aa0:	4606      	mov	r6, r0
  407aa2:	4683      	mov	fp, r0
  407aa4:	e5be      	b.n	407624 <_dtoa_r+0x584>
  407aa6:	4601      	mov	r1, r0
  407aa8:	4620      	mov	r0, r4
  407aaa:	9306      	str	r3, [sp, #24]
  407aac:	f001 f85a 	bl	408b64 <_Bfree>
  407ab0:	2201      	movs	r2, #1
  407ab2:	9b06      	ldr	r3, [sp, #24]
  407ab4:	e5e0      	b.n	407678 <_dtoa_r+0x5d8>
  407ab6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407ab8:	2b02      	cmp	r3, #2
  407aba:	f77f ad96 	ble.w	4075ea <_dtoa_r+0x54a>
  407abe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407ac0:	2b00      	cmp	r3, #0
  407ac2:	d1c9      	bne.n	407a58 <_dtoa_r+0x9b8>
  407ac4:	4641      	mov	r1, r8
  407ac6:	2205      	movs	r2, #5
  407ac8:	4620      	mov	r0, r4
  407aca:	f001 f855 	bl	408b78 <__multadd>
  407ace:	4601      	mov	r1, r0
  407ad0:	4680      	mov	r8, r0
  407ad2:	4648      	mov	r0, r9
  407ad4:	f001 fa1e 	bl	408f14 <__mcmp>
  407ad8:	2800      	cmp	r0, #0
  407ada:	ddbd      	ble.n	407a58 <_dtoa_r+0x9b8>
  407adc:	9a02      	ldr	r2, [sp, #8]
  407ade:	9904      	ldr	r1, [sp, #16]
  407ae0:	2331      	movs	r3, #49	; 0x31
  407ae2:	3201      	adds	r2, #1
  407ae4:	9202      	str	r2, [sp, #8]
  407ae6:	700b      	strb	r3, [r1, #0]
  407ae8:	1c4d      	adds	r5, r1, #1
  407aea:	e7b9      	b.n	407a60 <_dtoa_r+0x9c0>
  407aec:	9a02      	ldr	r2, [sp, #8]
  407aee:	3201      	adds	r2, #1
  407af0:	9202      	str	r2, [sp, #8]
  407af2:	9a04      	ldr	r2, [sp, #16]
  407af4:	2331      	movs	r3, #49	; 0x31
  407af6:	7013      	strb	r3, [r2, #0]
  407af8:	e652      	b.n	4077a0 <_dtoa_r+0x700>
  407afa:	2301      	movs	r3, #1
  407afc:	930b      	str	r3, [sp, #44]	; 0x2c
  407afe:	e666      	b.n	4077ce <_dtoa_r+0x72e>
  407b00:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  407b04:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  407b06:	e48f      	b.n	407428 <_dtoa_r+0x388>
  407b08:	0040a7f0 	.word	0x0040a7f0
  407b0c:	0040a7c8 	.word	0x0040a7c8
  407b10:	3ff00000 	.word	0x3ff00000
  407b14:	401c0000 	.word	0x401c0000
  407b18:	3fe00000 	.word	0x3fe00000
  407b1c:	40240000 	.word	0x40240000
  407b20:	40140000 	.word	0x40140000
  407b24:	4650      	mov	r0, sl
  407b26:	f002 f8a9 	bl	409c7c <__aeabi_i2d>
  407b2a:	463a      	mov	r2, r7
  407b2c:	4643      	mov	r3, r8
  407b2e:	f002 f90b 	bl	409d48 <__aeabi_dmul>
  407b32:	2200      	movs	r2, #0
  407b34:	4bc1      	ldr	r3, [pc, #772]	; (407e3c <_dtoa_r+0xd9c>)
  407b36:	f001 ff55 	bl	4099e4 <__adddf3>
  407b3a:	4605      	mov	r5, r0
  407b3c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  407b40:	4641      	mov	r1, r8
  407b42:	2200      	movs	r2, #0
  407b44:	4bbe      	ldr	r3, [pc, #760]	; (407e40 <_dtoa_r+0xda0>)
  407b46:	4638      	mov	r0, r7
  407b48:	f001 ff4a 	bl	4099e0 <__aeabi_dsub>
  407b4c:	462a      	mov	r2, r5
  407b4e:	4633      	mov	r3, r6
  407b50:	4682      	mov	sl, r0
  407b52:	468b      	mov	fp, r1
  407b54:	f002 fb88 	bl	40a268 <__aeabi_dcmpgt>
  407b58:	4680      	mov	r8, r0
  407b5a:	2800      	cmp	r0, #0
  407b5c:	f040 8110 	bne.w	407d80 <_dtoa_r+0xce0>
  407b60:	462a      	mov	r2, r5
  407b62:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  407b66:	4650      	mov	r0, sl
  407b68:	4659      	mov	r1, fp
  407b6a:	f002 fb5f 	bl	40a22c <__aeabi_dcmplt>
  407b6e:	b118      	cbz	r0, 407b78 <_dtoa_r+0xad8>
  407b70:	4646      	mov	r6, r8
  407b72:	e771      	b.n	407a58 <_dtoa_r+0x9b8>
  407b74:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  407b78:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  407b7c:	f7ff bb8a 	b.w	407294 <_dtoa_r+0x1f4>
  407b80:	9804      	ldr	r0, [sp, #16]
  407b82:	f7ff babb 	b.w	4070fc <_dtoa_r+0x5c>
  407b86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407b88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  407b8a:	970c      	str	r7, [sp, #48]	; 0x30
  407b8c:	1afb      	subs	r3, r7, r3
  407b8e:	441a      	add	r2, r3
  407b90:	920d      	str	r2, [sp, #52]	; 0x34
  407b92:	2700      	movs	r7, #0
  407b94:	e469      	b.n	40746a <_dtoa_r+0x3ca>
  407b96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  407b9a:	f04f 0a02 	mov.w	sl, #2
  407b9e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  407ba2:	e657      	b.n	407854 <_dtoa_r+0x7b4>
  407ba4:	2100      	movs	r1, #0
  407ba6:	2301      	movs	r3, #1
  407ba8:	6461      	str	r1, [r4, #68]	; 0x44
  407baa:	4620      	mov	r0, r4
  407bac:	9325      	str	r3, [sp, #148]	; 0x94
  407bae:	f000 ffb3 	bl	408b18 <_Balloc>
  407bb2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  407bb4:	9004      	str	r0, [sp, #16]
  407bb6:	6420      	str	r0, [r4, #64]	; 0x40
  407bb8:	930a      	str	r3, [sp, #40]	; 0x28
  407bba:	930f      	str	r3, [sp, #60]	; 0x3c
  407bbc:	e629      	b.n	407812 <_dtoa_r+0x772>
  407bbe:	2a00      	cmp	r2, #0
  407bc0:	46d0      	mov	r8, sl
  407bc2:	f8cd b018 	str.w	fp, [sp, #24]
  407bc6:	469a      	mov	sl, r3
  407bc8:	dd11      	ble.n	407bee <_dtoa_r+0xb4e>
  407bca:	4649      	mov	r1, r9
  407bcc:	2201      	movs	r2, #1
  407bce:	4620      	mov	r0, r4
  407bd0:	f001 f94e 	bl	408e70 <__lshift>
  407bd4:	4641      	mov	r1, r8
  407bd6:	4681      	mov	r9, r0
  407bd8:	f001 f99c 	bl	408f14 <__mcmp>
  407bdc:	2800      	cmp	r0, #0
  407bde:	f340 8146 	ble.w	407e6e <_dtoa_r+0xdce>
  407be2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  407be6:	f000 8106 	beq.w	407df6 <_dtoa_r+0xd56>
  407bea:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  407bee:	46b3      	mov	fp, r6
  407bf0:	f887 a000 	strb.w	sl, [r7]
  407bf4:	1c7d      	adds	r5, r7, #1
  407bf6:	9e06      	ldr	r6, [sp, #24]
  407bf8:	e5d2      	b.n	4077a0 <_dtoa_r+0x700>
  407bfa:	d104      	bne.n	407c06 <_dtoa_r+0xb66>
  407bfc:	f01a 0f01 	tst.w	sl, #1
  407c00:	d001      	beq.n	407c06 <_dtoa_r+0xb66>
  407c02:	e5bd      	b.n	407780 <_dtoa_r+0x6e0>
  407c04:	4615      	mov	r5, r2
  407c06:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  407c0a:	2b30      	cmp	r3, #48	; 0x30
  407c0c:	f105 32ff 	add.w	r2, r5, #4294967295
  407c10:	d0f8      	beq.n	407c04 <_dtoa_r+0xb64>
  407c12:	e5c5      	b.n	4077a0 <_dtoa_r+0x700>
  407c14:	9904      	ldr	r1, [sp, #16]
  407c16:	2230      	movs	r2, #48	; 0x30
  407c18:	700a      	strb	r2, [r1, #0]
  407c1a:	9a02      	ldr	r2, [sp, #8]
  407c1c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  407c20:	3201      	adds	r2, #1
  407c22:	9202      	str	r2, [sp, #8]
  407c24:	f7ff bbfc 	b.w	407420 <_dtoa_r+0x380>
  407c28:	f000 80bb 	beq.w	407da2 <_dtoa_r+0xd02>
  407c2c:	9b02      	ldr	r3, [sp, #8]
  407c2e:	425d      	negs	r5, r3
  407c30:	4b84      	ldr	r3, [pc, #528]	; (407e44 <_dtoa_r+0xda4>)
  407c32:	f005 020f 	and.w	r2, r5, #15
  407c36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  407c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
  407c3e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  407c42:	f002 f881 	bl	409d48 <__aeabi_dmul>
  407c46:	112d      	asrs	r5, r5, #4
  407c48:	4607      	mov	r7, r0
  407c4a:	4688      	mov	r8, r1
  407c4c:	f000 812c 	beq.w	407ea8 <_dtoa_r+0xe08>
  407c50:	4e7d      	ldr	r6, [pc, #500]	; (407e48 <_dtoa_r+0xda8>)
  407c52:	f04f 0a02 	mov.w	sl, #2
  407c56:	07eb      	lsls	r3, r5, #31
  407c58:	d509      	bpl.n	407c6e <_dtoa_r+0xbce>
  407c5a:	4638      	mov	r0, r7
  407c5c:	4641      	mov	r1, r8
  407c5e:	e9d6 2300 	ldrd	r2, r3, [r6]
  407c62:	f002 f871 	bl	409d48 <__aeabi_dmul>
  407c66:	f10a 0a01 	add.w	sl, sl, #1
  407c6a:	4607      	mov	r7, r0
  407c6c:	4688      	mov	r8, r1
  407c6e:	106d      	asrs	r5, r5, #1
  407c70:	f106 0608 	add.w	r6, r6, #8
  407c74:	d1ef      	bne.n	407c56 <_dtoa_r+0xbb6>
  407c76:	e608      	b.n	40788a <_dtoa_r+0x7ea>
  407c78:	6871      	ldr	r1, [r6, #4]
  407c7a:	4620      	mov	r0, r4
  407c7c:	f000 ff4c 	bl	408b18 <_Balloc>
  407c80:	6933      	ldr	r3, [r6, #16]
  407c82:	3302      	adds	r3, #2
  407c84:	009a      	lsls	r2, r3, #2
  407c86:	4605      	mov	r5, r0
  407c88:	f106 010c 	add.w	r1, r6, #12
  407c8c:	300c      	adds	r0, #12
  407c8e:	f7fc fd03 	bl	404698 <memcpy>
  407c92:	4629      	mov	r1, r5
  407c94:	2201      	movs	r2, #1
  407c96:	4620      	mov	r0, r4
  407c98:	f001 f8ea 	bl	408e70 <__lshift>
  407c9c:	9006      	str	r0, [sp, #24]
  407c9e:	e4b5      	b.n	40760c <_dtoa_r+0x56c>
  407ca0:	2b39      	cmp	r3, #57	; 0x39
  407ca2:	f8cd b018 	str.w	fp, [sp, #24]
  407ca6:	46d0      	mov	r8, sl
  407ca8:	f000 80a5 	beq.w	407df6 <_dtoa_r+0xd56>
  407cac:	f103 0a01 	add.w	sl, r3, #1
  407cb0:	46b3      	mov	fp, r6
  407cb2:	f887 a000 	strb.w	sl, [r7]
  407cb6:	1c7d      	adds	r5, r7, #1
  407cb8:	9e06      	ldr	r6, [sp, #24]
  407cba:	e571      	b.n	4077a0 <_dtoa_r+0x700>
  407cbc:	465a      	mov	r2, fp
  407cbe:	46d0      	mov	r8, sl
  407cc0:	46b3      	mov	fp, r6
  407cc2:	469a      	mov	sl, r3
  407cc4:	4616      	mov	r6, r2
  407cc6:	e54f      	b.n	407768 <_dtoa_r+0x6c8>
  407cc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407cca:	495e      	ldr	r1, [pc, #376]	; (407e44 <_dtoa_r+0xda4>)
  407ccc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  407cd0:	462a      	mov	r2, r5
  407cd2:	4633      	mov	r3, r6
  407cd4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  407cd8:	f002 f836 	bl	409d48 <__aeabi_dmul>
  407cdc:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  407ce0:	4638      	mov	r0, r7
  407ce2:	4641      	mov	r1, r8
  407ce4:	f002 fae0 	bl	40a2a8 <__aeabi_d2iz>
  407ce8:	4605      	mov	r5, r0
  407cea:	f001 ffc7 	bl	409c7c <__aeabi_i2d>
  407cee:	460b      	mov	r3, r1
  407cf0:	4602      	mov	r2, r0
  407cf2:	4641      	mov	r1, r8
  407cf4:	4638      	mov	r0, r7
  407cf6:	f001 fe73 	bl	4099e0 <__aeabi_dsub>
  407cfa:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407cfc:	460f      	mov	r7, r1
  407cfe:	9904      	ldr	r1, [sp, #16]
  407d00:	3530      	adds	r5, #48	; 0x30
  407d02:	2b01      	cmp	r3, #1
  407d04:	700d      	strb	r5, [r1, #0]
  407d06:	4606      	mov	r6, r0
  407d08:	f101 0501 	add.w	r5, r1, #1
  407d0c:	d026      	beq.n	407d5c <_dtoa_r+0xcbc>
  407d0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407d10:	9a04      	ldr	r2, [sp, #16]
  407d12:	f8df b13c 	ldr.w	fp, [pc, #316]	; 407e50 <_dtoa_r+0xdb0>
  407d16:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  407d1a:	4413      	add	r3, r2
  407d1c:	f04f 0a00 	mov.w	sl, #0
  407d20:	4699      	mov	r9, r3
  407d22:	4652      	mov	r2, sl
  407d24:	465b      	mov	r3, fp
  407d26:	4630      	mov	r0, r6
  407d28:	4639      	mov	r1, r7
  407d2a:	f002 f80d 	bl	409d48 <__aeabi_dmul>
  407d2e:	460f      	mov	r7, r1
  407d30:	4606      	mov	r6, r0
  407d32:	f002 fab9 	bl	40a2a8 <__aeabi_d2iz>
  407d36:	4680      	mov	r8, r0
  407d38:	f001 ffa0 	bl	409c7c <__aeabi_i2d>
  407d3c:	f108 0830 	add.w	r8, r8, #48	; 0x30
  407d40:	4602      	mov	r2, r0
  407d42:	460b      	mov	r3, r1
  407d44:	4630      	mov	r0, r6
  407d46:	4639      	mov	r1, r7
  407d48:	f001 fe4a 	bl	4099e0 <__aeabi_dsub>
  407d4c:	f805 8b01 	strb.w	r8, [r5], #1
  407d50:	454d      	cmp	r5, r9
  407d52:	4606      	mov	r6, r0
  407d54:	460f      	mov	r7, r1
  407d56:	d1e4      	bne.n	407d22 <_dtoa_r+0xc82>
  407d58:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  407d5c:	4b3b      	ldr	r3, [pc, #236]	; (407e4c <_dtoa_r+0xdac>)
  407d5e:	2200      	movs	r2, #0
  407d60:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  407d64:	f001 fe3e 	bl	4099e4 <__adddf3>
  407d68:	4632      	mov	r2, r6
  407d6a:	463b      	mov	r3, r7
  407d6c:	f002 fa5e 	bl	40a22c <__aeabi_dcmplt>
  407d70:	2800      	cmp	r0, #0
  407d72:	d046      	beq.n	407e02 <_dtoa_r+0xd62>
  407d74:	9b15      	ldr	r3, [sp, #84]	; 0x54
  407d76:	9302      	str	r3, [sp, #8]
  407d78:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  407d7c:	f7ff bb43 	b.w	407406 <_dtoa_r+0x366>
  407d80:	f04f 0800 	mov.w	r8, #0
  407d84:	4646      	mov	r6, r8
  407d86:	e6a9      	b.n	407adc <_dtoa_r+0xa3c>
  407d88:	9b08      	ldr	r3, [sp, #32]
  407d8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  407d8c:	1a9d      	subs	r5, r3, r2
  407d8e:	2300      	movs	r3, #0
  407d90:	f7ff bb71 	b.w	407476 <_dtoa_r+0x3d6>
  407d94:	9b18      	ldr	r3, [sp, #96]	; 0x60
  407d96:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  407d98:	9d08      	ldr	r5, [sp, #32]
  407d9a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  407d9e:	f7ff bb6a 	b.w	407476 <_dtoa_r+0x3d6>
  407da2:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  407da6:	f04f 0a02 	mov.w	sl, #2
  407daa:	e56e      	b.n	40788a <_dtoa_r+0x7ea>
  407dac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407dae:	2b00      	cmp	r3, #0
  407db0:	f43f aeb8 	beq.w	407b24 <_dtoa_r+0xa84>
  407db4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407db6:	2b00      	cmp	r3, #0
  407db8:	f77f aede 	ble.w	407b78 <_dtoa_r+0xad8>
  407dbc:	2200      	movs	r2, #0
  407dbe:	4b24      	ldr	r3, [pc, #144]	; (407e50 <_dtoa_r+0xdb0>)
  407dc0:	4638      	mov	r0, r7
  407dc2:	4641      	mov	r1, r8
  407dc4:	f001 ffc0 	bl	409d48 <__aeabi_dmul>
  407dc8:	4607      	mov	r7, r0
  407dca:	4688      	mov	r8, r1
  407dcc:	f10a 0001 	add.w	r0, sl, #1
  407dd0:	f001 ff54 	bl	409c7c <__aeabi_i2d>
  407dd4:	463a      	mov	r2, r7
  407dd6:	4643      	mov	r3, r8
  407dd8:	f001 ffb6 	bl	409d48 <__aeabi_dmul>
  407ddc:	2200      	movs	r2, #0
  407dde:	4b17      	ldr	r3, [pc, #92]	; (407e3c <_dtoa_r+0xd9c>)
  407de0:	f001 fe00 	bl	4099e4 <__adddf3>
  407de4:	9a02      	ldr	r2, [sp, #8]
  407de6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407de8:	9312      	str	r3, [sp, #72]	; 0x48
  407dea:	3a01      	subs	r2, #1
  407dec:	4605      	mov	r5, r0
  407dee:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  407df2:	9215      	str	r2, [sp, #84]	; 0x54
  407df4:	e56a      	b.n	4078cc <_dtoa_r+0x82c>
  407df6:	2239      	movs	r2, #57	; 0x39
  407df8:	46b3      	mov	fp, r6
  407dfa:	703a      	strb	r2, [r7, #0]
  407dfc:	9e06      	ldr	r6, [sp, #24]
  407dfe:	1c7d      	adds	r5, r7, #1
  407e00:	e4c0      	b.n	407784 <_dtoa_r+0x6e4>
  407e02:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  407e06:	2000      	movs	r0, #0
  407e08:	4910      	ldr	r1, [pc, #64]	; (407e4c <_dtoa_r+0xdac>)
  407e0a:	f001 fde9 	bl	4099e0 <__aeabi_dsub>
  407e0e:	4632      	mov	r2, r6
  407e10:	463b      	mov	r3, r7
  407e12:	f002 fa29 	bl	40a268 <__aeabi_dcmpgt>
  407e16:	b908      	cbnz	r0, 407e1c <_dtoa_r+0xd7c>
  407e18:	e6ae      	b.n	407b78 <_dtoa_r+0xad8>
  407e1a:	4615      	mov	r5, r2
  407e1c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  407e20:	2b30      	cmp	r3, #48	; 0x30
  407e22:	f105 32ff 	add.w	r2, r5, #4294967295
  407e26:	d0f8      	beq.n	407e1a <_dtoa_r+0xd7a>
  407e28:	e5d7      	b.n	4079da <_dtoa_r+0x93a>
  407e2a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  407e2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  407e30:	9302      	str	r3, [sp, #8]
  407e32:	f7ff bae8 	b.w	407406 <_dtoa_r+0x366>
  407e36:	970c      	str	r7, [sp, #48]	; 0x30
  407e38:	f7ff bba5 	b.w	407586 <_dtoa_r+0x4e6>
  407e3c:	401c0000 	.word	0x401c0000
  407e40:	40140000 	.word	0x40140000
  407e44:	0040a7f0 	.word	0x0040a7f0
  407e48:	0040a7c8 	.word	0x0040a7c8
  407e4c:	3fe00000 	.word	0x3fe00000
  407e50:	40240000 	.word	0x40240000
  407e54:	2b39      	cmp	r3, #57	; 0x39
  407e56:	f8cd b018 	str.w	fp, [sp, #24]
  407e5a:	46d0      	mov	r8, sl
  407e5c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  407e60:	469a      	mov	sl, r3
  407e62:	d0c8      	beq.n	407df6 <_dtoa_r+0xd56>
  407e64:	f1bb 0f00 	cmp.w	fp, #0
  407e68:	f73f aebf 	bgt.w	407bea <_dtoa_r+0xb4a>
  407e6c:	e6bf      	b.n	407bee <_dtoa_r+0xb4e>
  407e6e:	f47f aebe 	bne.w	407bee <_dtoa_r+0xb4e>
  407e72:	f01a 0f01 	tst.w	sl, #1
  407e76:	f43f aeba 	beq.w	407bee <_dtoa_r+0xb4e>
  407e7a:	e6b2      	b.n	407be2 <_dtoa_r+0xb42>
  407e7c:	f04f 0800 	mov.w	r8, #0
  407e80:	4646      	mov	r6, r8
  407e82:	e5e9      	b.n	407a58 <_dtoa_r+0x9b8>
  407e84:	4631      	mov	r1, r6
  407e86:	2300      	movs	r3, #0
  407e88:	220a      	movs	r2, #10
  407e8a:	4620      	mov	r0, r4
  407e8c:	f000 fe74 	bl	408b78 <__multadd>
  407e90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407e92:	2b00      	cmp	r3, #0
  407e94:	4606      	mov	r6, r0
  407e96:	dd0a      	ble.n	407eae <_dtoa_r+0xe0e>
  407e98:	930a      	str	r3, [sp, #40]	; 0x28
  407e9a:	f7ff bbaa 	b.w	4075f2 <_dtoa_r+0x552>
  407e9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407ea0:	2b02      	cmp	r3, #2
  407ea2:	dc23      	bgt.n	407eec <_dtoa_r+0xe4c>
  407ea4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407ea6:	e43b      	b.n	407720 <_dtoa_r+0x680>
  407ea8:	f04f 0a02 	mov.w	sl, #2
  407eac:	e4ed      	b.n	40788a <_dtoa_r+0x7ea>
  407eae:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407eb0:	2b02      	cmp	r3, #2
  407eb2:	dc1b      	bgt.n	407eec <_dtoa_r+0xe4c>
  407eb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407eb6:	e7ef      	b.n	407e98 <_dtoa_r+0xdf8>
  407eb8:	2500      	movs	r5, #0
  407eba:	6465      	str	r5, [r4, #68]	; 0x44
  407ebc:	4629      	mov	r1, r5
  407ebe:	4620      	mov	r0, r4
  407ec0:	f000 fe2a 	bl	408b18 <_Balloc>
  407ec4:	f04f 33ff 	mov.w	r3, #4294967295
  407ec8:	930a      	str	r3, [sp, #40]	; 0x28
  407eca:	930f      	str	r3, [sp, #60]	; 0x3c
  407ecc:	2301      	movs	r3, #1
  407ece:	9004      	str	r0, [sp, #16]
  407ed0:	9525      	str	r5, [sp, #148]	; 0x94
  407ed2:	6420      	str	r0, [r4, #64]	; 0x40
  407ed4:	930b      	str	r3, [sp, #44]	; 0x2c
  407ed6:	f7ff b9dd 	b.w	407294 <_dtoa_r+0x1f4>
  407eda:	2501      	movs	r5, #1
  407edc:	f7ff b9a5 	b.w	40722a <_dtoa_r+0x18a>
  407ee0:	f43f ab69 	beq.w	4075b6 <_dtoa_r+0x516>
  407ee4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  407ee8:	f7ff bbf9 	b.w	4076de <_dtoa_r+0x63e>
  407eec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407eee:	930a      	str	r3, [sp, #40]	; 0x28
  407ef0:	e5e5      	b.n	407abe <_dtoa_r+0xa1e>
  407ef2:	bf00      	nop

00407ef4 <__sflush_r>:
  407ef4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  407ef8:	b29a      	uxth	r2, r3
  407efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407efe:	460d      	mov	r5, r1
  407f00:	0711      	lsls	r1, r2, #28
  407f02:	4680      	mov	r8, r0
  407f04:	d43a      	bmi.n	407f7c <__sflush_r+0x88>
  407f06:	686a      	ldr	r2, [r5, #4]
  407f08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  407f0c:	2a00      	cmp	r2, #0
  407f0e:	81ab      	strh	r3, [r5, #12]
  407f10:	dd6f      	ble.n	407ff2 <__sflush_r+0xfe>
  407f12:	6aac      	ldr	r4, [r5, #40]	; 0x28
  407f14:	2c00      	cmp	r4, #0
  407f16:	d049      	beq.n	407fac <__sflush_r+0xb8>
  407f18:	2200      	movs	r2, #0
  407f1a:	b29b      	uxth	r3, r3
  407f1c:	f8d8 6000 	ldr.w	r6, [r8]
  407f20:	f8c8 2000 	str.w	r2, [r8]
  407f24:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  407f28:	d067      	beq.n	407ffa <__sflush_r+0x106>
  407f2a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  407f2c:	075f      	lsls	r7, r3, #29
  407f2e:	d505      	bpl.n	407f3c <__sflush_r+0x48>
  407f30:	6869      	ldr	r1, [r5, #4]
  407f32:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  407f34:	1a52      	subs	r2, r2, r1
  407f36:	b10b      	cbz	r3, 407f3c <__sflush_r+0x48>
  407f38:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  407f3a:	1ad2      	subs	r2, r2, r3
  407f3c:	2300      	movs	r3, #0
  407f3e:	69e9      	ldr	r1, [r5, #28]
  407f40:	4640      	mov	r0, r8
  407f42:	47a0      	blx	r4
  407f44:	1c44      	adds	r4, r0, #1
  407f46:	d03c      	beq.n	407fc2 <__sflush_r+0xce>
  407f48:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  407f4c:	692a      	ldr	r2, [r5, #16]
  407f4e:	602a      	str	r2, [r5, #0]
  407f50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  407f54:	2200      	movs	r2, #0
  407f56:	81ab      	strh	r3, [r5, #12]
  407f58:	04db      	lsls	r3, r3, #19
  407f5a:	606a      	str	r2, [r5, #4]
  407f5c:	d447      	bmi.n	407fee <__sflush_r+0xfa>
  407f5e:	6b29      	ldr	r1, [r5, #48]	; 0x30
  407f60:	f8c8 6000 	str.w	r6, [r8]
  407f64:	b311      	cbz	r1, 407fac <__sflush_r+0xb8>
  407f66:	f105 0340 	add.w	r3, r5, #64	; 0x40
  407f6a:	4299      	cmp	r1, r3
  407f6c:	d002      	beq.n	407f74 <__sflush_r+0x80>
  407f6e:	4640      	mov	r0, r8
  407f70:	f000 f9de 	bl	408330 <_free_r>
  407f74:	2000      	movs	r0, #0
  407f76:	6328      	str	r0, [r5, #48]	; 0x30
  407f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407f7c:	692e      	ldr	r6, [r5, #16]
  407f7e:	b1ae      	cbz	r6, 407fac <__sflush_r+0xb8>
  407f80:	682c      	ldr	r4, [r5, #0]
  407f82:	602e      	str	r6, [r5, #0]
  407f84:	0791      	lsls	r1, r2, #30
  407f86:	bf0c      	ite	eq
  407f88:	696b      	ldreq	r3, [r5, #20]
  407f8a:	2300      	movne	r3, #0
  407f8c:	1ba4      	subs	r4, r4, r6
  407f8e:	60ab      	str	r3, [r5, #8]
  407f90:	e00a      	b.n	407fa8 <__sflush_r+0xb4>
  407f92:	4623      	mov	r3, r4
  407f94:	4632      	mov	r2, r6
  407f96:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  407f98:	69e9      	ldr	r1, [r5, #28]
  407f9a:	4640      	mov	r0, r8
  407f9c:	47b8      	blx	r7
  407f9e:	2800      	cmp	r0, #0
  407fa0:	eba4 0400 	sub.w	r4, r4, r0
  407fa4:	4406      	add	r6, r0
  407fa6:	dd04      	ble.n	407fb2 <__sflush_r+0xbe>
  407fa8:	2c00      	cmp	r4, #0
  407faa:	dcf2      	bgt.n	407f92 <__sflush_r+0x9e>
  407fac:	2000      	movs	r0, #0
  407fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407fb2:	89ab      	ldrh	r3, [r5, #12]
  407fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407fb8:	81ab      	strh	r3, [r5, #12]
  407fba:	f04f 30ff 	mov.w	r0, #4294967295
  407fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407fc2:	f8d8 4000 	ldr.w	r4, [r8]
  407fc6:	2c1d      	cmp	r4, #29
  407fc8:	d8f3      	bhi.n	407fb2 <__sflush_r+0xbe>
  407fca:	4b19      	ldr	r3, [pc, #100]	; (408030 <__sflush_r+0x13c>)
  407fcc:	40e3      	lsrs	r3, r4
  407fce:	43db      	mvns	r3, r3
  407fd0:	f013 0301 	ands.w	r3, r3, #1
  407fd4:	d1ed      	bne.n	407fb2 <__sflush_r+0xbe>
  407fd6:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  407fda:	606b      	str	r3, [r5, #4]
  407fdc:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  407fe0:	6929      	ldr	r1, [r5, #16]
  407fe2:	81ab      	strh	r3, [r5, #12]
  407fe4:	04da      	lsls	r2, r3, #19
  407fe6:	6029      	str	r1, [r5, #0]
  407fe8:	d5b9      	bpl.n	407f5e <__sflush_r+0x6a>
  407fea:	2c00      	cmp	r4, #0
  407fec:	d1b7      	bne.n	407f5e <__sflush_r+0x6a>
  407fee:	6528      	str	r0, [r5, #80]	; 0x50
  407ff0:	e7b5      	b.n	407f5e <__sflush_r+0x6a>
  407ff2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  407ff4:	2a00      	cmp	r2, #0
  407ff6:	dc8c      	bgt.n	407f12 <__sflush_r+0x1e>
  407ff8:	e7d8      	b.n	407fac <__sflush_r+0xb8>
  407ffa:	2301      	movs	r3, #1
  407ffc:	69e9      	ldr	r1, [r5, #28]
  407ffe:	4640      	mov	r0, r8
  408000:	47a0      	blx	r4
  408002:	1c43      	adds	r3, r0, #1
  408004:	4602      	mov	r2, r0
  408006:	d002      	beq.n	40800e <__sflush_r+0x11a>
  408008:	89ab      	ldrh	r3, [r5, #12]
  40800a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40800c:	e78e      	b.n	407f2c <__sflush_r+0x38>
  40800e:	f8d8 3000 	ldr.w	r3, [r8]
  408012:	2b00      	cmp	r3, #0
  408014:	d0f8      	beq.n	408008 <__sflush_r+0x114>
  408016:	2b1d      	cmp	r3, #29
  408018:	d001      	beq.n	40801e <__sflush_r+0x12a>
  40801a:	2b16      	cmp	r3, #22
  40801c:	d102      	bne.n	408024 <__sflush_r+0x130>
  40801e:	f8c8 6000 	str.w	r6, [r8]
  408022:	e7c3      	b.n	407fac <__sflush_r+0xb8>
  408024:	89ab      	ldrh	r3, [r5, #12]
  408026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40802a:	81ab      	strh	r3, [r5, #12]
  40802c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408030:	20400001 	.word	0x20400001

00408034 <_fflush_r>:
  408034:	b538      	push	{r3, r4, r5, lr}
  408036:	460d      	mov	r5, r1
  408038:	4604      	mov	r4, r0
  40803a:	b108      	cbz	r0, 408040 <_fflush_r+0xc>
  40803c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40803e:	b1bb      	cbz	r3, 408070 <_fflush_r+0x3c>
  408040:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  408044:	b188      	cbz	r0, 40806a <_fflush_r+0x36>
  408046:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  408048:	07db      	lsls	r3, r3, #31
  40804a:	d401      	bmi.n	408050 <_fflush_r+0x1c>
  40804c:	0581      	lsls	r1, r0, #22
  40804e:	d517      	bpl.n	408080 <_fflush_r+0x4c>
  408050:	4620      	mov	r0, r4
  408052:	4629      	mov	r1, r5
  408054:	f7ff ff4e 	bl	407ef4 <__sflush_r>
  408058:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40805a:	07da      	lsls	r2, r3, #31
  40805c:	4604      	mov	r4, r0
  40805e:	d402      	bmi.n	408066 <_fflush_r+0x32>
  408060:	89ab      	ldrh	r3, [r5, #12]
  408062:	059b      	lsls	r3, r3, #22
  408064:	d507      	bpl.n	408076 <_fflush_r+0x42>
  408066:	4620      	mov	r0, r4
  408068:	bd38      	pop	{r3, r4, r5, pc}
  40806a:	4604      	mov	r4, r0
  40806c:	4620      	mov	r0, r4
  40806e:	bd38      	pop	{r3, r4, r5, pc}
  408070:	f000 f838 	bl	4080e4 <__sinit>
  408074:	e7e4      	b.n	408040 <_fflush_r+0xc>
  408076:	6da8      	ldr	r0, [r5, #88]	; 0x58
  408078:	f000 fc04 	bl	408884 <__retarget_lock_release_recursive>
  40807c:	4620      	mov	r0, r4
  40807e:	bd38      	pop	{r3, r4, r5, pc}
  408080:	6da8      	ldr	r0, [r5, #88]	; 0x58
  408082:	f000 fbfd 	bl	408880 <__retarget_lock_acquire_recursive>
  408086:	e7e3      	b.n	408050 <_fflush_r+0x1c>

00408088 <_cleanup_r>:
  408088:	4901      	ldr	r1, [pc, #4]	; (408090 <_cleanup_r+0x8>)
  40808a:	f000 bbaf 	b.w	4087ec <_fwalk_reent>
  40808e:	bf00      	nop
  408090:	00409871 	.word	0x00409871

00408094 <std.isra.0>:
  408094:	b510      	push	{r4, lr}
  408096:	2300      	movs	r3, #0
  408098:	4604      	mov	r4, r0
  40809a:	8181      	strh	r1, [r0, #12]
  40809c:	81c2      	strh	r2, [r0, #14]
  40809e:	6003      	str	r3, [r0, #0]
  4080a0:	6043      	str	r3, [r0, #4]
  4080a2:	6083      	str	r3, [r0, #8]
  4080a4:	6643      	str	r3, [r0, #100]	; 0x64
  4080a6:	6103      	str	r3, [r0, #16]
  4080a8:	6143      	str	r3, [r0, #20]
  4080aa:	6183      	str	r3, [r0, #24]
  4080ac:	4619      	mov	r1, r3
  4080ae:	2208      	movs	r2, #8
  4080b0:	305c      	adds	r0, #92	; 0x5c
  4080b2:	f7fc fb8b 	bl	4047cc <memset>
  4080b6:	4807      	ldr	r0, [pc, #28]	; (4080d4 <std.isra.0+0x40>)
  4080b8:	4907      	ldr	r1, [pc, #28]	; (4080d8 <std.isra.0+0x44>)
  4080ba:	4a08      	ldr	r2, [pc, #32]	; (4080dc <std.isra.0+0x48>)
  4080bc:	4b08      	ldr	r3, [pc, #32]	; (4080e0 <std.isra.0+0x4c>)
  4080be:	6220      	str	r0, [r4, #32]
  4080c0:	61e4      	str	r4, [r4, #28]
  4080c2:	6261      	str	r1, [r4, #36]	; 0x24
  4080c4:	62a2      	str	r2, [r4, #40]	; 0x28
  4080c6:	62e3      	str	r3, [r4, #44]	; 0x2c
  4080c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4080cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4080d0:	f000 bbd2 	b.w	408878 <__retarget_lock_init_recursive>
  4080d4:	00409459 	.word	0x00409459
  4080d8:	0040947d 	.word	0x0040947d
  4080dc:	004094b9 	.word	0x004094b9
  4080e0:	004094d9 	.word	0x004094d9

004080e4 <__sinit>:
  4080e4:	b510      	push	{r4, lr}
  4080e6:	4604      	mov	r4, r0
  4080e8:	4812      	ldr	r0, [pc, #72]	; (408134 <__sinit+0x50>)
  4080ea:	f000 fbc9 	bl	408880 <__retarget_lock_acquire_recursive>
  4080ee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4080f0:	b9d2      	cbnz	r2, 408128 <__sinit+0x44>
  4080f2:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  4080f6:	4810      	ldr	r0, [pc, #64]	; (408138 <__sinit+0x54>)
  4080f8:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4080fc:	2103      	movs	r1, #3
  4080fe:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  408102:	63e0      	str	r0, [r4, #60]	; 0x3c
  408104:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  408108:	6860      	ldr	r0, [r4, #4]
  40810a:	2104      	movs	r1, #4
  40810c:	f7ff ffc2 	bl	408094 <std.isra.0>
  408110:	2201      	movs	r2, #1
  408112:	2109      	movs	r1, #9
  408114:	68a0      	ldr	r0, [r4, #8]
  408116:	f7ff ffbd 	bl	408094 <std.isra.0>
  40811a:	2202      	movs	r2, #2
  40811c:	2112      	movs	r1, #18
  40811e:	68e0      	ldr	r0, [r4, #12]
  408120:	f7ff ffb8 	bl	408094 <std.isra.0>
  408124:	2301      	movs	r3, #1
  408126:	63a3      	str	r3, [r4, #56]	; 0x38
  408128:	4802      	ldr	r0, [pc, #8]	; (408134 <__sinit+0x50>)
  40812a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40812e:	f000 bba9 	b.w	408884 <__retarget_lock_release_recursive>
  408132:	bf00      	nop
  408134:	2040c880 	.word	0x2040c880
  408138:	00408089 	.word	0x00408089

0040813c <__sfp_lock_acquire>:
  40813c:	4801      	ldr	r0, [pc, #4]	; (408144 <__sfp_lock_acquire+0x8>)
  40813e:	f000 bb9f 	b.w	408880 <__retarget_lock_acquire_recursive>
  408142:	bf00      	nop
  408144:	2040c894 	.word	0x2040c894

00408148 <__sfp_lock_release>:
  408148:	4801      	ldr	r0, [pc, #4]	; (408150 <__sfp_lock_release+0x8>)
  40814a:	f000 bb9b 	b.w	408884 <__retarget_lock_release_recursive>
  40814e:	bf00      	nop
  408150:	2040c894 	.word	0x2040c894

00408154 <__libc_fini_array>:
  408154:	b538      	push	{r3, r4, r5, lr}
  408156:	4c0a      	ldr	r4, [pc, #40]	; (408180 <__libc_fini_array+0x2c>)
  408158:	4d0a      	ldr	r5, [pc, #40]	; (408184 <__libc_fini_array+0x30>)
  40815a:	1b64      	subs	r4, r4, r5
  40815c:	10a4      	asrs	r4, r4, #2
  40815e:	d00a      	beq.n	408176 <__libc_fini_array+0x22>
  408160:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  408164:	3b01      	subs	r3, #1
  408166:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40816a:	3c01      	subs	r4, #1
  40816c:	f855 3904 	ldr.w	r3, [r5], #-4
  408170:	4798      	blx	r3
  408172:	2c00      	cmp	r4, #0
  408174:	d1f9      	bne.n	40816a <__libc_fini_array+0x16>
  408176:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40817a:	f002 bc2f 	b.w	40a9dc <_fini>
  40817e:	bf00      	nop
  408180:	0040a9ec 	.word	0x0040a9ec
  408184:	0040a9e8 	.word	0x0040a9e8

00408188 <__fputwc>:
  408188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40818c:	b082      	sub	sp, #8
  40818e:	4680      	mov	r8, r0
  408190:	4689      	mov	r9, r1
  408192:	4614      	mov	r4, r2
  408194:	f000 fb54 	bl	408840 <__locale_mb_cur_max>
  408198:	2801      	cmp	r0, #1
  40819a:	d036      	beq.n	40820a <__fputwc+0x82>
  40819c:	464a      	mov	r2, r9
  40819e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  4081a2:	a901      	add	r1, sp, #4
  4081a4:	4640      	mov	r0, r8
  4081a6:	f001 fa71 	bl	40968c <_wcrtomb_r>
  4081aa:	1c42      	adds	r2, r0, #1
  4081ac:	4606      	mov	r6, r0
  4081ae:	d025      	beq.n	4081fc <__fputwc+0x74>
  4081b0:	b3a8      	cbz	r0, 40821e <__fputwc+0x96>
  4081b2:	f89d e004 	ldrb.w	lr, [sp, #4]
  4081b6:	2500      	movs	r5, #0
  4081b8:	f10d 0a04 	add.w	sl, sp, #4
  4081bc:	e009      	b.n	4081d2 <__fputwc+0x4a>
  4081be:	6823      	ldr	r3, [r4, #0]
  4081c0:	1c5a      	adds	r2, r3, #1
  4081c2:	6022      	str	r2, [r4, #0]
  4081c4:	f883 e000 	strb.w	lr, [r3]
  4081c8:	3501      	adds	r5, #1
  4081ca:	42b5      	cmp	r5, r6
  4081cc:	d227      	bcs.n	40821e <__fputwc+0x96>
  4081ce:	f815 e00a 	ldrb.w	lr, [r5, sl]
  4081d2:	68a3      	ldr	r3, [r4, #8]
  4081d4:	3b01      	subs	r3, #1
  4081d6:	2b00      	cmp	r3, #0
  4081d8:	60a3      	str	r3, [r4, #8]
  4081da:	daf0      	bge.n	4081be <__fputwc+0x36>
  4081dc:	69a7      	ldr	r7, [r4, #24]
  4081de:	42bb      	cmp	r3, r7
  4081e0:	4671      	mov	r1, lr
  4081e2:	4622      	mov	r2, r4
  4081e4:	4640      	mov	r0, r8
  4081e6:	db02      	blt.n	4081ee <__fputwc+0x66>
  4081e8:	f1be 0f0a 	cmp.w	lr, #10
  4081ec:	d1e7      	bne.n	4081be <__fputwc+0x36>
  4081ee:	f001 f9f5 	bl	4095dc <__swbuf_r>
  4081f2:	1c43      	adds	r3, r0, #1
  4081f4:	d1e8      	bne.n	4081c8 <__fputwc+0x40>
  4081f6:	b002      	add	sp, #8
  4081f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4081fc:	89a3      	ldrh	r3, [r4, #12]
  4081fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408202:	81a3      	strh	r3, [r4, #12]
  408204:	b002      	add	sp, #8
  408206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40820a:	f109 33ff 	add.w	r3, r9, #4294967295
  40820e:	2bfe      	cmp	r3, #254	; 0xfe
  408210:	d8c4      	bhi.n	40819c <__fputwc+0x14>
  408212:	fa5f fe89 	uxtb.w	lr, r9
  408216:	4606      	mov	r6, r0
  408218:	f88d e004 	strb.w	lr, [sp, #4]
  40821c:	e7cb      	b.n	4081b6 <__fputwc+0x2e>
  40821e:	4648      	mov	r0, r9
  408220:	b002      	add	sp, #8
  408222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408226:	bf00      	nop

00408228 <_fputwc_r>:
  408228:	b530      	push	{r4, r5, lr}
  40822a:	6e53      	ldr	r3, [r2, #100]	; 0x64
  40822c:	f013 0f01 	tst.w	r3, #1
  408230:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  408234:	4614      	mov	r4, r2
  408236:	b083      	sub	sp, #12
  408238:	4605      	mov	r5, r0
  40823a:	b29a      	uxth	r2, r3
  40823c:	d101      	bne.n	408242 <_fputwc_r+0x1a>
  40823e:	0590      	lsls	r0, r2, #22
  408240:	d51c      	bpl.n	40827c <_fputwc_r+0x54>
  408242:	0490      	lsls	r0, r2, #18
  408244:	d406      	bmi.n	408254 <_fputwc_r+0x2c>
  408246:	6e62      	ldr	r2, [r4, #100]	; 0x64
  408248:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40824c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  408250:	81a3      	strh	r3, [r4, #12]
  408252:	6662      	str	r2, [r4, #100]	; 0x64
  408254:	4628      	mov	r0, r5
  408256:	4622      	mov	r2, r4
  408258:	f7ff ff96 	bl	408188 <__fputwc>
  40825c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40825e:	07da      	lsls	r2, r3, #31
  408260:	4605      	mov	r5, r0
  408262:	d402      	bmi.n	40826a <_fputwc_r+0x42>
  408264:	89a3      	ldrh	r3, [r4, #12]
  408266:	059b      	lsls	r3, r3, #22
  408268:	d502      	bpl.n	408270 <_fputwc_r+0x48>
  40826a:	4628      	mov	r0, r5
  40826c:	b003      	add	sp, #12
  40826e:	bd30      	pop	{r4, r5, pc}
  408270:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408272:	f000 fb07 	bl	408884 <__retarget_lock_release_recursive>
  408276:	4628      	mov	r0, r5
  408278:	b003      	add	sp, #12
  40827a:	bd30      	pop	{r4, r5, pc}
  40827c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40827e:	9101      	str	r1, [sp, #4]
  408280:	f000 fafe 	bl	408880 <__retarget_lock_acquire_recursive>
  408284:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408288:	9901      	ldr	r1, [sp, #4]
  40828a:	b29a      	uxth	r2, r3
  40828c:	e7d9      	b.n	408242 <_fputwc_r+0x1a>
  40828e:	bf00      	nop

00408290 <_malloc_trim_r>:
  408290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408292:	4f24      	ldr	r7, [pc, #144]	; (408324 <_malloc_trim_r+0x94>)
  408294:	460c      	mov	r4, r1
  408296:	4606      	mov	r6, r0
  408298:	f7fc fae6 	bl	404868 <__malloc_lock>
  40829c:	68bb      	ldr	r3, [r7, #8]
  40829e:	685d      	ldr	r5, [r3, #4]
  4082a0:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4082a4:	310f      	adds	r1, #15
  4082a6:	f025 0503 	bic.w	r5, r5, #3
  4082aa:	4429      	add	r1, r5
  4082ac:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4082b0:	f021 010f 	bic.w	r1, r1, #15
  4082b4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4082b8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4082bc:	db07      	blt.n	4082ce <_malloc_trim_r+0x3e>
  4082be:	2100      	movs	r1, #0
  4082c0:	4630      	mov	r0, r6
  4082c2:	f7fc fadd 	bl	404880 <_sbrk_r>
  4082c6:	68bb      	ldr	r3, [r7, #8]
  4082c8:	442b      	add	r3, r5
  4082ca:	4298      	cmp	r0, r3
  4082cc:	d004      	beq.n	4082d8 <_malloc_trim_r+0x48>
  4082ce:	4630      	mov	r0, r6
  4082d0:	f7fc fad0 	bl	404874 <__malloc_unlock>
  4082d4:	2000      	movs	r0, #0
  4082d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4082d8:	4261      	negs	r1, r4
  4082da:	4630      	mov	r0, r6
  4082dc:	f7fc fad0 	bl	404880 <_sbrk_r>
  4082e0:	3001      	adds	r0, #1
  4082e2:	d00d      	beq.n	408300 <_malloc_trim_r+0x70>
  4082e4:	4b10      	ldr	r3, [pc, #64]	; (408328 <_malloc_trim_r+0x98>)
  4082e6:	68ba      	ldr	r2, [r7, #8]
  4082e8:	6819      	ldr	r1, [r3, #0]
  4082ea:	1b2d      	subs	r5, r5, r4
  4082ec:	f045 0501 	orr.w	r5, r5, #1
  4082f0:	4630      	mov	r0, r6
  4082f2:	1b09      	subs	r1, r1, r4
  4082f4:	6055      	str	r5, [r2, #4]
  4082f6:	6019      	str	r1, [r3, #0]
  4082f8:	f7fc fabc 	bl	404874 <__malloc_unlock>
  4082fc:	2001      	movs	r0, #1
  4082fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408300:	2100      	movs	r1, #0
  408302:	4630      	mov	r0, r6
  408304:	f7fc fabc 	bl	404880 <_sbrk_r>
  408308:	68ba      	ldr	r2, [r7, #8]
  40830a:	1a83      	subs	r3, r0, r2
  40830c:	2b0f      	cmp	r3, #15
  40830e:	ddde      	ble.n	4082ce <_malloc_trim_r+0x3e>
  408310:	4c06      	ldr	r4, [pc, #24]	; (40832c <_malloc_trim_r+0x9c>)
  408312:	4905      	ldr	r1, [pc, #20]	; (408328 <_malloc_trim_r+0x98>)
  408314:	6824      	ldr	r4, [r4, #0]
  408316:	f043 0301 	orr.w	r3, r3, #1
  40831a:	1b00      	subs	r0, r0, r4
  40831c:	6053      	str	r3, [r2, #4]
  40831e:	6008      	str	r0, [r1, #0]
  408320:	e7d5      	b.n	4082ce <_malloc_trim_r+0x3e>
  408322:	bf00      	nop
  408324:	20400448 	.word	0x20400448
  408328:	2040c764 	.word	0x2040c764
  40832c:	20400850 	.word	0x20400850

00408330 <_free_r>:
  408330:	2900      	cmp	r1, #0
  408332:	d044      	beq.n	4083be <_free_r+0x8e>
  408334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408338:	460d      	mov	r5, r1
  40833a:	4680      	mov	r8, r0
  40833c:	f7fc fa94 	bl	404868 <__malloc_lock>
  408340:	f855 7c04 	ldr.w	r7, [r5, #-4]
  408344:	4969      	ldr	r1, [pc, #420]	; (4084ec <_free_r+0x1bc>)
  408346:	f027 0301 	bic.w	r3, r7, #1
  40834a:	f1a5 0408 	sub.w	r4, r5, #8
  40834e:	18e2      	adds	r2, r4, r3
  408350:	688e      	ldr	r6, [r1, #8]
  408352:	6850      	ldr	r0, [r2, #4]
  408354:	42b2      	cmp	r2, r6
  408356:	f020 0003 	bic.w	r0, r0, #3
  40835a:	d05e      	beq.n	40841a <_free_r+0xea>
  40835c:	07fe      	lsls	r6, r7, #31
  40835e:	6050      	str	r0, [r2, #4]
  408360:	d40b      	bmi.n	40837a <_free_r+0x4a>
  408362:	f855 7c08 	ldr.w	r7, [r5, #-8]
  408366:	1be4      	subs	r4, r4, r7
  408368:	f101 0e08 	add.w	lr, r1, #8
  40836c:	68a5      	ldr	r5, [r4, #8]
  40836e:	4575      	cmp	r5, lr
  408370:	443b      	add	r3, r7
  408372:	d06d      	beq.n	408450 <_free_r+0x120>
  408374:	68e7      	ldr	r7, [r4, #12]
  408376:	60ef      	str	r7, [r5, #12]
  408378:	60bd      	str	r5, [r7, #8]
  40837a:	1815      	adds	r5, r2, r0
  40837c:	686d      	ldr	r5, [r5, #4]
  40837e:	07ed      	lsls	r5, r5, #31
  408380:	d53e      	bpl.n	408400 <_free_r+0xd0>
  408382:	f043 0201 	orr.w	r2, r3, #1
  408386:	6062      	str	r2, [r4, #4]
  408388:	50e3      	str	r3, [r4, r3]
  40838a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40838e:	d217      	bcs.n	4083c0 <_free_r+0x90>
  408390:	08db      	lsrs	r3, r3, #3
  408392:	1c58      	adds	r0, r3, #1
  408394:	109a      	asrs	r2, r3, #2
  408396:	684d      	ldr	r5, [r1, #4]
  408398:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  40839c:	60a7      	str	r7, [r4, #8]
  40839e:	2301      	movs	r3, #1
  4083a0:	4093      	lsls	r3, r2
  4083a2:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  4083a6:	432b      	orrs	r3, r5
  4083a8:	3a08      	subs	r2, #8
  4083aa:	60e2      	str	r2, [r4, #12]
  4083ac:	604b      	str	r3, [r1, #4]
  4083ae:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  4083b2:	60fc      	str	r4, [r7, #12]
  4083b4:	4640      	mov	r0, r8
  4083b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4083ba:	f7fc ba5b 	b.w	404874 <__malloc_unlock>
  4083be:	4770      	bx	lr
  4083c0:	0a5a      	lsrs	r2, r3, #9
  4083c2:	2a04      	cmp	r2, #4
  4083c4:	d852      	bhi.n	40846c <_free_r+0x13c>
  4083c6:	099a      	lsrs	r2, r3, #6
  4083c8:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4083cc:	00ff      	lsls	r7, r7, #3
  4083ce:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4083d2:	19c8      	adds	r0, r1, r7
  4083d4:	59ca      	ldr	r2, [r1, r7]
  4083d6:	3808      	subs	r0, #8
  4083d8:	4290      	cmp	r0, r2
  4083da:	d04f      	beq.n	40847c <_free_r+0x14c>
  4083dc:	6851      	ldr	r1, [r2, #4]
  4083de:	f021 0103 	bic.w	r1, r1, #3
  4083e2:	428b      	cmp	r3, r1
  4083e4:	d232      	bcs.n	40844c <_free_r+0x11c>
  4083e6:	6892      	ldr	r2, [r2, #8]
  4083e8:	4290      	cmp	r0, r2
  4083ea:	d1f7      	bne.n	4083dc <_free_r+0xac>
  4083ec:	68c3      	ldr	r3, [r0, #12]
  4083ee:	60a0      	str	r0, [r4, #8]
  4083f0:	60e3      	str	r3, [r4, #12]
  4083f2:	609c      	str	r4, [r3, #8]
  4083f4:	60c4      	str	r4, [r0, #12]
  4083f6:	4640      	mov	r0, r8
  4083f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4083fc:	f7fc ba3a 	b.w	404874 <__malloc_unlock>
  408400:	6895      	ldr	r5, [r2, #8]
  408402:	4f3b      	ldr	r7, [pc, #236]	; (4084f0 <_free_r+0x1c0>)
  408404:	42bd      	cmp	r5, r7
  408406:	4403      	add	r3, r0
  408408:	d040      	beq.n	40848c <_free_r+0x15c>
  40840a:	68d0      	ldr	r0, [r2, #12]
  40840c:	60e8      	str	r0, [r5, #12]
  40840e:	f043 0201 	orr.w	r2, r3, #1
  408412:	6085      	str	r5, [r0, #8]
  408414:	6062      	str	r2, [r4, #4]
  408416:	50e3      	str	r3, [r4, r3]
  408418:	e7b7      	b.n	40838a <_free_r+0x5a>
  40841a:	07ff      	lsls	r7, r7, #31
  40841c:	4403      	add	r3, r0
  40841e:	d407      	bmi.n	408430 <_free_r+0x100>
  408420:	f855 2c08 	ldr.w	r2, [r5, #-8]
  408424:	1aa4      	subs	r4, r4, r2
  408426:	4413      	add	r3, r2
  408428:	68a0      	ldr	r0, [r4, #8]
  40842a:	68e2      	ldr	r2, [r4, #12]
  40842c:	60c2      	str	r2, [r0, #12]
  40842e:	6090      	str	r0, [r2, #8]
  408430:	4a30      	ldr	r2, [pc, #192]	; (4084f4 <_free_r+0x1c4>)
  408432:	6812      	ldr	r2, [r2, #0]
  408434:	f043 0001 	orr.w	r0, r3, #1
  408438:	4293      	cmp	r3, r2
  40843a:	6060      	str	r0, [r4, #4]
  40843c:	608c      	str	r4, [r1, #8]
  40843e:	d3b9      	bcc.n	4083b4 <_free_r+0x84>
  408440:	4b2d      	ldr	r3, [pc, #180]	; (4084f8 <_free_r+0x1c8>)
  408442:	4640      	mov	r0, r8
  408444:	6819      	ldr	r1, [r3, #0]
  408446:	f7ff ff23 	bl	408290 <_malloc_trim_r>
  40844a:	e7b3      	b.n	4083b4 <_free_r+0x84>
  40844c:	4610      	mov	r0, r2
  40844e:	e7cd      	b.n	4083ec <_free_r+0xbc>
  408450:	1811      	adds	r1, r2, r0
  408452:	6849      	ldr	r1, [r1, #4]
  408454:	07c9      	lsls	r1, r1, #31
  408456:	d444      	bmi.n	4084e2 <_free_r+0x1b2>
  408458:	6891      	ldr	r1, [r2, #8]
  40845a:	68d2      	ldr	r2, [r2, #12]
  40845c:	60ca      	str	r2, [r1, #12]
  40845e:	4403      	add	r3, r0
  408460:	f043 0001 	orr.w	r0, r3, #1
  408464:	6091      	str	r1, [r2, #8]
  408466:	6060      	str	r0, [r4, #4]
  408468:	50e3      	str	r3, [r4, r3]
  40846a:	e7a3      	b.n	4083b4 <_free_r+0x84>
  40846c:	2a14      	cmp	r2, #20
  40846e:	d816      	bhi.n	40849e <_free_r+0x16e>
  408470:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  408474:	00ff      	lsls	r7, r7, #3
  408476:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40847a:	e7aa      	b.n	4083d2 <_free_r+0xa2>
  40847c:	10aa      	asrs	r2, r5, #2
  40847e:	2301      	movs	r3, #1
  408480:	684d      	ldr	r5, [r1, #4]
  408482:	4093      	lsls	r3, r2
  408484:	432b      	orrs	r3, r5
  408486:	604b      	str	r3, [r1, #4]
  408488:	4603      	mov	r3, r0
  40848a:	e7b0      	b.n	4083ee <_free_r+0xbe>
  40848c:	f043 0201 	orr.w	r2, r3, #1
  408490:	614c      	str	r4, [r1, #20]
  408492:	610c      	str	r4, [r1, #16]
  408494:	60e5      	str	r5, [r4, #12]
  408496:	60a5      	str	r5, [r4, #8]
  408498:	6062      	str	r2, [r4, #4]
  40849a:	50e3      	str	r3, [r4, r3]
  40849c:	e78a      	b.n	4083b4 <_free_r+0x84>
  40849e:	2a54      	cmp	r2, #84	; 0x54
  4084a0:	d806      	bhi.n	4084b0 <_free_r+0x180>
  4084a2:	0b1a      	lsrs	r2, r3, #12
  4084a4:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4084a8:	00ff      	lsls	r7, r7, #3
  4084aa:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4084ae:	e790      	b.n	4083d2 <_free_r+0xa2>
  4084b0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4084b4:	d806      	bhi.n	4084c4 <_free_r+0x194>
  4084b6:	0bda      	lsrs	r2, r3, #15
  4084b8:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4084bc:	00ff      	lsls	r7, r7, #3
  4084be:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4084c2:	e786      	b.n	4083d2 <_free_r+0xa2>
  4084c4:	f240 5054 	movw	r0, #1364	; 0x554
  4084c8:	4282      	cmp	r2, r0
  4084ca:	d806      	bhi.n	4084da <_free_r+0x1aa>
  4084cc:	0c9a      	lsrs	r2, r3, #18
  4084ce:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4084d2:	00ff      	lsls	r7, r7, #3
  4084d4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4084d8:	e77b      	b.n	4083d2 <_free_r+0xa2>
  4084da:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4084de:	257e      	movs	r5, #126	; 0x7e
  4084e0:	e777      	b.n	4083d2 <_free_r+0xa2>
  4084e2:	f043 0101 	orr.w	r1, r3, #1
  4084e6:	6061      	str	r1, [r4, #4]
  4084e8:	6013      	str	r3, [r2, #0]
  4084ea:	e763      	b.n	4083b4 <_free_r+0x84>
  4084ec:	20400448 	.word	0x20400448
  4084f0:	20400450 	.word	0x20400450
  4084f4:	20400854 	.word	0x20400854
  4084f8:	2040c794 	.word	0x2040c794

004084fc <__sfvwrite_r>:
  4084fc:	6893      	ldr	r3, [r2, #8]
  4084fe:	2b00      	cmp	r3, #0
  408500:	d073      	beq.n	4085ea <__sfvwrite_r+0xee>
  408502:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408506:	898b      	ldrh	r3, [r1, #12]
  408508:	b083      	sub	sp, #12
  40850a:	460c      	mov	r4, r1
  40850c:	0719      	lsls	r1, r3, #28
  40850e:	9000      	str	r0, [sp, #0]
  408510:	4616      	mov	r6, r2
  408512:	d526      	bpl.n	408562 <__sfvwrite_r+0x66>
  408514:	6922      	ldr	r2, [r4, #16]
  408516:	b322      	cbz	r2, 408562 <__sfvwrite_r+0x66>
  408518:	f013 0002 	ands.w	r0, r3, #2
  40851c:	6835      	ldr	r5, [r6, #0]
  40851e:	d02c      	beq.n	40857a <__sfvwrite_r+0x7e>
  408520:	f04f 0900 	mov.w	r9, #0
  408524:	4fb0      	ldr	r7, [pc, #704]	; (4087e8 <__sfvwrite_r+0x2ec>)
  408526:	46c8      	mov	r8, r9
  408528:	46b2      	mov	sl, r6
  40852a:	45b8      	cmp	r8, r7
  40852c:	4643      	mov	r3, r8
  40852e:	464a      	mov	r2, r9
  408530:	bf28      	it	cs
  408532:	463b      	movcs	r3, r7
  408534:	9800      	ldr	r0, [sp, #0]
  408536:	f1b8 0f00 	cmp.w	r8, #0
  40853a:	d050      	beq.n	4085de <__sfvwrite_r+0xe2>
  40853c:	69e1      	ldr	r1, [r4, #28]
  40853e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  408540:	47b0      	blx	r6
  408542:	2800      	cmp	r0, #0
  408544:	dd58      	ble.n	4085f8 <__sfvwrite_r+0xfc>
  408546:	f8da 3008 	ldr.w	r3, [sl, #8]
  40854a:	1a1b      	subs	r3, r3, r0
  40854c:	4481      	add	r9, r0
  40854e:	eba8 0800 	sub.w	r8, r8, r0
  408552:	f8ca 3008 	str.w	r3, [sl, #8]
  408556:	2b00      	cmp	r3, #0
  408558:	d1e7      	bne.n	40852a <__sfvwrite_r+0x2e>
  40855a:	2000      	movs	r0, #0
  40855c:	b003      	add	sp, #12
  40855e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408562:	4621      	mov	r1, r4
  408564:	9800      	ldr	r0, [sp, #0]
  408566:	f7fe fc91 	bl	406e8c <__swsetup_r>
  40856a:	2800      	cmp	r0, #0
  40856c:	f040 8133 	bne.w	4087d6 <__sfvwrite_r+0x2da>
  408570:	89a3      	ldrh	r3, [r4, #12]
  408572:	6835      	ldr	r5, [r6, #0]
  408574:	f013 0002 	ands.w	r0, r3, #2
  408578:	d1d2      	bne.n	408520 <__sfvwrite_r+0x24>
  40857a:	f013 0901 	ands.w	r9, r3, #1
  40857e:	d145      	bne.n	40860c <__sfvwrite_r+0x110>
  408580:	464f      	mov	r7, r9
  408582:	9601      	str	r6, [sp, #4]
  408584:	b337      	cbz	r7, 4085d4 <__sfvwrite_r+0xd8>
  408586:	059a      	lsls	r2, r3, #22
  408588:	f8d4 8008 	ldr.w	r8, [r4, #8]
  40858c:	f140 8083 	bpl.w	408696 <__sfvwrite_r+0x19a>
  408590:	4547      	cmp	r7, r8
  408592:	46c3      	mov	fp, r8
  408594:	f0c0 80ab 	bcc.w	4086ee <__sfvwrite_r+0x1f2>
  408598:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40859c:	f040 80ac 	bne.w	4086f8 <__sfvwrite_r+0x1fc>
  4085a0:	6820      	ldr	r0, [r4, #0]
  4085a2:	46ba      	mov	sl, r7
  4085a4:	465a      	mov	r2, fp
  4085a6:	4649      	mov	r1, r9
  4085a8:	f000 fa52 	bl	408a50 <memmove>
  4085ac:	68a2      	ldr	r2, [r4, #8]
  4085ae:	6823      	ldr	r3, [r4, #0]
  4085b0:	eba2 0208 	sub.w	r2, r2, r8
  4085b4:	445b      	add	r3, fp
  4085b6:	60a2      	str	r2, [r4, #8]
  4085b8:	6023      	str	r3, [r4, #0]
  4085ba:	9a01      	ldr	r2, [sp, #4]
  4085bc:	6893      	ldr	r3, [r2, #8]
  4085be:	eba3 030a 	sub.w	r3, r3, sl
  4085c2:	44d1      	add	r9, sl
  4085c4:	eba7 070a 	sub.w	r7, r7, sl
  4085c8:	6093      	str	r3, [r2, #8]
  4085ca:	2b00      	cmp	r3, #0
  4085cc:	d0c5      	beq.n	40855a <__sfvwrite_r+0x5e>
  4085ce:	89a3      	ldrh	r3, [r4, #12]
  4085d0:	2f00      	cmp	r7, #0
  4085d2:	d1d8      	bne.n	408586 <__sfvwrite_r+0x8a>
  4085d4:	f8d5 9000 	ldr.w	r9, [r5]
  4085d8:	686f      	ldr	r7, [r5, #4]
  4085da:	3508      	adds	r5, #8
  4085dc:	e7d2      	b.n	408584 <__sfvwrite_r+0x88>
  4085de:	f8d5 9000 	ldr.w	r9, [r5]
  4085e2:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4085e6:	3508      	adds	r5, #8
  4085e8:	e79f      	b.n	40852a <__sfvwrite_r+0x2e>
  4085ea:	2000      	movs	r0, #0
  4085ec:	4770      	bx	lr
  4085ee:	4621      	mov	r1, r4
  4085f0:	9800      	ldr	r0, [sp, #0]
  4085f2:	f7ff fd1f 	bl	408034 <_fflush_r>
  4085f6:	b370      	cbz	r0, 408656 <__sfvwrite_r+0x15a>
  4085f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4085fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408600:	f04f 30ff 	mov.w	r0, #4294967295
  408604:	81a3      	strh	r3, [r4, #12]
  408606:	b003      	add	sp, #12
  408608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40860c:	4681      	mov	r9, r0
  40860e:	4633      	mov	r3, r6
  408610:	464e      	mov	r6, r9
  408612:	46a8      	mov	r8, r5
  408614:	469a      	mov	sl, r3
  408616:	464d      	mov	r5, r9
  408618:	b34e      	cbz	r6, 40866e <__sfvwrite_r+0x172>
  40861a:	b380      	cbz	r0, 40867e <__sfvwrite_r+0x182>
  40861c:	6820      	ldr	r0, [r4, #0]
  40861e:	6923      	ldr	r3, [r4, #16]
  408620:	6962      	ldr	r2, [r4, #20]
  408622:	45b1      	cmp	r9, r6
  408624:	46cb      	mov	fp, r9
  408626:	bf28      	it	cs
  408628:	46b3      	movcs	fp, r6
  40862a:	4298      	cmp	r0, r3
  40862c:	465f      	mov	r7, fp
  40862e:	d904      	bls.n	40863a <__sfvwrite_r+0x13e>
  408630:	68a3      	ldr	r3, [r4, #8]
  408632:	4413      	add	r3, r2
  408634:	459b      	cmp	fp, r3
  408636:	f300 80a6 	bgt.w	408786 <__sfvwrite_r+0x28a>
  40863a:	4593      	cmp	fp, r2
  40863c:	db4b      	blt.n	4086d6 <__sfvwrite_r+0x1da>
  40863e:	4613      	mov	r3, r2
  408640:	6a67      	ldr	r7, [r4, #36]	; 0x24
  408642:	69e1      	ldr	r1, [r4, #28]
  408644:	9800      	ldr	r0, [sp, #0]
  408646:	462a      	mov	r2, r5
  408648:	47b8      	blx	r7
  40864a:	1e07      	subs	r7, r0, #0
  40864c:	ddd4      	ble.n	4085f8 <__sfvwrite_r+0xfc>
  40864e:	ebb9 0907 	subs.w	r9, r9, r7
  408652:	d0cc      	beq.n	4085ee <__sfvwrite_r+0xf2>
  408654:	2001      	movs	r0, #1
  408656:	f8da 3008 	ldr.w	r3, [sl, #8]
  40865a:	1bdb      	subs	r3, r3, r7
  40865c:	443d      	add	r5, r7
  40865e:	1bf6      	subs	r6, r6, r7
  408660:	f8ca 3008 	str.w	r3, [sl, #8]
  408664:	2b00      	cmp	r3, #0
  408666:	f43f af78 	beq.w	40855a <__sfvwrite_r+0x5e>
  40866a:	2e00      	cmp	r6, #0
  40866c:	d1d5      	bne.n	40861a <__sfvwrite_r+0x11e>
  40866e:	f108 0308 	add.w	r3, r8, #8
  408672:	e913 0060 	ldmdb	r3, {r5, r6}
  408676:	4698      	mov	r8, r3
  408678:	3308      	adds	r3, #8
  40867a:	2e00      	cmp	r6, #0
  40867c:	d0f9      	beq.n	408672 <__sfvwrite_r+0x176>
  40867e:	4632      	mov	r2, r6
  408680:	210a      	movs	r1, #10
  408682:	4628      	mov	r0, r5
  408684:	f000 f994 	bl	4089b0 <memchr>
  408688:	2800      	cmp	r0, #0
  40868a:	f000 80a1 	beq.w	4087d0 <__sfvwrite_r+0x2d4>
  40868e:	3001      	adds	r0, #1
  408690:	eba0 0905 	sub.w	r9, r0, r5
  408694:	e7c2      	b.n	40861c <__sfvwrite_r+0x120>
  408696:	6820      	ldr	r0, [r4, #0]
  408698:	6923      	ldr	r3, [r4, #16]
  40869a:	4298      	cmp	r0, r3
  40869c:	d802      	bhi.n	4086a4 <__sfvwrite_r+0x1a8>
  40869e:	6963      	ldr	r3, [r4, #20]
  4086a0:	429f      	cmp	r7, r3
  4086a2:	d25d      	bcs.n	408760 <__sfvwrite_r+0x264>
  4086a4:	45b8      	cmp	r8, r7
  4086a6:	bf28      	it	cs
  4086a8:	46b8      	movcs	r8, r7
  4086aa:	4642      	mov	r2, r8
  4086ac:	4649      	mov	r1, r9
  4086ae:	f000 f9cf 	bl	408a50 <memmove>
  4086b2:	68a3      	ldr	r3, [r4, #8]
  4086b4:	6822      	ldr	r2, [r4, #0]
  4086b6:	eba3 0308 	sub.w	r3, r3, r8
  4086ba:	4442      	add	r2, r8
  4086bc:	60a3      	str	r3, [r4, #8]
  4086be:	6022      	str	r2, [r4, #0]
  4086c0:	b10b      	cbz	r3, 4086c6 <__sfvwrite_r+0x1ca>
  4086c2:	46c2      	mov	sl, r8
  4086c4:	e779      	b.n	4085ba <__sfvwrite_r+0xbe>
  4086c6:	4621      	mov	r1, r4
  4086c8:	9800      	ldr	r0, [sp, #0]
  4086ca:	f7ff fcb3 	bl	408034 <_fflush_r>
  4086ce:	2800      	cmp	r0, #0
  4086d0:	d192      	bne.n	4085f8 <__sfvwrite_r+0xfc>
  4086d2:	46c2      	mov	sl, r8
  4086d4:	e771      	b.n	4085ba <__sfvwrite_r+0xbe>
  4086d6:	465a      	mov	r2, fp
  4086d8:	4629      	mov	r1, r5
  4086da:	f000 f9b9 	bl	408a50 <memmove>
  4086de:	68a2      	ldr	r2, [r4, #8]
  4086e0:	6823      	ldr	r3, [r4, #0]
  4086e2:	eba2 020b 	sub.w	r2, r2, fp
  4086e6:	445b      	add	r3, fp
  4086e8:	60a2      	str	r2, [r4, #8]
  4086ea:	6023      	str	r3, [r4, #0]
  4086ec:	e7af      	b.n	40864e <__sfvwrite_r+0x152>
  4086ee:	6820      	ldr	r0, [r4, #0]
  4086f0:	46b8      	mov	r8, r7
  4086f2:	46ba      	mov	sl, r7
  4086f4:	46bb      	mov	fp, r7
  4086f6:	e755      	b.n	4085a4 <__sfvwrite_r+0xa8>
  4086f8:	6962      	ldr	r2, [r4, #20]
  4086fa:	6820      	ldr	r0, [r4, #0]
  4086fc:	6921      	ldr	r1, [r4, #16]
  4086fe:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  408702:	eba0 0a01 	sub.w	sl, r0, r1
  408706:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40870a:	f10a 0001 	add.w	r0, sl, #1
  40870e:	ea4f 0868 	mov.w	r8, r8, asr #1
  408712:	4438      	add	r0, r7
  408714:	4540      	cmp	r0, r8
  408716:	4642      	mov	r2, r8
  408718:	bf84      	itt	hi
  40871a:	4680      	movhi	r8, r0
  40871c:	4642      	movhi	r2, r8
  40871e:	055b      	lsls	r3, r3, #21
  408720:	d544      	bpl.n	4087ac <__sfvwrite_r+0x2b0>
  408722:	4611      	mov	r1, r2
  408724:	9800      	ldr	r0, [sp, #0]
  408726:	f7fb fd07 	bl	404138 <_malloc_r>
  40872a:	4683      	mov	fp, r0
  40872c:	2800      	cmp	r0, #0
  40872e:	d055      	beq.n	4087dc <__sfvwrite_r+0x2e0>
  408730:	4652      	mov	r2, sl
  408732:	6921      	ldr	r1, [r4, #16]
  408734:	f7fb ffb0 	bl	404698 <memcpy>
  408738:	89a3      	ldrh	r3, [r4, #12]
  40873a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40873e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  408742:	81a3      	strh	r3, [r4, #12]
  408744:	eb0b 000a 	add.w	r0, fp, sl
  408748:	eba8 030a 	sub.w	r3, r8, sl
  40874c:	f8c4 b010 	str.w	fp, [r4, #16]
  408750:	f8c4 8014 	str.w	r8, [r4, #20]
  408754:	6020      	str	r0, [r4, #0]
  408756:	60a3      	str	r3, [r4, #8]
  408758:	46b8      	mov	r8, r7
  40875a:	46ba      	mov	sl, r7
  40875c:	46bb      	mov	fp, r7
  40875e:	e721      	b.n	4085a4 <__sfvwrite_r+0xa8>
  408760:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  408764:	42b9      	cmp	r1, r7
  408766:	bf28      	it	cs
  408768:	4639      	movcs	r1, r7
  40876a:	464a      	mov	r2, r9
  40876c:	fb91 f1f3 	sdiv	r1, r1, r3
  408770:	9800      	ldr	r0, [sp, #0]
  408772:	6a66      	ldr	r6, [r4, #36]	; 0x24
  408774:	fb03 f301 	mul.w	r3, r3, r1
  408778:	69e1      	ldr	r1, [r4, #28]
  40877a:	47b0      	blx	r6
  40877c:	f1b0 0a00 	subs.w	sl, r0, #0
  408780:	f73f af1b 	bgt.w	4085ba <__sfvwrite_r+0xbe>
  408784:	e738      	b.n	4085f8 <__sfvwrite_r+0xfc>
  408786:	461a      	mov	r2, r3
  408788:	4629      	mov	r1, r5
  40878a:	9301      	str	r3, [sp, #4]
  40878c:	f000 f960 	bl	408a50 <memmove>
  408790:	6822      	ldr	r2, [r4, #0]
  408792:	9b01      	ldr	r3, [sp, #4]
  408794:	9800      	ldr	r0, [sp, #0]
  408796:	441a      	add	r2, r3
  408798:	6022      	str	r2, [r4, #0]
  40879a:	4621      	mov	r1, r4
  40879c:	f7ff fc4a 	bl	408034 <_fflush_r>
  4087a0:	9b01      	ldr	r3, [sp, #4]
  4087a2:	2800      	cmp	r0, #0
  4087a4:	f47f af28 	bne.w	4085f8 <__sfvwrite_r+0xfc>
  4087a8:	461f      	mov	r7, r3
  4087aa:	e750      	b.n	40864e <__sfvwrite_r+0x152>
  4087ac:	9800      	ldr	r0, [sp, #0]
  4087ae:	f000 fcad 	bl	40910c <_realloc_r>
  4087b2:	4683      	mov	fp, r0
  4087b4:	2800      	cmp	r0, #0
  4087b6:	d1c5      	bne.n	408744 <__sfvwrite_r+0x248>
  4087b8:	9d00      	ldr	r5, [sp, #0]
  4087ba:	6921      	ldr	r1, [r4, #16]
  4087bc:	4628      	mov	r0, r5
  4087be:	f7ff fdb7 	bl	408330 <_free_r>
  4087c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4087c6:	220c      	movs	r2, #12
  4087c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4087cc:	602a      	str	r2, [r5, #0]
  4087ce:	e715      	b.n	4085fc <__sfvwrite_r+0x100>
  4087d0:	f106 0901 	add.w	r9, r6, #1
  4087d4:	e722      	b.n	40861c <__sfvwrite_r+0x120>
  4087d6:	f04f 30ff 	mov.w	r0, #4294967295
  4087da:	e6bf      	b.n	40855c <__sfvwrite_r+0x60>
  4087dc:	9a00      	ldr	r2, [sp, #0]
  4087de:	230c      	movs	r3, #12
  4087e0:	6013      	str	r3, [r2, #0]
  4087e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4087e6:	e709      	b.n	4085fc <__sfvwrite_r+0x100>
  4087e8:	7ffffc00 	.word	0x7ffffc00

004087ec <_fwalk_reent>:
  4087ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4087f0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4087f4:	d01f      	beq.n	408836 <_fwalk_reent+0x4a>
  4087f6:	4688      	mov	r8, r1
  4087f8:	4606      	mov	r6, r0
  4087fa:	f04f 0900 	mov.w	r9, #0
  4087fe:	687d      	ldr	r5, [r7, #4]
  408800:	68bc      	ldr	r4, [r7, #8]
  408802:	3d01      	subs	r5, #1
  408804:	d411      	bmi.n	40882a <_fwalk_reent+0x3e>
  408806:	89a3      	ldrh	r3, [r4, #12]
  408808:	2b01      	cmp	r3, #1
  40880a:	f105 35ff 	add.w	r5, r5, #4294967295
  40880e:	d908      	bls.n	408822 <_fwalk_reent+0x36>
  408810:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  408814:	3301      	adds	r3, #1
  408816:	4621      	mov	r1, r4
  408818:	4630      	mov	r0, r6
  40881a:	d002      	beq.n	408822 <_fwalk_reent+0x36>
  40881c:	47c0      	blx	r8
  40881e:	ea49 0900 	orr.w	r9, r9, r0
  408822:	1c6b      	adds	r3, r5, #1
  408824:	f104 0468 	add.w	r4, r4, #104	; 0x68
  408828:	d1ed      	bne.n	408806 <_fwalk_reent+0x1a>
  40882a:	683f      	ldr	r7, [r7, #0]
  40882c:	2f00      	cmp	r7, #0
  40882e:	d1e6      	bne.n	4087fe <_fwalk_reent+0x12>
  408830:	4648      	mov	r0, r9
  408832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408836:	46b9      	mov	r9, r7
  408838:	4648      	mov	r0, r9
  40883a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40883e:	bf00      	nop

00408840 <__locale_mb_cur_max>:
  408840:	4b04      	ldr	r3, [pc, #16]	; (408854 <__locale_mb_cur_max+0x14>)
  408842:	4a05      	ldr	r2, [pc, #20]	; (408858 <__locale_mb_cur_max+0x18>)
  408844:	681b      	ldr	r3, [r3, #0]
  408846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  408848:	2b00      	cmp	r3, #0
  40884a:	bf08      	it	eq
  40884c:	4613      	moveq	r3, r2
  40884e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  408852:	4770      	bx	lr
  408854:	2040001c 	.word	0x2040001c
  408858:	2040085c 	.word	0x2040085c

0040885c <_localeconv_r>:
  40885c:	4a04      	ldr	r2, [pc, #16]	; (408870 <_localeconv_r+0x14>)
  40885e:	4b05      	ldr	r3, [pc, #20]	; (408874 <_localeconv_r+0x18>)
  408860:	6812      	ldr	r2, [r2, #0]
  408862:	6b50      	ldr	r0, [r2, #52]	; 0x34
  408864:	2800      	cmp	r0, #0
  408866:	bf08      	it	eq
  408868:	4618      	moveq	r0, r3
  40886a:	30f0      	adds	r0, #240	; 0xf0
  40886c:	4770      	bx	lr
  40886e:	bf00      	nop
  408870:	2040001c 	.word	0x2040001c
  408874:	2040085c 	.word	0x2040085c

00408878 <__retarget_lock_init_recursive>:
  408878:	4770      	bx	lr
  40887a:	bf00      	nop

0040887c <__retarget_lock_close_recursive>:
  40887c:	4770      	bx	lr
  40887e:	bf00      	nop

00408880 <__retarget_lock_acquire_recursive>:
  408880:	4770      	bx	lr
  408882:	bf00      	nop

00408884 <__retarget_lock_release_recursive>:
  408884:	4770      	bx	lr
  408886:	bf00      	nop

00408888 <__swhatbuf_r>:
  408888:	b570      	push	{r4, r5, r6, lr}
  40888a:	460c      	mov	r4, r1
  40888c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408890:	2900      	cmp	r1, #0
  408892:	b090      	sub	sp, #64	; 0x40
  408894:	4615      	mov	r5, r2
  408896:	461e      	mov	r6, r3
  408898:	db14      	blt.n	4088c4 <__swhatbuf_r+0x3c>
  40889a:	aa01      	add	r2, sp, #4
  40889c:	f001 f84a 	bl	409934 <_fstat_r>
  4088a0:	2800      	cmp	r0, #0
  4088a2:	db0f      	blt.n	4088c4 <__swhatbuf_r+0x3c>
  4088a4:	9a02      	ldr	r2, [sp, #8]
  4088a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4088aa:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4088ae:	fab2 f282 	clz	r2, r2
  4088b2:	0952      	lsrs	r2, r2, #5
  4088b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4088b8:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4088bc:	6032      	str	r2, [r6, #0]
  4088be:	602b      	str	r3, [r5, #0]
  4088c0:	b010      	add	sp, #64	; 0x40
  4088c2:	bd70      	pop	{r4, r5, r6, pc}
  4088c4:	89a2      	ldrh	r2, [r4, #12]
  4088c6:	2300      	movs	r3, #0
  4088c8:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  4088cc:	6033      	str	r3, [r6, #0]
  4088ce:	d004      	beq.n	4088da <__swhatbuf_r+0x52>
  4088d0:	2240      	movs	r2, #64	; 0x40
  4088d2:	4618      	mov	r0, r3
  4088d4:	602a      	str	r2, [r5, #0]
  4088d6:	b010      	add	sp, #64	; 0x40
  4088d8:	bd70      	pop	{r4, r5, r6, pc}
  4088da:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4088de:	602b      	str	r3, [r5, #0]
  4088e0:	b010      	add	sp, #64	; 0x40
  4088e2:	bd70      	pop	{r4, r5, r6, pc}

004088e4 <__smakebuf_r>:
  4088e4:	898a      	ldrh	r2, [r1, #12]
  4088e6:	0792      	lsls	r2, r2, #30
  4088e8:	460b      	mov	r3, r1
  4088ea:	d506      	bpl.n	4088fa <__smakebuf_r+0x16>
  4088ec:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4088f0:	2101      	movs	r1, #1
  4088f2:	601a      	str	r2, [r3, #0]
  4088f4:	611a      	str	r2, [r3, #16]
  4088f6:	6159      	str	r1, [r3, #20]
  4088f8:	4770      	bx	lr
  4088fa:	b5f0      	push	{r4, r5, r6, r7, lr}
  4088fc:	b083      	sub	sp, #12
  4088fe:	ab01      	add	r3, sp, #4
  408900:	466a      	mov	r2, sp
  408902:	460c      	mov	r4, r1
  408904:	4606      	mov	r6, r0
  408906:	f7ff ffbf 	bl	408888 <__swhatbuf_r>
  40890a:	9900      	ldr	r1, [sp, #0]
  40890c:	4605      	mov	r5, r0
  40890e:	4630      	mov	r0, r6
  408910:	f7fb fc12 	bl	404138 <_malloc_r>
  408914:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408918:	b1d8      	cbz	r0, 408952 <__smakebuf_r+0x6e>
  40891a:	9a01      	ldr	r2, [sp, #4]
  40891c:	4f15      	ldr	r7, [pc, #84]	; (408974 <__smakebuf_r+0x90>)
  40891e:	9900      	ldr	r1, [sp, #0]
  408920:	63f7      	str	r7, [r6, #60]	; 0x3c
  408922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  408926:	81a3      	strh	r3, [r4, #12]
  408928:	6020      	str	r0, [r4, #0]
  40892a:	6120      	str	r0, [r4, #16]
  40892c:	6161      	str	r1, [r4, #20]
  40892e:	b91a      	cbnz	r2, 408938 <__smakebuf_r+0x54>
  408930:	432b      	orrs	r3, r5
  408932:	81a3      	strh	r3, [r4, #12]
  408934:	b003      	add	sp, #12
  408936:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408938:	4630      	mov	r0, r6
  40893a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40893e:	f001 f80d 	bl	40995c <_isatty_r>
  408942:	b1a0      	cbz	r0, 40896e <__smakebuf_r+0x8a>
  408944:	89a3      	ldrh	r3, [r4, #12]
  408946:	f023 0303 	bic.w	r3, r3, #3
  40894a:	f043 0301 	orr.w	r3, r3, #1
  40894e:	b21b      	sxth	r3, r3
  408950:	e7ee      	b.n	408930 <__smakebuf_r+0x4c>
  408952:	059a      	lsls	r2, r3, #22
  408954:	d4ee      	bmi.n	408934 <__smakebuf_r+0x50>
  408956:	f023 0303 	bic.w	r3, r3, #3
  40895a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40895e:	f043 0302 	orr.w	r3, r3, #2
  408962:	2101      	movs	r1, #1
  408964:	81a3      	strh	r3, [r4, #12]
  408966:	6022      	str	r2, [r4, #0]
  408968:	6122      	str	r2, [r4, #16]
  40896a:	6161      	str	r1, [r4, #20]
  40896c:	e7e2      	b.n	408934 <__smakebuf_r+0x50>
  40896e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408972:	e7dd      	b.n	408930 <__smakebuf_r+0x4c>
  408974:	00408089 	.word	0x00408089

00408978 <__ascii_mbtowc>:
  408978:	b082      	sub	sp, #8
  40897a:	b149      	cbz	r1, 408990 <__ascii_mbtowc+0x18>
  40897c:	b15a      	cbz	r2, 408996 <__ascii_mbtowc+0x1e>
  40897e:	b16b      	cbz	r3, 40899c <__ascii_mbtowc+0x24>
  408980:	7813      	ldrb	r3, [r2, #0]
  408982:	600b      	str	r3, [r1, #0]
  408984:	7812      	ldrb	r2, [r2, #0]
  408986:	1c10      	adds	r0, r2, #0
  408988:	bf18      	it	ne
  40898a:	2001      	movne	r0, #1
  40898c:	b002      	add	sp, #8
  40898e:	4770      	bx	lr
  408990:	a901      	add	r1, sp, #4
  408992:	2a00      	cmp	r2, #0
  408994:	d1f3      	bne.n	40897e <__ascii_mbtowc+0x6>
  408996:	4610      	mov	r0, r2
  408998:	b002      	add	sp, #8
  40899a:	4770      	bx	lr
  40899c:	f06f 0001 	mvn.w	r0, #1
  4089a0:	e7f4      	b.n	40898c <__ascii_mbtowc+0x14>
  4089a2:	bf00      	nop
	...

004089b0 <memchr>:
  4089b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4089b4:	2a10      	cmp	r2, #16
  4089b6:	db2b      	blt.n	408a10 <memchr+0x60>
  4089b8:	f010 0f07 	tst.w	r0, #7
  4089bc:	d008      	beq.n	4089d0 <memchr+0x20>
  4089be:	f810 3b01 	ldrb.w	r3, [r0], #1
  4089c2:	3a01      	subs	r2, #1
  4089c4:	428b      	cmp	r3, r1
  4089c6:	d02d      	beq.n	408a24 <memchr+0x74>
  4089c8:	f010 0f07 	tst.w	r0, #7
  4089cc:	b342      	cbz	r2, 408a20 <memchr+0x70>
  4089ce:	d1f6      	bne.n	4089be <memchr+0xe>
  4089d0:	b4f0      	push	{r4, r5, r6, r7}
  4089d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4089d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4089da:	f022 0407 	bic.w	r4, r2, #7
  4089de:	f07f 0700 	mvns.w	r7, #0
  4089e2:	2300      	movs	r3, #0
  4089e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4089e8:	3c08      	subs	r4, #8
  4089ea:	ea85 0501 	eor.w	r5, r5, r1
  4089ee:	ea86 0601 	eor.w	r6, r6, r1
  4089f2:	fa85 f547 	uadd8	r5, r5, r7
  4089f6:	faa3 f587 	sel	r5, r3, r7
  4089fa:	fa86 f647 	uadd8	r6, r6, r7
  4089fe:	faa5 f687 	sel	r6, r5, r7
  408a02:	b98e      	cbnz	r6, 408a28 <memchr+0x78>
  408a04:	d1ee      	bne.n	4089e4 <memchr+0x34>
  408a06:	bcf0      	pop	{r4, r5, r6, r7}
  408a08:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  408a0c:	f002 0207 	and.w	r2, r2, #7
  408a10:	b132      	cbz	r2, 408a20 <memchr+0x70>
  408a12:	f810 3b01 	ldrb.w	r3, [r0], #1
  408a16:	3a01      	subs	r2, #1
  408a18:	ea83 0301 	eor.w	r3, r3, r1
  408a1c:	b113      	cbz	r3, 408a24 <memchr+0x74>
  408a1e:	d1f8      	bne.n	408a12 <memchr+0x62>
  408a20:	2000      	movs	r0, #0
  408a22:	4770      	bx	lr
  408a24:	3801      	subs	r0, #1
  408a26:	4770      	bx	lr
  408a28:	2d00      	cmp	r5, #0
  408a2a:	bf06      	itte	eq
  408a2c:	4635      	moveq	r5, r6
  408a2e:	3803      	subeq	r0, #3
  408a30:	3807      	subne	r0, #7
  408a32:	f015 0f01 	tst.w	r5, #1
  408a36:	d107      	bne.n	408a48 <memchr+0x98>
  408a38:	3001      	adds	r0, #1
  408a3a:	f415 7f80 	tst.w	r5, #256	; 0x100
  408a3e:	bf02      	ittt	eq
  408a40:	3001      	addeq	r0, #1
  408a42:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  408a46:	3001      	addeq	r0, #1
  408a48:	bcf0      	pop	{r4, r5, r6, r7}
  408a4a:	3801      	subs	r0, #1
  408a4c:	4770      	bx	lr
  408a4e:	bf00      	nop

00408a50 <memmove>:
  408a50:	4288      	cmp	r0, r1
  408a52:	b5f0      	push	{r4, r5, r6, r7, lr}
  408a54:	d90d      	bls.n	408a72 <memmove+0x22>
  408a56:	188b      	adds	r3, r1, r2
  408a58:	4298      	cmp	r0, r3
  408a5a:	d20a      	bcs.n	408a72 <memmove+0x22>
  408a5c:	1884      	adds	r4, r0, r2
  408a5e:	2a00      	cmp	r2, #0
  408a60:	d051      	beq.n	408b06 <memmove+0xb6>
  408a62:	4622      	mov	r2, r4
  408a64:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  408a68:	f802 4d01 	strb.w	r4, [r2, #-1]!
  408a6c:	4299      	cmp	r1, r3
  408a6e:	d1f9      	bne.n	408a64 <memmove+0x14>
  408a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408a72:	2a0f      	cmp	r2, #15
  408a74:	d948      	bls.n	408b08 <memmove+0xb8>
  408a76:	ea41 0300 	orr.w	r3, r1, r0
  408a7a:	079b      	lsls	r3, r3, #30
  408a7c:	d146      	bne.n	408b0c <memmove+0xbc>
  408a7e:	f100 0410 	add.w	r4, r0, #16
  408a82:	f101 0310 	add.w	r3, r1, #16
  408a86:	4615      	mov	r5, r2
  408a88:	f853 6c10 	ldr.w	r6, [r3, #-16]
  408a8c:	f844 6c10 	str.w	r6, [r4, #-16]
  408a90:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  408a94:	f844 6c0c 	str.w	r6, [r4, #-12]
  408a98:	f853 6c08 	ldr.w	r6, [r3, #-8]
  408a9c:	f844 6c08 	str.w	r6, [r4, #-8]
  408aa0:	3d10      	subs	r5, #16
  408aa2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  408aa6:	f844 6c04 	str.w	r6, [r4, #-4]
  408aaa:	2d0f      	cmp	r5, #15
  408aac:	f103 0310 	add.w	r3, r3, #16
  408ab0:	f104 0410 	add.w	r4, r4, #16
  408ab4:	d8e8      	bhi.n	408a88 <memmove+0x38>
  408ab6:	f1a2 0310 	sub.w	r3, r2, #16
  408aba:	f023 030f 	bic.w	r3, r3, #15
  408abe:	f002 0e0f 	and.w	lr, r2, #15
  408ac2:	3310      	adds	r3, #16
  408ac4:	f1be 0f03 	cmp.w	lr, #3
  408ac8:	4419      	add	r1, r3
  408aca:	4403      	add	r3, r0
  408acc:	d921      	bls.n	408b12 <memmove+0xc2>
  408ace:	1f1e      	subs	r6, r3, #4
  408ad0:	460d      	mov	r5, r1
  408ad2:	4674      	mov	r4, lr
  408ad4:	3c04      	subs	r4, #4
  408ad6:	f855 7b04 	ldr.w	r7, [r5], #4
  408ada:	f846 7f04 	str.w	r7, [r6, #4]!
  408ade:	2c03      	cmp	r4, #3
  408ae0:	d8f8      	bhi.n	408ad4 <memmove+0x84>
  408ae2:	f1ae 0404 	sub.w	r4, lr, #4
  408ae6:	f024 0403 	bic.w	r4, r4, #3
  408aea:	3404      	adds	r4, #4
  408aec:	4421      	add	r1, r4
  408aee:	4423      	add	r3, r4
  408af0:	f002 0203 	and.w	r2, r2, #3
  408af4:	b162      	cbz	r2, 408b10 <memmove+0xc0>
  408af6:	3b01      	subs	r3, #1
  408af8:	440a      	add	r2, r1
  408afa:	f811 4b01 	ldrb.w	r4, [r1], #1
  408afe:	f803 4f01 	strb.w	r4, [r3, #1]!
  408b02:	428a      	cmp	r2, r1
  408b04:	d1f9      	bne.n	408afa <memmove+0xaa>
  408b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408b08:	4603      	mov	r3, r0
  408b0a:	e7f3      	b.n	408af4 <memmove+0xa4>
  408b0c:	4603      	mov	r3, r0
  408b0e:	e7f2      	b.n	408af6 <memmove+0xa6>
  408b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408b12:	4672      	mov	r2, lr
  408b14:	e7ee      	b.n	408af4 <memmove+0xa4>
  408b16:	bf00      	nop

00408b18 <_Balloc>:
  408b18:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  408b1a:	b570      	push	{r4, r5, r6, lr}
  408b1c:	4605      	mov	r5, r0
  408b1e:	460c      	mov	r4, r1
  408b20:	b14b      	cbz	r3, 408b36 <_Balloc+0x1e>
  408b22:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  408b26:	b180      	cbz	r0, 408b4a <_Balloc+0x32>
  408b28:	6802      	ldr	r2, [r0, #0]
  408b2a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  408b2e:	2300      	movs	r3, #0
  408b30:	6103      	str	r3, [r0, #16]
  408b32:	60c3      	str	r3, [r0, #12]
  408b34:	bd70      	pop	{r4, r5, r6, pc}
  408b36:	2221      	movs	r2, #33	; 0x21
  408b38:	2104      	movs	r1, #4
  408b3a:	f000 fe57 	bl	4097ec <_calloc_r>
  408b3e:	64e8      	str	r0, [r5, #76]	; 0x4c
  408b40:	4603      	mov	r3, r0
  408b42:	2800      	cmp	r0, #0
  408b44:	d1ed      	bne.n	408b22 <_Balloc+0xa>
  408b46:	2000      	movs	r0, #0
  408b48:	bd70      	pop	{r4, r5, r6, pc}
  408b4a:	2101      	movs	r1, #1
  408b4c:	fa01 f604 	lsl.w	r6, r1, r4
  408b50:	1d72      	adds	r2, r6, #5
  408b52:	4628      	mov	r0, r5
  408b54:	0092      	lsls	r2, r2, #2
  408b56:	f000 fe49 	bl	4097ec <_calloc_r>
  408b5a:	2800      	cmp	r0, #0
  408b5c:	d0f3      	beq.n	408b46 <_Balloc+0x2e>
  408b5e:	6044      	str	r4, [r0, #4]
  408b60:	6086      	str	r6, [r0, #8]
  408b62:	e7e4      	b.n	408b2e <_Balloc+0x16>

00408b64 <_Bfree>:
  408b64:	b131      	cbz	r1, 408b74 <_Bfree+0x10>
  408b66:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  408b68:	684a      	ldr	r2, [r1, #4]
  408b6a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  408b6e:	6008      	str	r0, [r1, #0]
  408b70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  408b74:	4770      	bx	lr
  408b76:	bf00      	nop

00408b78 <__multadd>:
  408b78:	b5f0      	push	{r4, r5, r6, r7, lr}
  408b7a:	690c      	ldr	r4, [r1, #16]
  408b7c:	b083      	sub	sp, #12
  408b7e:	460d      	mov	r5, r1
  408b80:	4606      	mov	r6, r0
  408b82:	f101 0e14 	add.w	lr, r1, #20
  408b86:	2700      	movs	r7, #0
  408b88:	f8de 0000 	ldr.w	r0, [lr]
  408b8c:	b281      	uxth	r1, r0
  408b8e:	fb02 3301 	mla	r3, r2, r1, r3
  408b92:	0c01      	lsrs	r1, r0, #16
  408b94:	0c18      	lsrs	r0, r3, #16
  408b96:	fb02 0101 	mla	r1, r2, r1, r0
  408b9a:	b29b      	uxth	r3, r3
  408b9c:	3701      	adds	r7, #1
  408b9e:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  408ba2:	42bc      	cmp	r4, r7
  408ba4:	f84e 3b04 	str.w	r3, [lr], #4
  408ba8:	ea4f 4311 	mov.w	r3, r1, lsr #16
  408bac:	dcec      	bgt.n	408b88 <__multadd+0x10>
  408bae:	b13b      	cbz	r3, 408bc0 <__multadd+0x48>
  408bb0:	68aa      	ldr	r2, [r5, #8]
  408bb2:	4294      	cmp	r4, r2
  408bb4:	da07      	bge.n	408bc6 <__multadd+0x4e>
  408bb6:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  408bba:	3401      	adds	r4, #1
  408bbc:	6153      	str	r3, [r2, #20]
  408bbe:	612c      	str	r4, [r5, #16]
  408bc0:	4628      	mov	r0, r5
  408bc2:	b003      	add	sp, #12
  408bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408bc6:	6869      	ldr	r1, [r5, #4]
  408bc8:	9301      	str	r3, [sp, #4]
  408bca:	3101      	adds	r1, #1
  408bcc:	4630      	mov	r0, r6
  408bce:	f7ff ffa3 	bl	408b18 <_Balloc>
  408bd2:	692a      	ldr	r2, [r5, #16]
  408bd4:	3202      	adds	r2, #2
  408bd6:	f105 010c 	add.w	r1, r5, #12
  408bda:	4607      	mov	r7, r0
  408bdc:	0092      	lsls	r2, r2, #2
  408bde:	300c      	adds	r0, #12
  408be0:	f7fb fd5a 	bl	404698 <memcpy>
  408be4:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  408be6:	6869      	ldr	r1, [r5, #4]
  408be8:	9b01      	ldr	r3, [sp, #4]
  408bea:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  408bee:	6028      	str	r0, [r5, #0]
  408bf0:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  408bf4:	463d      	mov	r5, r7
  408bf6:	e7de      	b.n	408bb6 <__multadd+0x3e>

00408bf8 <__hi0bits>:
  408bf8:	0c02      	lsrs	r2, r0, #16
  408bfa:	0412      	lsls	r2, r2, #16
  408bfc:	4603      	mov	r3, r0
  408bfe:	b9b2      	cbnz	r2, 408c2e <__hi0bits+0x36>
  408c00:	0403      	lsls	r3, r0, #16
  408c02:	2010      	movs	r0, #16
  408c04:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  408c08:	bf04      	itt	eq
  408c0a:	021b      	lsleq	r3, r3, #8
  408c0c:	3008      	addeq	r0, #8
  408c0e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  408c12:	bf04      	itt	eq
  408c14:	011b      	lsleq	r3, r3, #4
  408c16:	3004      	addeq	r0, #4
  408c18:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  408c1c:	bf04      	itt	eq
  408c1e:	009b      	lsleq	r3, r3, #2
  408c20:	3002      	addeq	r0, #2
  408c22:	2b00      	cmp	r3, #0
  408c24:	db02      	blt.n	408c2c <__hi0bits+0x34>
  408c26:	005b      	lsls	r3, r3, #1
  408c28:	d403      	bmi.n	408c32 <__hi0bits+0x3a>
  408c2a:	2020      	movs	r0, #32
  408c2c:	4770      	bx	lr
  408c2e:	2000      	movs	r0, #0
  408c30:	e7e8      	b.n	408c04 <__hi0bits+0xc>
  408c32:	3001      	adds	r0, #1
  408c34:	4770      	bx	lr
  408c36:	bf00      	nop

00408c38 <__lo0bits>:
  408c38:	6803      	ldr	r3, [r0, #0]
  408c3a:	f013 0207 	ands.w	r2, r3, #7
  408c3e:	4601      	mov	r1, r0
  408c40:	d007      	beq.n	408c52 <__lo0bits+0x1a>
  408c42:	07da      	lsls	r2, r3, #31
  408c44:	d421      	bmi.n	408c8a <__lo0bits+0x52>
  408c46:	0798      	lsls	r0, r3, #30
  408c48:	d421      	bmi.n	408c8e <__lo0bits+0x56>
  408c4a:	089b      	lsrs	r3, r3, #2
  408c4c:	600b      	str	r3, [r1, #0]
  408c4e:	2002      	movs	r0, #2
  408c50:	4770      	bx	lr
  408c52:	b298      	uxth	r0, r3
  408c54:	b198      	cbz	r0, 408c7e <__lo0bits+0x46>
  408c56:	4610      	mov	r0, r2
  408c58:	f013 0fff 	tst.w	r3, #255	; 0xff
  408c5c:	bf04      	itt	eq
  408c5e:	0a1b      	lsreq	r3, r3, #8
  408c60:	3008      	addeq	r0, #8
  408c62:	071a      	lsls	r2, r3, #28
  408c64:	bf04      	itt	eq
  408c66:	091b      	lsreq	r3, r3, #4
  408c68:	3004      	addeq	r0, #4
  408c6a:	079a      	lsls	r2, r3, #30
  408c6c:	bf04      	itt	eq
  408c6e:	089b      	lsreq	r3, r3, #2
  408c70:	3002      	addeq	r0, #2
  408c72:	07da      	lsls	r2, r3, #31
  408c74:	d407      	bmi.n	408c86 <__lo0bits+0x4e>
  408c76:	085b      	lsrs	r3, r3, #1
  408c78:	d104      	bne.n	408c84 <__lo0bits+0x4c>
  408c7a:	2020      	movs	r0, #32
  408c7c:	4770      	bx	lr
  408c7e:	0c1b      	lsrs	r3, r3, #16
  408c80:	2010      	movs	r0, #16
  408c82:	e7e9      	b.n	408c58 <__lo0bits+0x20>
  408c84:	3001      	adds	r0, #1
  408c86:	600b      	str	r3, [r1, #0]
  408c88:	4770      	bx	lr
  408c8a:	2000      	movs	r0, #0
  408c8c:	4770      	bx	lr
  408c8e:	085b      	lsrs	r3, r3, #1
  408c90:	600b      	str	r3, [r1, #0]
  408c92:	2001      	movs	r0, #1
  408c94:	4770      	bx	lr
  408c96:	bf00      	nop

00408c98 <__i2b>:
  408c98:	b510      	push	{r4, lr}
  408c9a:	460c      	mov	r4, r1
  408c9c:	2101      	movs	r1, #1
  408c9e:	f7ff ff3b 	bl	408b18 <_Balloc>
  408ca2:	2201      	movs	r2, #1
  408ca4:	6144      	str	r4, [r0, #20]
  408ca6:	6102      	str	r2, [r0, #16]
  408ca8:	bd10      	pop	{r4, pc}
  408caa:	bf00      	nop

00408cac <__multiply>:
  408cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408cb0:	690c      	ldr	r4, [r1, #16]
  408cb2:	6915      	ldr	r5, [r2, #16]
  408cb4:	42ac      	cmp	r4, r5
  408cb6:	b083      	sub	sp, #12
  408cb8:	468b      	mov	fp, r1
  408cba:	4616      	mov	r6, r2
  408cbc:	da04      	bge.n	408cc8 <__multiply+0x1c>
  408cbe:	4622      	mov	r2, r4
  408cc0:	46b3      	mov	fp, r6
  408cc2:	462c      	mov	r4, r5
  408cc4:	460e      	mov	r6, r1
  408cc6:	4615      	mov	r5, r2
  408cc8:	f8db 3008 	ldr.w	r3, [fp, #8]
  408ccc:	f8db 1004 	ldr.w	r1, [fp, #4]
  408cd0:	eb04 0805 	add.w	r8, r4, r5
  408cd4:	4598      	cmp	r8, r3
  408cd6:	bfc8      	it	gt
  408cd8:	3101      	addgt	r1, #1
  408cda:	f7ff ff1d 	bl	408b18 <_Balloc>
  408cde:	f100 0914 	add.w	r9, r0, #20
  408ce2:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  408ce6:	45d1      	cmp	r9, sl
  408ce8:	9000      	str	r0, [sp, #0]
  408cea:	d205      	bcs.n	408cf8 <__multiply+0x4c>
  408cec:	464b      	mov	r3, r9
  408cee:	2100      	movs	r1, #0
  408cf0:	f843 1b04 	str.w	r1, [r3], #4
  408cf4:	459a      	cmp	sl, r3
  408cf6:	d8fb      	bhi.n	408cf0 <__multiply+0x44>
  408cf8:	f106 0c14 	add.w	ip, r6, #20
  408cfc:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  408d00:	f10b 0b14 	add.w	fp, fp, #20
  408d04:	459c      	cmp	ip, r3
  408d06:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  408d0a:	d24c      	bcs.n	408da6 <__multiply+0xfa>
  408d0c:	f8cd a004 	str.w	sl, [sp, #4]
  408d10:	469a      	mov	sl, r3
  408d12:	f8dc 5000 	ldr.w	r5, [ip]
  408d16:	b2af      	uxth	r7, r5
  408d18:	b1ef      	cbz	r7, 408d56 <__multiply+0xaa>
  408d1a:	2100      	movs	r1, #0
  408d1c:	464d      	mov	r5, r9
  408d1e:	465e      	mov	r6, fp
  408d20:	460c      	mov	r4, r1
  408d22:	f856 2b04 	ldr.w	r2, [r6], #4
  408d26:	6828      	ldr	r0, [r5, #0]
  408d28:	b293      	uxth	r3, r2
  408d2a:	b281      	uxth	r1, r0
  408d2c:	fb07 1303 	mla	r3, r7, r3, r1
  408d30:	0c12      	lsrs	r2, r2, #16
  408d32:	0c01      	lsrs	r1, r0, #16
  408d34:	4423      	add	r3, r4
  408d36:	fb07 1102 	mla	r1, r7, r2, r1
  408d3a:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  408d3e:	b29b      	uxth	r3, r3
  408d40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  408d44:	45b6      	cmp	lr, r6
  408d46:	f845 3b04 	str.w	r3, [r5], #4
  408d4a:	ea4f 4411 	mov.w	r4, r1, lsr #16
  408d4e:	d8e8      	bhi.n	408d22 <__multiply+0x76>
  408d50:	602c      	str	r4, [r5, #0]
  408d52:	f8dc 5000 	ldr.w	r5, [ip]
  408d56:	0c2d      	lsrs	r5, r5, #16
  408d58:	d01d      	beq.n	408d96 <__multiply+0xea>
  408d5a:	f8d9 3000 	ldr.w	r3, [r9]
  408d5e:	4648      	mov	r0, r9
  408d60:	461c      	mov	r4, r3
  408d62:	4659      	mov	r1, fp
  408d64:	2200      	movs	r2, #0
  408d66:	880e      	ldrh	r6, [r1, #0]
  408d68:	0c24      	lsrs	r4, r4, #16
  408d6a:	fb05 4406 	mla	r4, r5, r6, r4
  408d6e:	4422      	add	r2, r4
  408d70:	b29b      	uxth	r3, r3
  408d72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  408d76:	f840 3b04 	str.w	r3, [r0], #4
  408d7a:	f851 3b04 	ldr.w	r3, [r1], #4
  408d7e:	6804      	ldr	r4, [r0, #0]
  408d80:	0c1b      	lsrs	r3, r3, #16
  408d82:	b2a6      	uxth	r6, r4
  408d84:	fb05 6303 	mla	r3, r5, r3, r6
  408d88:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  408d8c:	458e      	cmp	lr, r1
  408d8e:	ea4f 4213 	mov.w	r2, r3, lsr #16
  408d92:	d8e8      	bhi.n	408d66 <__multiply+0xba>
  408d94:	6003      	str	r3, [r0, #0]
  408d96:	f10c 0c04 	add.w	ip, ip, #4
  408d9a:	45e2      	cmp	sl, ip
  408d9c:	f109 0904 	add.w	r9, r9, #4
  408da0:	d8b7      	bhi.n	408d12 <__multiply+0x66>
  408da2:	f8dd a004 	ldr.w	sl, [sp, #4]
  408da6:	f1b8 0f00 	cmp.w	r8, #0
  408daa:	dd0b      	ble.n	408dc4 <__multiply+0x118>
  408dac:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  408db0:	f1aa 0a04 	sub.w	sl, sl, #4
  408db4:	b11b      	cbz	r3, 408dbe <__multiply+0x112>
  408db6:	e005      	b.n	408dc4 <__multiply+0x118>
  408db8:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  408dbc:	b913      	cbnz	r3, 408dc4 <__multiply+0x118>
  408dbe:	f1b8 0801 	subs.w	r8, r8, #1
  408dc2:	d1f9      	bne.n	408db8 <__multiply+0x10c>
  408dc4:	9800      	ldr	r0, [sp, #0]
  408dc6:	f8c0 8010 	str.w	r8, [r0, #16]
  408dca:	b003      	add	sp, #12
  408dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00408dd0 <__pow5mult>:
  408dd0:	f012 0303 	ands.w	r3, r2, #3
  408dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408dd8:	4614      	mov	r4, r2
  408dda:	4607      	mov	r7, r0
  408ddc:	d12e      	bne.n	408e3c <__pow5mult+0x6c>
  408dde:	460d      	mov	r5, r1
  408de0:	10a4      	asrs	r4, r4, #2
  408de2:	d01c      	beq.n	408e1e <__pow5mult+0x4e>
  408de4:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  408de6:	b396      	cbz	r6, 408e4e <__pow5mult+0x7e>
  408de8:	07e3      	lsls	r3, r4, #31
  408dea:	f04f 0800 	mov.w	r8, #0
  408dee:	d406      	bmi.n	408dfe <__pow5mult+0x2e>
  408df0:	1064      	asrs	r4, r4, #1
  408df2:	d014      	beq.n	408e1e <__pow5mult+0x4e>
  408df4:	6830      	ldr	r0, [r6, #0]
  408df6:	b1a8      	cbz	r0, 408e24 <__pow5mult+0x54>
  408df8:	4606      	mov	r6, r0
  408dfa:	07e3      	lsls	r3, r4, #31
  408dfc:	d5f8      	bpl.n	408df0 <__pow5mult+0x20>
  408dfe:	4632      	mov	r2, r6
  408e00:	4629      	mov	r1, r5
  408e02:	4638      	mov	r0, r7
  408e04:	f7ff ff52 	bl	408cac <__multiply>
  408e08:	b1b5      	cbz	r5, 408e38 <__pow5mult+0x68>
  408e0a:	686a      	ldr	r2, [r5, #4]
  408e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  408e0e:	1064      	asrs	r4, r4, #1
  408e10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  408e14:	6029      	str	r1, [r5, #0]
  408e16:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  408e1a:	4605      	mov	r5, r0
  408e1c:	d1ea      	bne.n	408df4 <__pow5mult+0x24>
  408e1e:	4628      	mov	r0, r5
  408e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408e24:	4632      	mov	r2, r6
  408e26:	4631      	mov	r1, r6
  408e28:	4638      	mov	r0, r7
  408e2a:	f7ff ff3f 	bl	408cac <__multiply>
  408e2e:	6030      	str	r0, [r6, #0]
  408e30:	f8c0 8000 	str.w	r8, [r0]
  408e34:	4606      	mov	r6, r0
  408e36:	e7e0      	b.n	408dfa <__pow5mult+0x2a>
  408e38:	4605      	mov	r5, r0
  408e3a:	e7d9      	b.n	408df0 <__pow5mult+0x20>
  408e3c:	1e5a      	subs	r2, r3, #1
  408e3e:	4d0b      	ldr	r5, [pc, #44]	; (408e6c <__pow5mult+0x9c>)
  408e40:	2300      	movs	r3, #0
  408e42:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  408e46:	f7ff fe97 	bl	408b78 <__multadd>
  408e4a:	4605      	mov	r5, r0
  408e4c:	e7c8      	b.n	408de0 <__pow5mult+0x10>
  408e4e:	2101      	movs	r1, #1
  408e50:	4638      	mov	r0, r7
  408e52:	f7ff fe61 	bl	408b18 <_Balloc>
  408e56:	f240 2171 	movw	r1, #625	; 0x271
  408e5a:	2201      	movs	r2, #1
  408e5c:	2300      	movs	r3, #0
  408e5e:	6141      	str	r1, [r0, #20]
  408e60:	6102      	str	r2, [r0, #16]
  408e62:	4606      	mov	r6, r0
  408e64:	64b8      	str	r0, [r7, #72]	; 0x48
  408e66:	6003      	str	r3, [r0, #0]
  408e68:	e7be      	b.n	408de8 <__pow5mult+0x18>
  408e6a:	bf00      	nop
  408e6c:	0040a8b8 	.word	0x0040a8b8

00408e70 <__lshift>:
  408e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408e74:	4691      	mov	r9, r2
  408e76:	690a      	ldr	r2, [r1, #16]
  408e78:	688b      	ldr	r3, [r1, #8]
  408e7a:	ea4f 1469 	mov.w	r4, r9, asr #5
  408e7e:	eb04 0802 	add.w	r8, r4, r2
  408e82:	f108 0501 	add.w	r5, r8, #1
  408e86:	429d      	cmp	r5, r3
  408e88:	460e      	mov	r6, r1
  408e8a:	4607      	mov	r7, r0
  408e8c:	6849      	ldr	r1, [r1, #4]
  408e8e:	dd04      	ble.n	408e9a <__lshift+0x2a>
  408e90:	005b      	lsls	r3, r3, #1
  408e92:	429d      	cmp	r5, r3
  408e94:	f101 0101 	add.w	r1, r1, #1
  408e98:	dcfa      	bgt.n	408e90 <__lshift+0x20>
  408e9a:	4638      	mov	r0, r7
  408e9c:	f7ff fe3c 	bl	408b18 <_Balloc>
  408ea0:	2c00      	cmp	r4, #0
  408ea2:	f100 0314 	add.w	r3, r0, #20
  408ea6:	dd06      	ble.n	408eb6 <__lshift+0x46>
  408ea8:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  408eac:	2100      	movs	r1, #0
  408eae:	f843 1b04 	str.w	r1, [r3], #4
  408eb2:	429a      	cmp	r2, r3
  408eb4:	d1fb      	bne.n	408eae <__lshift+0x3e>
  408eb6:	6934      	ldr	r4, [r6, #16]
  408eb8:	f106 0114 	add.w	r1, r6, #20
  408ebc:	f019 091f 	ands.w	r9, r9, #31
  408ec0:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  408ec4:	d01d      	beq.n	408f02 <__lshift+0x92>
  408ec6:	f1c9 0c20 	rsb	ip, r9, #32
  408eca:	2200      	movs	r2, #0
  408ecc:	680c      	ldr	r4, [r1, #0]
  408ece:	fa04 f409 	lsl.w	r4, r4, r9
  408ed2:	4314      	orrs	r4, r2
  408ed4:	f843 4b04 	str.w	r4, [r3], #4
  408ed8:	f851 2b04 	ldr.w	r2, [r1], #4
  408edc:	458e      	cmp	lr, r1
  408ede:	fa22 f20c 	lsr.w	r2, r2, ip
  408ee2:	d8f3      	bhi.n	408ecc <__lshift+0x5c>
  408ee4:	601a      	str	r2, [r3, #0]
  408ee6:	b10a      	cbz	r2, 408eec <__lshift+0x7c>
  408ee8:	f108 0502 	add.w	r5, r8, #2
  408eec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  408eee:	6872      	ldr	r2, [r6, #4]
  408ef0:	3d01      	subs	r5, #1
  408ef2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  408ef6:	6105      	str	r5, [r0, #16]
  408ef8:	6031      	str	r1, [r6, #0]
  408efa:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  408efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408f02:	3b04      	subs	r3, #4
  408f04:	f851 2b04 	ldr.w	r2, [r1], #4
  408f08:	f843 2f04 	str.w	r2, [r3, #4]!
  408f0c:	458e      	cmp	lr, r1
  408f0e:	d8f9      	bhi.n	408f04 <__lshift+0x94>
  408f10:	e7ec      	b.n	408eec <__lshift+0x7c>
  408f12:	bf00      	nop

00408f14 <__mcmp>:
  408f14:	b430      	push	{r4, r5}
  408f16:	690b      	ldr	r3, [r1, #16]
  408f18:	4605      	mov	r5, r0
  408f1a:	6900      	ldr	r0, [r0, #16]
  408f1c:	1ac0      	subs	r0, r0, r3
  408f1e:	d10f      	bne.n	408f40 <__mcmp+0x2c>
  408f20:	009b      	lsls	r3, r3, #2
  408f22:	3514      	adds	r5, #20
  408f24:	3114      	adds	r1, #20
  408f26:	4419      	add	r1, r3
  408f28:	442b      	add	r3, r5
  408f2a:	e001      	b.n	408f30 <__mcmp+0x1c>
  408f2c:	429d      	cmp	r5, r3
  408f2e:	d207      	bcs.n	408f40 <__mcmp+0x2c>
  408f30:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  408f34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  408f38:	4294      	cmp	r4, r2
  408f3a:	d0f7      	beq.n	408f2c <__mcmp+0x18>
  408f3c:	d302      	bcc.n	408f44 <__mcmp+0x30>
  408f3e:	2001      	movs	r0, #1
  408f40:	bc30      	pop	{r4, r5}
  408f42:	4770      	bx	lr
  408f44:	f04f 30ff 	mov.w	r0, #4294967295
  408f48:	e7fa      	b.n	408f40 <__mcmp+0x2c>
  408f4a:	bf00      	nop

00408f4c <__mdiff>:
  408f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408f50:	690f      	ldr	r7, [r1, #16]
  408f52:	460e      	mov	r6, r1
  408f54:	6911      	ldr	r1, [r2, #16]
  408f56:	1a7f      	subs	r7, r7, r1
  408f58:	2f00      	cmp	r7, #0
  408f5a:	4690      	mov	r8, r2
  408f5c:	d117      	bne.n	408f8e <__mdiff+0x42>
  408f5e:	0089      	lsls	r1, r1, #2
  408f60:	f106 0514 	add.w	r5, r6, #20
  408f64:	f102 0e14 	add.w	lr, r2, #20
  408f68:	186b      	adds	r3, r5, r1
  408f6a:	4471      	add	r1, lr
  408f6c:	e001      	b.n	408f72 <__mdiff+0x26>
  408f6e:	429d      	cmp	r5, r3
  408f70:	d25c      	bcs.n	40902c <__mdiff+0xe0>
  408f72:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  408f76:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  408f7a:	42a2      	cmp	r2, r4
  408f7c:	d0f7      	beq.n	408f6e <__mdiff+0x22>
  408f7e:	d25e      	bcs.n	40903e <__mdiff+0xf2>
  408f80:	4633      	mov	r3, r6
  408f82:	462c      	mov	r4, r5
  408f84:	4646      	mov	r6, r8
  408f86:	4675      	mov	r5, lr
  408f88:	4698      	mov	r8, r3
  408f8a:	2701      	movs	r7, #1
  408f8c:	e005      	b.n	408f9a <__mdiff+0x4e>
  408f8e:	db58      	blt.n	409042 <__mdiff+0xf6>
  408f90:	f106 0514 	add.w	r5, r6, #20
  408f94:	f108 0414 	add.w	r4, r8, #20
  408f98:	2700      	movs	r7, #0
  408f9a:	6871      	ldr	r1, [r6, #4]
  408f9c:	f7ff fdbc 	bl	408b18 <_Balloc>
  408fa0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  408fa4:	6936      	ldr	r6, [r6, #16]
  408fa6:	60c7      	str	r7, [r0, #12]
  408fa8:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  408fac:	46a6      	mov	lr, r4
  408fae:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  408fb2:	f100 0414 	add.w	r4, r0, #20
  408fb6:	2300      	movs	r3, #0
  408fb8:	f85e 1b04 	ldr.w	r1, [lr], #4
  408fbc:	f855 8b04 	ldr.w	r8, [r5], #4
  408fc0:	b28a      	uxth	r2, r1
  408fc2:	fa13 f388 	uxtah	r3, r3, r8
  408fc6:	0c09      	lsrs	r1, r1, #16
  408fc8:	1a9a      	subs	r2, r3, r2
  408fca:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  408fce:	eb03 4322 	add.w	r3, r3, r2, asr #16
  408fd2:	b292      	uxth	r2, r2
  408fd4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  408fd8:	45f4      	cmp	ip, lr
  408fda:	f844 2b04 	str.w	r2, [r4], #4
  408fde:	ea4f 4323 	mov.w	r3, r3, asr #16
  408fe2:	d8e9      	bhi.n	408fb8 <__mdiff+0x6c>
  408fe4:	42af      	cmp	r7, r5
  408fe6:	d917      	bls.n	409018 <__mdiff+0xcc>
  408fe8:	46a4      	mov	ip, r4
  408fea:	46ae      	mov	lr, r5
  408fec:	f85e 2b04 	ldr.w	r2, [lr], #4
  408ff0:	fa13 f382 	uxtah	r3, r3, r2
  408ff4:	1419      	asrs	r1, r3, #16
  408ff6:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  408ffa:	b29b      	uxth	r3, r3
  408ffc:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  409000:	4577      	cmp	r7, lr
  409002:	f84c 2b04 	str.w	r2, [ip], #4
  409006:	ea4f 4321 	mov.w	r3, r1, asr #16
  40900a:	d8ef      	bhi.n	408fec <__mdiff+0xa0>
  40900c:	43ed      	mvns	r5, r5
  40900e:	442f      	add	r7, r5
  409010:	f027 0703 	bic.w	r7, r7, #3
  409014:	3704      	adds	r7, #4
  409016:	443c      	add	r4, r7
  409018:	3c04      	subs	r4, #4
  40901a:	b922      	cbnz	r2, 409026 <__mdiff+0xda>
  40901c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  409020:	3e01      	subs	r6, #1
  409022:	2b00      	cmp	r3, #0
  409024:	d0fa      	beq.n	40901c <__mdiff+0xd0>
  409026:	6106      	str	r6, [r0, #16]
  409028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40902c:	2100      	movs	r1, #0
  40902e:	f7ff fd73 	bl	408b18 <_Balloc>
  409032:	2201      	movs	r2, #1
  409034:	2300      	movs	r3, #0
  409036:	6102      	str	r2, [r0, #16]
  409038:	6143      	str	r3, [r0, #20]
  40903a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40903e:	4674      	mov	r4, lr
  409040:	e7ab      	b.n	408f9a <__mdiff+0x4e>
  409042:	4633      	mov	r3, r6
  409044:	f106 0414 	add.w	r4, r6, #20
  409048:	f102 0514 	add.w	r5, r2, #20
  40904c:	4616      	mov	r6, r2
  40904e:	2701      	movs	r7, #1
  409050:	4698      	mov	r8, r3
  409052:	e7a2      	b.n	408f9a <__mdiff+0x4e>

00409054 <__d2b>:
  409054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409058:	b082      	sub	sp, #8
  40905a:	2101      	movs	r1, #1
  40905c:	461c      	mov	r4, r3
  40905e:	f3c3 570a 	ubfx	r7, r3, #20, #11
  409062:	4615      	mov	r5, r2
  409064:	9e08      	ldr	r6, [sp, #32]
  409066:	f7ff fd57 	bl	408b18 <_Balloc>
  40906a:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40906e:	4680      	mov	r8, r0
  409070:	b10f      	cbz	r7, 409076 <__d2b+0x22>
  409072:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  409076:	9401      	str	r4, [sp, #4]
  409078:	b31d      	cbz	r5, 4090c2 <__d2b+0x6e>
  40907a:	a802      	add	r0, sp, #8
  40907c:	f840 5d08 	str.w	r5, [r0, #-8]!
  409080:	f7ff fdda 	bl	408c38 <__lo0bits>
  409084:	2800      	cmp	r0, #0
  409086:	d134      	bne.n	4090f2 <__d2b+0x9e>
  409088:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40908c:	f8c8 2014 	str.w	r2, [r8, #20]
  409090:	2b00      	cmp	r3, #0
  409092:	bf0c      	ite	eq
  409094:	2101      	moveq	r1, #1
  409096:	2102      	movne	r1, #2
  409098:	f8c8 3018 	str.w	r3, [r8, #24]
  40909c:	f8c8 1010 	str.w	r1, [r8, #16]
  4090a0:	b9df      	cbnz	r7, 4090da <__d2b+0x86>
  4090a2:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  4090a6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  4090aa:	6030      	str	r0, [r6, #0]
  4090ac:	6918      	ldr	r0, [r3, #16]
  4090ae:	f7ff fda3 	bl	408bf8 <__hi0bits>
  4090b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4090b4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  4090b8:	6018      	str	r0, [r3, #0]
  4090ba:	4640      	mov	r0, r8
  4090bc:	b002      	add	sp, #8
  4090be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4090c2:	a801      	add	r0, sp, #4
  4090c4:	f7ff fdb8 	bl	408c38 <__lo0bits>
  4090c8:	9b01      	ldr	r3, [sp, #4]
  4090ca:	f8c8 3014 	str.w	r3, [r8, #20]
  4090ce:	2101      	movs	r1, #1
  4090d0:	3020      	adds	r0, #32
  4090d2:	f8c8 1010 	str.w	r1, [r8, #16]
  4090d6:	2f00      	cmp	r7, #0
  4090d8:	d0e3      	beq.n	4090a2 <__d2b+0x4e>
  4090da:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4090dc:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  4090e0:	4407      	add	r7, r0
  4090e2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  4090e6:	6037      	str	r7, [r6, #0]
  4090e8:	6018      	str	r0, [r3, #0]
  4090ea:	4640      	mov	r0, r8
  4090ec:	b002      	add	sp, #8
  4090ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4090f2:	e89d 000a 	ldmia.w	sp, {r1, r3}
  4090f6:	f1c0 0220 	rsb	r2, r0, #32
  4090fa:	fa03 f202 	lsl.w	r2, r3, r2
  4090fe:	430a      	orrs	r2, r1
  409100:	40c3      	lsrs	r3, r0
  409102:	9301      	str	r3, [sp, #4]
  409104:	f8c8 2014 	str.w	r2, [r8, #20]
  409108:	e7c2      	b.n	409090 <__d2b+0x3c>
  40910a:	bf00      	nop

0040910c <_realloc_r>:
  40910c:	2900      	cmp	r1, #0
  40910e:	f000 8095 	beq.w	40923c <_realloc_r+0x130>
  409112:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409116:	460d      	mov	r5, r1
  409118:	4616      	mov	r6, r2
  40911a:	b083      	sub	sp, #12
  40911c:	4680      	mov	r8, r0
  40911e:	f106 070b 	add.w	r7, r6, #11
  409122:	f7fb fba1 	bl	404868 <__malloc_lock>
  409126:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40912a:	2f16      	cmp	r7, #22
  40912c:	f02e 0403 	bic.w	r4, lr, #3
  409130:	f1a5 0908 	sub.w	r9, r5, #8
  409134:	d83c      	bhi.n	4091b0 <_realloc_r+0xa4>
  409136:	2210      	movs	r2, #16
  409138:	4617      	mov	r7, r2
  40913a:	42be      	cmp	r6, r7
  40913c:	d83d      	bhi.n	4091ba <_realloc_r+0xae>
  40913e:	4294      	cmp	r4, r2
  409140:	da43      	bge.n	4091ca <_realloc_r+0xbe>
  409142:	4bc4      	ldr	r3, [pc, #784]	; (409454 <_realloc_r+0x348>)
  409144:	6899      	ldr	r1, [r3, #8]
  409146:	eb09 0004 	add.w	r0, r9, r4
  40914a:	4288      	cmp	r0, r1
  40914c:	f000 80b4 	beq.w	4092b8 <_realloc_r+0x1ac>
  409150:	6843      	ldr	r3, [r0, #4]
  409152:	f023 0101 	bic.w	r1, r3, #1
  409156:	4401      	add	r1, r0
  409158:	6849      	ldr	r1, [r1, #4]
  40915a:	07c9      	lsls	r1, r1, #31
  40915c:	d54c      	bpl.n	4091f8 <_realloc_r+0xec>
  40915e:	f01e 0f01 	tst.w	lr, #1
  409162:	f000 809b 	beq.w	40929c <_realloc_r+0x190>
  409166:	4631      	mov	r1, r6
  409168:	4640      	mov	r0, r8
  40916a:	f7fa ffe5 	bl	404138 <_malloc_r>
  40916e:	4606      	mov	r6, r0
  409170:	2800      	cmp	r0, #0
  409172:	d03a      	beq.n	4091ea <_realloc_r+0xde>
  409174:	f855 3c04 	ldr.w	r3, [r5, #-4]
  409178:	f023 0301 	bic.w	r3, r3, #1
  40917c:	444b      	add	r3, r9
  40917e:	f1a0 0208 	sub.w	r2, r0, #8
  409182:	429a      	cmp	r2, r3
  409184:	f000 8121 	beq.w	4093ca <_realloc_r+0x2be>
  409188:	1f22      	subs	r2, r4, #4
  40918a:	2a24      	cmp	r2, #36	; 0x24
  40918c:	f200 8107 	bhi.w	40939e <_realloc_r+0x292>
  409190:	2a13      	cmp	r2, #19
  409192:	f200 80db 	bhi.w	40934c <_realloc_r+0x240>
  409196:	4603      	mov	r3, r0
  409198:	462a      	mov	r2, r5
  40919a:	6811      	ldr	r1, [r2, #0]
  40919c:	6019      	str	r1, [r3, #0]
  40919e:	6851      	ldr	r1, [r2, #4]
  4091a0:	6059      	str	r1, [r3, #4]
  4091a2:	6892      	ldr	r2, [r2, #8]
  4091a4:	609a      	str	r2, [r3, #8]
  4091a6:	4629      	mov	r1, r5
  4091a8:	4640      	mov	r0, r8
  4091aa:	f7ff f8c1 	bl	408330 <_free_r>
  4091ae:	e01c      	b.n	4091ea <_realloc_r+0xde>
  4091b0:	f027 0707 	bic.w	r7, r7, #7
  4091b4:	2f00      	cmp	r7, #0
  4091b6:	463a      	mov	r2, r7
  4091b8:	dabf      	bge.n	40913a <_realloc_r+0x2e>
  4091ba:	2600      	movs	r6, #0
  4091bc:	230c      	movs	r3, #12
  4091be:	4630      	mov	r0, r6
  4091c0:	f8c8 3000 	str.w	r3, [r8]
  4091c4:	b003      	add	sp, #12
  4091c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4091ca:	462e      	mov	r6, r5
  4091cc:	1be3      	subs	r3, r4, r7
  4091ce:	2b0f      	cmp	r3, #15
  4091d0:	d81e      	bhi.n	409210 <_realloc_r+0x104>
  4091d2:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4091d6:	f003 0301 	and.w	r3, r3, #1
  4091da:	4323      	orrs	r3, r4
  4091dc:	444c      	add	r4, r9
  4091de:	f8c9 3004 	str.w	r3, [r9, #4]
  4091e2:	6863      	ldr	r3, [r4, #4]
  4091e4:	f043 0301 	orr.w	r3, r3, #1
  4091e8:	6063      	str	r3, [r4, #4]
  4091ea:	4640      	mov	r0, r8
  4091ec:	f7fb fb42 	bl	404874 <__malloc_unlock>
  4091f0:	4630      	mov	r0, r6
  4091f2:	b003      	add	sp, #12
  4091f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4091f8:	f023 0303 	bic.w	r3, r3, #3
  4091fc:	18e1      	adds	r1, r4, r3
  4091fe:	4291      	cmp	r1, r2
  409200:	db1f      	blt.n	409242 <_realloc_r+0x136>
  409202:	68c3      	ldr	r3, [r0, #12]
  409204:	6882      	ldr	r2, [r0, #8]
  409206:	462e      	mov	r6, r5
  409208:	60d3      	str	r3, [r2, #12]
  40920a:	460c      	mov	r4, r1
  40920c:	609a      	str	r2, [r3, #8]
  40920e:	e7dd      	b.n	4091cc <_realloc_r+0xc0>
  409210:	f8d9 2004 	ldr.w	r2, [r9, #4]
  409214:	eb09 0107 	add.w	r1, r9, r7
  409218:	f002 0201 	and.w	r2, r2, #1
  40921c:	444c      	add	r4, r9
  40921e:	f043 0301 	orr.w	r3, r3, #1
  409222:	4317      	orrs	r7, r2
  409224:	f8c9 7004 	str.w	r7, [r9, #4]
  409228:	604b      	str	r3, [r1, #4]
  40922a:	6863      	ldr	r3, [r4, #4]
  40922c:	f043 0301 	orr.w	r3, r3, #1
  409230:	3108      	adds	r1, #8
  409232:	6063      	str	r3, [r4, #4]
  409234:	4640      	mov	r0, r8
  409236:	f7ff f87b 	bl	408330 <_free_r>
  40923a:	e7d6      	b.n	4091ea <_realloc_r+0xde>
  40923c:	4611      	mov	r1, r2
  40923e:	f7fa bf7b 	b.w	404138 <_malloc_r>
  409242:	f01e 0f01 	tst.w	lr, #1
  409246:	d18e      	bne.n	409166 <_realloc_r+0x5a>
  409248:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40924c:	eba9 0a01 	sub.w	sl, r9, r1
  409250:	f8da 1004 	ldr.w	r1, [sl, #4]
  409254:	f021 0103 	bic.w	r1, r1, #3
  409258:	440b      	add	r3, r1
  40925a:	4423      	add	r3, r4
  40925c:	4293      	cmp	r3, r2
  40925e:	db25      	blt.n	4092ac <_realloc_r+0x1a0>
  409260:	68c2      	ldr	r2, [r0, #12]
  409262:	6881      	ldr	r1, [r0, #8]
  409264:	4656      	mov	r6, sl
  409266:	60ca      	str	r2, [r1, #12]
  409268:	6091      	str	r1, [r2, #8]
  40926a:	f8da 100c 	ldr.w	r1, [sl, #12]
  40926e:	f856 0f08 	ldr.w	r0, [r6, #8]!
  409272:	1f22      	subs	r2, r4, #4
  409274:	2a24      	cmp	r2, #36	; 0x24
  409276:	60c1      	str	r1, [r0, #12]
  409278:	6088      	str	r0, [r1, #8]
  40927a:	f200 8094 	bhi.w	4093a6 <_realloc_r+0x29a>
  40927e:	2a13      	cmp	r2, #19
  409280:	d96f      	bls.n	409362 <_realloc_r+0x256>
  409282:	6829      	ldr	r1, [r5, #0]
  409284:	f8ca 1008 	str.w	r1, [sl, #8]
  409288:	6869      	ldr	r1, [r5, #4]
  40928a:	f8ca 100c 	str.w	r1, [sl, #12]
  40928e:	2a1b      	cmp	r2, #27
  409290:	f200 80a2 	bhi.w	4093d8 <_realloc_r+0x2cc>
  409294:	3508      	adds	r5, #8
  409296:	f10a 0210 	add.w	r2, sl, #16
  40929a:	e063      	b.n	409364 <_realloc_r+0x258>
  40929c:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4092a0:	eba9 0a03 	sub.w	sl, r9, r3
  4092a4:	f8da 1004 	ldr.w	r1, [sl, #4]
  4092a8:	f021 0103 	bic.w	r1, r1, #3
  4092ac:	1863      	adds	r3, r4, r1
  4092ae:	4293      	cmp	r3, r2
  4092b0:	f6ff af59 	blt.w	409166 <_realloc_r+0x5a>
  4092b4:	4656      	mov	r6, sl
  4092b6:	e7d8      	b.n	40926a <_realloc_r+0x15e>
  4092b8:	6841      	ldr	r1, [r0, #4]
  4092ba:	f021 0b03 	bic.w	fp, r1, #3
  4092be:	44a3      	add	fp, r4
  4092c0:	f107 0010 	add.w	r0, r7, #16
  4092c4:	4583      	cmp	fp, r0
  4092c6:	da56      	bge.n	409376 <_realloc_r+0x26a>
  4092c8:	f01e 0f01 	tst.w	lr, #1
  4092cc:	f47f af4b 	bne.w	409166 <_realloc_r+0x5a>
  4092d0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4092d4:	eba9 0a01 	sub.w	sl, r9, r1
  4092d8:	f8da 1004 	ldr.w	r1, [sl, #4]
  4092dc:	f021 0103 	bic.w	r1, r1, #3
  4092e0:	448b      	add	fp, r1
  4092e2:	4558      	cmp	r0, fp
  4092e4:	dce2      	bgt.n	4092ac <_realloc_r+0x1a0>
  4092e6:	4656      	mov	r6, sl
  4092e8:	f8da 100c 	ldr.w	r1, [sl, #12]
  4092ec:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4092f0:	1f22      	subs	r2, r4, #4
  4092f2:	2a24      	cmp	r2, #36	; 0x24
  4092f4:	60c1      	str	r1, [r0, #12]
  4092f6:	6088      	str	r0, [r1, #8]
  4092f8:	f200 808f 	bhi.w	40941a <_realloc_r+0x30e>
  4092fc:	2a13      	cmp	r2, #19
  4092fe:	f240 808a 	bls.w	409416 <_realloc_r+0x30a>
  409302:	6829      	ldr	r1, [r5, #0]
  409304:	f8ca 1008 	str.w	r1, [sl, #8]
  409308:	6869      	ldr	r1, [r5, #4]
  40930a:	f8ca 100c 	str.w	r1, [sl, #12]
  40930e:	2a1b      	cmp	r2, #27
  409310:	f200 808a 	bhi.w	409428 <_realloc_r+0x31c>
  409314:	3508      	adds	r5, #8
  409316:	f10a 0210 	add.w	r2, sl, #16
  40931a:	6829      	ldr	r1, [r5, #0]
  40931c:	6011      	str	r1, [r2, #0]
  40931e:	6869      	ldr	r1, [r5, #4]
  409320:	6051      	str	r1, [r2, #4]
  409322:	68a9      	ldr	r1, [r5, #8]
  409324:	6091      	str	r1, [r2, #8]
  409326:	eb0a 0107 	add.w	r1, sl, r7
  40932a:	ebab 0207 	sub.w	r2, fp, r7
  40932e:	f042 0201 	orr.w	r2, r2, #1
  409332:	6099      	str	r1, [r3, #8]
  409334:	604a      	str	r2, [r1, #4]
  409336:	f8da 3004 	ldr.w	r3, [sl, #4]
  40933a:	f003 0301 	and.w	r3, r3, #1
  40933e:	431f      	orrs	r7, r3
  409340:	4640      	mov	r0, r8
  409342:	f8ca 7004 	str.w	r7, [sl, #4]
  409346:	f7fb fa95 	bl	404874 <__malloc_unlock>
  40934a:	e751      	b.n	4091f0 <_realloc_r+0xe4>
  40934c:	682b      	ldr	r3, [r5, #0]
  40934e:	6003      	str	r3, [r0, #0]
  409350:	686b      	ldr	r3, [r5, #4]
  409352:	6043      	str	r3, [r0, #4]
  409354:	2a1b      	cmp	r2, #27
  409356:	d82d      	bhi.n	4093b4 <_realloc_r+0x2a8>
  409358:	f100 0308 	add.w	r3, r0, #8
  40935c:	f105 0208 	add.w	r2, r5, #8
  409360:	e71b      	b.n	40919a <_realloc_r+0x8e>
  409362:	4632      	mov	r2, r6
  409364:	6829      	ldr	r1, [r5, #0]
  409366:	6011      	str	r1, [r2, #0]
  409368:	6869      	ldr	r1, [r5, #4]
  40936a:	6051      	str	r1, [r2, #4]
  40936c:	68a9      	ldr	r1, [r5, #8]
  40936e:	6091      	str	r1, [r2, #8]
  409370:	461c      	mov	r4, r3
  409372:	46d1      	mov	r9, sl
  409374:	e72a      	b.n	4091cc <_realloc_r+0xc0>
  409376:	eb09 0107 	add.w	r1, r9, r7
  40937a:	ebab 0b07 	sub.w	fp, fp, r7
  40937e:	f04b 0201 	orr.w	r2, fp, #1
  409382:	6099      	str	r1, [r3, #8]
  409384:	604a      	str	r2, [r1, #4]
  409386:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40938a:	f003 0301 	and.w	r3, r3, #1
  40938e:	431f      	orrs	r7, r3
  409390:	4640      	mov	r0, r8
  409392:	f845 7c04 	str.w	r7, [r5, #-4]
  409396:	f7fb fa6d 	bl	404874 <__malloc_unlock>
  40939a:	462e      	mov	r6, r5
  40939c:	e728      	b.n	4091f0 <_realloc_r+0xe4>
  40939e:	4629      	mov	r1, r5
  4093a0:	f7ff fb56 	bl	408a50 <memmove>
  4093a4:	e6ff      	b.n	4091a6 <_realloc_r+0x9a>
  4093a6:	4629      	mov	r1, r5
  4093a8:	4630      	mov	r0, r6
  4093aa:	461c      	mov	r4, r3
  4093ac:	46d1      	mov	r9, sl
  4093ae:	f7ff fb4f 	bl	408a50 <memmove>
  4093b2:	e70b      	b.n	4091cc <_realloc_r+0xc0>
  4093b4:	68ab      	ldr	r3, [r5, #8]
  4093b6:	6083      	str	r3, [r0, #8]
  4093b8:	68eb      	ldr	r3, [r5, #12]
  4093ba:	60c3      	str	r3, [r0, #12]
  4093bc:	2a24      	cmp	r2, #36	; 0x24
  4093be:	d017      	beq.n	4093f0 <_realloc_r+0x2e4>
  4093c0:	f100 0310 	add.w	r3, r0, #16
  4093c4:	f105 0210 	add.w	r2, r5, #16
  4093c8:	e6e7      	b.n	40919a <_realloc_r+0x8e>
  4093ca:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4093ce:	f023 0303 	bic.w	r3, r3, #3
  4093d2:	441c      	add	r4, r3
  4093d4:	462e      	mov	r6, r5
  4093d6:	e6f9      	b.n	4091cc <_realloc_r+0xc0>
  4093d8:	68a9      	ldr	r1, [r5, #8]
  4093da:	f8ca 1010 	str.w	r1, [sl, #16]
  4093de:	68e9      	ldr	r1, [r5, #12]
  4093e0:	f8ca 1014 	str.w	r1, [sl, #20]
  4093e4:	2a24      	cmp	r2, #36	; 0x24
  4093e6:	d00c      	beq.n	409402 <_realloc_r+0x2f6>
  4093e8:	3510      	adds	r5, #16
  4093ea:	f10a 0218 	add.w	r2, sl, #24
  4093ee:	e7b9      	b.n	409364 <_realloc_r+0x258>
  4093f0:	692b      	ldr	r3, [r5, #16]
  4093f2:	6103      	str	r3, [r0, #16]
  4093f4:	696b      	ldr	r3, [r5, #20]
  4093f6:	6143      	str	r3, [r0, #20]
  4093f8:	f105 0218 	add.w	r2, r5, #24
  4093fc:	f100 0318 	add.w	r3, r0, #24
  409400:	e6cb      	b.n	40919a <_realloc_r+0x8e>
  409402:	692a      	ldr	r2, [r5, #16]
  409404:	f8ca 2018 	str.w	r2, [sl, #24]
  409408:	696a      	ldr	r2, [r5, #20]
  40940a:	f8ca 201c 	str.w	r2, [sl, #28]
  40940e:	3518      	adds	r5, #24
  409410:	f10a 0220 	add.w	r2, sl, #32
  409414:	e7a6      	b.n	409364 <_realloc_r+0x258>
  409416:	4632      	mov	r2, r6
  409418:	e77f      	b.n	40931a <_realloc_r+0x20e>
  40941a:	4629      	mov	r1, r5
  40941c:	4630      	mov	r0, r6
  40941e:	9301      	str	r3, [sp, #4]
  409420:	f7ff fb16 	bl	408a50 <memmove>
  409424:	9b01      	ldr	r3, [sp, #4]
  409426:	e77e      	b.n	409326 <_realloc_r+0x21a>
  409428:	68a9      	ldr	r1, [r5, #8]
  40942a:	f8ca 1010 	str.w	r1, [sl, #16]
  40942e:	68e9      	ldr	r1, [r5, #12]
  409430:	f8ca 1014 	str.w	r1, [sl, #20]
  409434:	2a24      	cmp	r2, #36	; 0x24
  409436:	d003      	beq.n	409440 <_realloc_r+0x334>
  409438:	3510      	adds	r5, #16
  40943a:	f10a 0218 	add.w	r2, sl, #24
  40943e:	e76c      	b.n	40931a <_realloc_r+0x20e>
  409440:	692a      	ldr	r2, [r5, #16]
  409442:	f8ca 2018 	str.w	r2, [sl, #24]
  409446:	696a      	ldr	r2, [r5, #20]
  409448:	f8ca 201c 	str.w	r2, [sl, #28]
  40944c:	3518      	adds	r5, #24
  40944e:	f10a 0220 	add.w	r2, sl, #32
  409452:	e762      	b.n	40931a <_realloc_r+0x20e>
  409454:	20400448 	.word	0x20400448

00409458 <__sread>:
  409458:	b510      	push	{r4, lr}
  40945a:	460c      	mov	r4, r1
  40945c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409460:	f000 faa4 	bl	4099ac <_read_r>
  409464:	2800      	cmp	r0, #0
  409466:	db03      	blt.n	409470 <__sread+0x18>
  409468:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40946a:	4403      	add	r3, r0
  40946c:	6523      	str	r3, [r4, #80]	; 0x50
  40946e:	bd10      	pop	{r4, pc}
  409470:	89a3      	ldrh	r3, [r4, #12]
  409472:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  409476:	81a3      	strh	r3, [r4, #12]
  409478:	bd10      	pop	{r4, pc}
  40947a:	bf00      	nop

0040947c <__swrite>:
  40947c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409480:	4616      	mov	r6, r2
  409482:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  409486:	461f      	mov	r7, r3
  409488:	05d3      	lsls	r3, r2, #23
  40948a:	460c      	mov	r4, r1
  40948c:	4605      	mov	r5, r0
  40948e:	d507      	bpl.n	4094a0 <__swrite+0x24>
  409490:	2200      	movs	r2, #0
  409492:	2302      	movs	r3, #2
  409494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409498:	f000 fa72 	bl	409980 <_lseek_r>
  40949c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4094a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4094a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4094a8:	81a2      	strh	r2, [r4, #12]
  4094aa:	463b      	mov	r3, r7
  4094ac:	4632      	mov	r2, r6
  4094ae:	4628      	mov	r0, r5
  4094b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4094b4:	f000 b922 	b.w	4096fc <_write_r>

004094b8 <__sseek>:
  4094b8:	b510      	push	{r4, lr}
  4094ba:	460c      	mov	r4, r1
  4094bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4094c0:	f000 fa5e 	bl	409980 <_lseek_r>
  4094c4:	89a3      	ldrh	r3, [r4, #12]
  4094c6:	1c42      	adds	r2, r0, #1
  4094c8:	bf0e      	itee	eq
  4094ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4094ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4094d2:	6520      	strne	r0, [r4, #80]	; 0x50
  4094d4:	81a3      	strh	r3, [r4, #12]
  4094d6:	bd10      	pop	{r4, pc}

004094d8 <__sclose>:
  4094d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4094dc:	f000 b9b6 	b.w	40984c <_close_r>

004094e0 <__ssprint_r>:
  4094e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4094e4:	6893      	ldr	r3, [r2, #8]
  4094e6:	b083      	sub	sp, #12
  4094e8:	4690      	mov	r8, r2
  4094ea:	2b00      	cmp	r3, #0
  4094ec:	d070      	beq.n	4095d0 <__ssprint_r+0xf0>
  4094ee:	4682      	mov	sl, r0
  4094f0:	460c      	mov	r4, r1
  4094f2:	6817      	ldr	r7, [r2, #0]
  4094f4:	688d      	ldr	r5, [r1, #8]
  4094f6:	6808      	ldr	r0, [r1, #0]
  4094f8:	e042      	b.n	409580 <__ssprint_r+0xa0>
  4094fa:	89a3      	ldrh	r3, [r4, #12]
  4094fc:	f413 6f90 	tst.w	r3, #1152	; 0x480
  409500:	d02e      	beq.n	409560 <__ssprint_r+0x80>
  409502:	6965      	ldr	r5, [r4, #20]
  409504:	6921      	ldr	r1, [r4, #16]
  409506:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  40950a:	eba0 0b01 	sub.w	fp, r0, r1
  40950e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  409512:	f10b 0001 	add.w	r0, fp, #1
  409516:	106d      	asrs	r5, r5, #1
  409518:	4430      	add	r0, r6
  40951a:	42a8      	cmp	r0, r5
  40951c:	462a      	mov	r2, r5
  40951e:	bf84      	itt	hi
  409520:	4605      	movhi	r5, r0
  409522:	462a      	movhi	r2, r5
  409524:	055b      	lsls	r3, r3, #21
  409526:	d538      	bpl.n	40959a <__ssprint_r+0xba>
  409528:	4611      	mov	r1, r2
  40952a:	4650      	mov	r0, sl
  40952c:	f7fa fe04 	bl	404138 <_malloc_r>
  409530:	2800      	cmp	r0, #0
  409532:	d03c      	beq.n	4095ae <__ssprint_r+0xce>
  409534:	465a      	mov	r2, fp
  409536:	6921      	ldr	r1, [r4, #16]
  409538:	9001      	str	r0, [sp, #4]
  40953a:	f7fb f8ad 	bl	404698 <memcpy>
  40953e:	89a2      	ldrh	r2, [r4, #12]
  409540:	9b01      	ldr	r3, [sp, #4]
  409542:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  409546:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40954a:	81a2      	strh	r2, [r4, #12]
  40954c:	eba5 020b 	sub.w	r2, r5, fp
  409550:	eb03 000b 	add.w	r0, r3, fp
  409554:	6165      	str	r5, [r4, #20]
  409556:	6123      	str	r3, [r4, #16]
  409558:	6020      	str	r0, [r4, #0]
  40955a:	60a2      	str	r2, [r4, #8]
  40955c:	4635      	mov	r5, r6
  40955e:	46b3      	mov	fp, r6
  409560:	465a      	mov	r2, fp
  409562:	4649      	mov	r1, r9
  409564:	f7ff fa74 	bl	408a50 <memmove>
  409568:	f8d8 3008 	ldr.w	r3, [r8, #8]
  40956c:	68a2      	ldr	r2, [r4, #8]
  40956e:	6820      	ldr	r0, [r4, #0]
  409570:	1b55      	subs	r5, r2, r5
  409572:	4458      	add	r0, fp
  409574:	1b9e      	subs	r6, r3, r6
  409576:	60a5      	str	r5, [r4, #8]
  409578:	6020      	str	r0, [r4, #0]
  40957a:	f8c8 6008 	str.w	r6, [r8, #8]
  40957e:	b33e      	cbz	r6, 4095d0 <__ssprint_r+0xf0>
  409580:	687e      	ldr	r6, [r7, #4]
  409582:	463b      	mov	r3, r7
  409584:	3708      	adds	r7, #8
  409586:	2e00      	cmp	r6, #0
  409588:	d0fa      	beq.n	409580 <__ssprint_r+0xa0>
  40958a:	42ae      	cmp	r6, r5
  40958c:	f8d3 9000 	ldr.w	r9, [r3]
  409590:	46ab      	mov	fp, r5
  409592:	d2b2      	bcs.n	4094fa <__ssprint_r+0x1a>
  409594:	4635      	mov	r5, r6
  409596:	46b3      	mov	fp, r6
  409598:	e7e2      	b.n	409560 <__ssprint_r+0x80>
  40959a:	4650      	mov	r0, sl
  40959c:	f7ff fdb6 	bl	40910c <_realloc_r>
  4095a0:	4603      	mov	r3, r0
  4095a2:	2800      	cmp	r0, #0
  4095a4:	d1d2      	bne.n	40954c <__ssprint_r+0x6c>
  4095a6:	6921      	ldr	r1, [r4, #16]
  4095a8:	4650      	mov	r0, sl
  4095aa:	f7fe fec1 	bl	408330 <_free_r>
  4095ae:	230c      	movs	r3, #12
  4095b0:	f8ca 3000 	str.w	r3, [sl]
  4095b4:	89a3      	ldrh	r3, [r4, #12]
  4095b6:	2200      	movs	r2, #0
  4095b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4095bc:	f04f 30ff 	mov.w	r0, #4294967295
  4095c0:	81a3      	strh	r3, [r4, #12]
  4095c2:	f8c8 2008 	str.w	r2, [r8, #8]
  4095c6:	f8c8 2004 	str.w	r2, [r8, #4]
  4095ca:	b003      	add	sp, #12
  4095cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4095d0:	2000      	movs	r0, #0
  4095d2:	f8c8 0004 	str.w	r0, [r8, #4]
  4095d6:	b003      	add	sp, #12
  4095d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004095dc <__swbuf_r>:
  4095dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4095de:	460d      	mov	r5, r1
  4095e0:	4614      	mov	r4, r2
  4095e2:	4606      	mov	r6, r0
  4095e4:	b110      	cbz	r0, 4095ec <__swbuf_r+0x10>
  4095e6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4095e8:	2b00      	cmp	r3, #0
  4095ea:	d04b      	beq.n	409684 <__swbuf_r+0xa8>
  4095ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4095f0:	69a3      	ldr	r3, [r4, #24]
  4095f2:	60a3      	str	r3, [r4, #8]
  4095f4:	b291      	uxth	r1, r2
  4095f6:	0708      	lsls	r0, r1, #28
  4095f8:	d539      	bpl.n	40966e <__swbuf_r+0x92>
  4095fa:	6923      	ldr	r3, [r4, #16]
  4095fc:	2b00      	cmp	r3, #0
  4095fe:	d036      	beq.n	40966e <__swbuf_r+0x92>
  409600:	b2ed      	uxtb	r5, r5
  409602:	0489      	lsls	r1, r1, #18
  409604:	462f      	mov	r7, r5
  409606:	d515      	bpl.n	409634 <__swbuf_r+0x58>
  409608:	6822      	ldr	r2, [r4, #0]
  40960a:	6961      	ldr	r1, [r4, #20]
  40960c:	1ad3      	subs	r3, r2, r3
  40960e:	428b      	cmp	r3, r1
  409610:	da1c      	bge.n	40964c <__swbuf_r+0x70>
  409612:	3301      	adds	r3, #1
  409614:	68a1      	ldr	r1, [r4, #8]
  409616:	1c50      	adds	r0, r2, #1
  409618:	3901      	subs	r1, #1
  40961a:	60a1      	str	r1, [r4, #8]
  40961c:	6020      	str	r0, [r4, #0]
  40961e:	7015      	strb	r5, [r2, #0]
  409620:	6962      	ldr	r2, [r4, #20]
  409622:	429a      	cmp	r2, r3
  409624:	d01a      	beq.n	40965c <__swbuf_r+0x80>
  409626:	89a3      	ldrh	r3, [r4, #12]
  409628:	07db      	lsls	r3, r3, #31
  40962a:	d501      	bpl.n	409630 <__swbuf_r+0x54>
  40962c:	2d0a      	cmp	r5, #10
  40962e:	d015      	beq.n	40965c <__swbuf_r+0x80>
  409630:	4638      	mov	r0, r7
  409632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409634:	6e61      	ldr	r1, [r4, #100]	; 0x64
  409636:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40963a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40963e:	81a2      	strh	r2, [r4, #12]
  409640:	6822      	ldr	r2, [r4, #0]
  409642:	6661      	str	r1, [r4, #100]	; 0x64
  409644:	6961      	ldr	r1, [r4, #20]
  409646:	1ad3      	subs	r3, r2, r3
  409648:	428b      	cmp	r3, r1
  40964a:	dbe2      	blt.n	409612 <__swbuf_r+0x36>
  40964c:	4621      	mov	r1, r4
  40964e:	4630      	mov	r0, r6
  409650:	f7fe fcf0 	bl	408034 <_fflush_r>
  409654:	b940      	cbnz	r0, 409668 <__swbuf_r+0x8c>
  409656:	6822      	ldr	r2, [r4, #0]
  409658:	2301      	movs	r3, #1
  40965a:	e7db      	b.n	409614 <__swbuf_r+0x38>
  40965c:	4621      	mov	r1, r4
  40965e:	4630      	mov	r0, r6
  409660:	f7fe fce8 	bl	408034 <_fflush_r>
  409664:	2800      	cmp	r0, #0
  409666:	d0e3      	beq.n	409630 <__swbuf_r+0x54>
  409668:	f04f 37ff 	mov.w	r7, #4294967295
  40966c:	e7e0      	b.n	409630 <__swbuf_r+0x54>
  40966e:	4621      	mov	r1, r4
  409670:	4630      	mov	r0, r6
  409672:	f7fd fc0b 	bl	406e8c <__swsetup_r>
  409676:	2800      	cmp	r0, #0
  409678:	d1f6      	bne.n	409668 <__swbuf_r+0x8c>
  40967a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40967e:	6923      	ldr	r3, [r4, #16]
  409680:	b291      	uxth	r1, r2
  409682:	e7bd      	b.n	409600 <__swbuf_r+0x24>
  409684:	f7fe fd2e 	bl	4080e4 <__sinit>
  409688:	e7b0      	b.n	4095ec <__swbuf_r+0x10>
  40968a:	bf00      	nop

0040968c <_wcrtomb_r>:
  40968c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40968e:	4606      	mov	r6, r0
  409690:	b085      	sub	sp, #20
  409692:	461f      	mov	r7, r3
  409694:	b189      	cbz	r1, 4096ba <_wcrtomb_r+0x2e>
  409696:	4c10      	ldr	r4, [pc, #64]	; (4096d8 <_wcrtomb_r+0x4c>)
  409698:	4d10      	ldr	r5, [pc, #64]	; (4096dc <_wcrtomb_r+0x50>)
  40969a:	6824      	ldr	r4, [r4, #0]
  40969c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40969e:	2c00      	cmp	r4, #0
  4096a0:	bf08      	it	eq
  4096a2:	462c      	moveq	r4, r5
  4096a4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  4096a8:	47a0      	blx	r4
  4096aa:	1c43      	adds	r3, r0, #1
  4096ac:	d103      	bne.n	4096b6 <_wcrtomb_r+0x2a>
  4096ae:	2200      	movs	r2, #0
  4096b0:	238a      	movs	r3, #138	; 0x8a
  4096b2:	603a      	str	r2, [r7, #0]
  4096b4:	6033      	str	r3, [r6, #0]
  4096b6:	b005      	add	sp, #20
  4096b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4096ba:	460c      	mov	r4, r1
  4096bc:	4906      	ldr	r1, [pc, #24]	; (4096d8 <_wcrtomb_r+0x4c>)
  4096be:	4a07      	ldr	r2, [pc, #28]	; (4096dc <_wcrtomb_r+0x50>)
  4096c0:	6809      	ldr	r1, [r1, #0]
  4096c2:	6b49      	ldr	r1, [r1, #52]	; 0x34
  4096c4:	2900      	cmp	r1, #0
  4096c6:	bf08      	it	eq
  4096c8:	4611      	moveq	r1, r2
  4096ca:	4622      	mov	r2, r4
  4096cc:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  4096d0:	a901      	add	r1, sp, #4
  4096d2:	47a0      	blx	r4
  4096d4:	e7e9      	b.n	4096aa <_wcrtomb_r+0x1e>
  4096d6:	bf00      	nop
  4096d8:	2040001c 	.word	0x2040001c
  4096dc:	2040085c 	.word	0x2040085c

004096e0 <__ascii_wctomb>:
  4096e0:	b121      	cbz	r1, 4096ec <__ascii_wctomb+0xc>
  4096e2:	2aff      	cmp	r2, #255	; 0xff
  4096e4:	d804      	bhi.n	4096f0 <__ascii_wctomb+0x10>
  4096e6:	700a      	strb	r2, [r1, #0]
  4096e8:	2001      	movs	r0, #1
  4096ea:	4770      	bx	lr
  4096ec:	4608      	mov	r0, r1
  4096ee:	4770      	bx	lr
  4096f0:	238a      	movs	r3, #138	; 0x8a
  4096f2:	6003      	str	r3, [r0, #0]
  4096f4:	f04f 30ff 	mov.w	r0, #4294967295
  4096f8:	4770      	bx	lr
  4096fa:	bf00      	nop

004096fc <_write_r>:
  4096fc:	b570      	push	{r4, r5, r6, lr}
  4096fe:	460d      	mov	r5, r1
  409700:	4c08      	ldr	r4, [pc, #32]	; (409724 <_write_r+0x28>)
  409702:	4611      	mov	r1, r2
  409704:	4606      	mov	r6, r0
  409706:	461a      	mov	r2, r3
  409708:	4628      	mov	r0, r5
  40970a:	2300      	movs	r3, #0
  40970c:	6023      	str	r3, [r4, #0]
  40970e:	f7f8 ff7f 	bl	402610 <_write>
  409712:	1c43      	adds	r3, r0, #1
  409714:	d000      	beq.n	409718 <_write_r+0x1c>
  409716:	bd70      	pop	{r4, r5, r6, pc}
  409718:	6823      	ldr	r3, [r4, #0]
  40971a:	2b00      	cmp	r3, #0
  40971c:	d0fb      	beq.n	409716 <_write_r+0x1a>
  40971e:	6033      	str	r3, [r6, #0]
  409720:	bd70      	pop	{r4, r5, r6, pc}
  409722:	bf00      	nop
  409724:	2040c898 	.word	0x2040c898

00409728 <__register_exitproc>:
  409728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40972c:	4d2c      	ldr	r5, [pc, #176]	; (4097e0 <__register_exitproc+0xb8>)
  40972e:	4606      	mov	r6, r0
  409730:	6828      	ldr	r0, [r5, #0]
  409732:	4698      	mov	r8, r3
  409734:	460f      	mov	r7, r1
  409736:	4691      	mov	r9, r2
  409738:	f7ff f8a2 	bl	408880 <__retarget_lock_acquire_recursive>
  40973c:	4b29      	ldr	r3, [pc, #164]	; (4097e4 <__register_exitproc+0xbc>)
  40973e:	681c      	ldr	r4, [r3, #0]
  409740:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  409744:	2b00      	cmp	r3, #0
  409746:	d03e      	beq.n	4097c6 <__register_exitproc+0x9e>
  409748:	685a      	ldr	r2, [r3, #4]
  40974a:	2a1f      	cmp	r2, #31
  40974c:	dc1c      	bgt.n	409788 <__register_exitproc+0x60>
  40974e:	f102 0e01 	add.w	lr, r2, #1
  409752:	b176      	cbz	r6, 409772 <__register_exitproc+0x4a>
  409754:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  409758:	2401      	movs	r4, #1
  40975a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40975e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  409762:	4094      	lsls	r4, r2
  409764:	4320      	orrs	r0, r4
  409766:	2e02      	cmp	r6, #2
  409768:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40976c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  409770:	d023      	beq.n	4097ba <__register_exitproc+0x92>
  409772:	3202      	adds	r2, #2
  409774:	f8c3 e004 	str.w	lr, [r3, #4]
  409778:	6828      	ldr	r0, [r5, #0]
  40977a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40977e:	f7ff f881 	bl	408884 <__retarget_lock_release_recursive>
  409782:	2000      	movs	r0, #0
  409784:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409788:	4b17      	ldr	r3, [pc, #92]	; (4097e8 <__register_exitproc+0xc0>)
  40978a:	b30b      	cbz	r3, 4097d0 <__register_exitproc+0xa8>
  40978c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  409790:	f7fa fcca 	bl	404128 <malloc>
  409794:	4603      	mov	r3, r0
  409796:	b1d8      	cbz	r0, 4097d0 <__register_exitproc+0xa8>
  409798:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40979c:	6002      	str	r2, [r0, #0]
  40979e:	2100      	movs	r1, #0
  4097a0:	6041      	str	r1, [r0, #4]
  4097a2:	460a      	mov	r2, r1
  4097a4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4097a8:	f04f 0e01 	mov.w	lr, #1
  4097ac:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4097b0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4097b4:	2e00      	cmp	r6, #0
  4097b6:	d0dc      	beq.n	409772 <__register_exitproc+0x4a>
  4097b8:	e7cc      	b.n	409754 <__register_exitproc+0x2c>
  4097ba:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4097be:	430c      	orrs	r4, r1
  4097c0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4097c4:	e7d5      	b.n	409772 <__register_exitproc+0x4a>
  4097c6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4097ca:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4097ce:	e7bb      	b.n	409748 <__register_exitproc+0x20>
  4097d0:	6828      	ldr	r0, [r5, #0]
  4097d2:	f7ff f857 	bl	408884 <__retarget_lock_release_recursive>
  4097d6:	f04f 30ff 	mov.w	r0, #4294967295
  4097da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4097de:	bf00      	nop
  4097e0:	20400858 	.word	0x20400858
  4097e4:	0040a71c 	.word	0x0040a71c
  4097e8:	00404129 	.word	0x00404129

004097ec <_calloc_r>:
  4097ec:	b510      	push	{r4, lr}
  4097ee:	fb02 f101 	mul.w	r1, r2, r1
  4097f2:	f7fa fca1 	bl	404138 <_malloc_r>
  4097f6:	4604      	mov	r4, r0
  4097f8:	b1d8      	cbz	r0, 409832 <_calloc_r+0x46>
  4097fa:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4097fe:	f022 0203 	bic.w	r2, r2, #3
  409802:	3a04      	subs	r2, #4
  409804:	2a24      	cmp	r2, #36	; 0x24
  409806:	d818      	bhi.n	40983a <_calloc_r+0x4e>
  409808:	2a13      	cmp	r2, #19
  40980a:	d914      	bls.n	409836 <_calloc_r+0x4a>
  40980c:	2300      	movs	r3, #0
  40980e:	2a1b      	cmp	r2, #27
  409810:	6003      	str	r3, [r0, #0]
  409812:	6043      	str	r3, [r0, #4]
  409814:	d916      	bls.n	409844 <_calloc_r+0x58>
  409816:	2a24      	cmp	r2, #36	; 0x24
  409818:	6083      	str	r3, [r0, #8]
  40981a:	60c3      	str	r3, [r0, #12]
  40981c:	bf11      	iteee	ne
  40981e:	f100 0210 	addne.w	r2, r0, #16
  409822:	6103      	streq	r3, [r0, #16]
  409824:	6143      	streq	r3, [r0, #20]
  409826:	f100 0218 	addeq.w	r2, r0, #24
  40982a:	2300      	movs	r3, #0
  40982c:	6013      	str	r3, [r2, #0]
  40982e:	6053      	str	r3, [r2, #4]
  409830:	6093      	str	r3, [r2, #8]
  409832:	4620      	mov	r0, r4
  409834:	bd10      	pop	{r4, pc}
  409836:	4602      	mov	r2, r0
  409838:	e7f7      	b.n	40982a <_calloc_r+0x3e>
  40983a:	2100      	movs	r1, #0
  40983c:	f7fa ffc6 	bl	4047cc <memset>
  409840:	4620      	mov	r0, r4
  409842:	bd10      	pop	{r4, pc}
  409844:	f100 0208 	add.w	r2, r0, #8
  409848:	e7ef      	b.n	40982a <_calloc_r+0x3e>
  40984a:	bf00      	nop

0040984c <_close_r>:
  40984c:	b538      	push	{r3, r4, r5, lr}
  40984e:	4c07      	ldr	r4, [pc, #28]	; (40986c <_close_r+0x20>)
  409850:	2300      	movs	r3, #0
  409852:	4605      	mov	r5, r0
  409854:	4608      	mov	r0, r1
  409856:	6023      	str	r3, [r4, #0]
  409858:	f7fa f92a 	bl	403ab0 <_close>
  40985c:	1c43      	adds	r3, r0, #1
  40985e:	d000      	beq.n	409862 <_close_r+0x16>
  409860:	bd38      	pop	{r3, r4, r5, pc}
  409862:	6823      	ldr	r3, [r4, #0]
  409864:	2b00      	cmp	r3, #0
  409866:	d0fb      	beq.n	409860 <_close_r+0x14>
  409868:	602b      	str	r3, [r5, #0]
  40986a:	bd38      	pop	{r3, r4, r5, pc}
  40986c:	2040c898 	.word	0x2040c898

00409870 <_fclose_r>:
  409870:	b570      	push	{r4, r5, r6, lr}
  409872:	b159      	cbz	r1, 40988c <_fclose_r+0x1c>
  409874:	4605      	mov	r5, r0
  409876:	460c      	mov	r4, r1
  409878:	b110      	cbz	r0, 409880 <_fclose_r+0x10>
  40987a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40987c:	2b00      	cmp	r3, #0
  40987e:	d03c      	beq.n	4098fa <_fclose_r+0x8a>
  409880:	6e63      	ldr	r3, [r4, #100]	; 0x64
  409882:	07d8      	lsls	r0, r3, #31
  409884:	d505      	bpl.n	409892 <_fclose_r+0x22>
  409886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40988a:	b92b      	cbnz	r3, 409898 <_fclose_r+0x28>
  40988c:	2600      	movs	r6, #0
  40988e:	4630      	mov	r0, r6
  409890:	bd70      	pop	{r4, r5, r6, pc}
  409892:	89a3      	ldrh	r3, [r4, #12]
  409894:	0599      	lsls	r1, r3, #22
  409896:	d53c      	bpl.n	409912 <_fclose_r+0xa2>
  409898:	4621      	mov	r1, r4
  40989a:	4628      	mov	r0, r5
  40989c:	f7fe fb2a 	bl	407ef4 <__sflush_r>
  4098a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4098a2:	4606      	mov	r6, r0
  4098a4:	b133      	cbz	r3, 4098b4 <_fclose_r+0x44>
  4098a6:	69e1      	ldr	r1, [r4, #28]
  4098a8:	4628      	mov	r0, r5
  4098aa:	4798      	blx	r3
  4098ac:	2800      	cmp	r0, #0
  4098ae:	bfb8      	it	lt
  4098b0:	f04f 36ff 	movlt.w	r6, #4294967295
  4098b4:	89a3      	ldrh	r3, [r4, #12]
  4098b6:	061a      	lsls	r2, r3, #24
  4098b8:	d422      	bmi.n	409900 <_fclose_r+0x90>
  4098ba:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4098bc:	b141      	cbz	r1, 4098d0 <_fclose_r+0x60>
  4098be:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4098c2:	4299      	cmp	r1, r3
  4098c4:	d002      	beq.n	4098cc <_fclose_r+0x5c>
  4098c6:	4628      	mov	r0, r5
  4098c8:	f7fe fd32 	bl	408330 <_free_r>
  4098cc:	2300      	movs	r3, #0
  4098ce:	6323      	str	r3, [r4, #48]	; 0x30
  4098d0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4098d2:	b121      	cbz	r1, 4098de <_fclose_r+0x6e>
  4098d4:	4628      	mov	r0, r5
  4098d6:	f7fe fd2b 	bl	408330 <_free_r>
  4098da:	2300      	movs	r3, #0
  4098dc:	6463      	str	r3, [r4, #68]	; 0x44
  4098de:	f7fe fc2d 	bl	40813c <__sfp_lock_acquire>
  4098e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4098e4:	2200      	movs	r2, #0
  4098e6:	07db      	lsls	r3, r3, #31
  4098e8:	81a2      	strh	r2, [r4, #12]
  4098ea:	d50e      	bpl.n	40990a <_fclose_r+0x9a>
  4098ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4098ee:	f7fe ffc5 	bl	40887c <__retarget_lock_close_recursive>
  4098f2:	f7fe fc29 	bl	408148 <__sfp_lock_release>
  4098f6:	4630      	mov	r0, r6
  4098f8:	bd70      	pop	{r4, r5, r6, pc}
  4098fa:	f7fe fbf3 	bl	4080e4 <__sinit>
  4098fe:	e7bf      	b.n	409880 <_fclose_r+0x10>
  409900:	6921      	ldr	r1, [r4, #16]
  409902:	4628      	mov	r0, r5
  409904:	f7fe fd14 	bl	408330 <_free_r>
  409908:	e7d7      	b.n	4098ba <_fclose_r+0x4a>
  40990a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40990c:	f7fe ffba 	bl	408884 <__retarget_lock_release_recursive>
  409910:	e7ec      	b.n	4098ec <_fclose_r+0x7c>
  409912:	6da0      	ldr	r0, [r4, #88]	; 0x58
  409914:	f7fe ffb4 	bl	408880 <__retarget_lock_acquire_recursive>
  409918:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40991c:	2b00      	cmp	r3, #0
  40991e:	d1bb      	bne.n	409898 <_fclose_r+0x28>
  409920:	6e66      	ldr	r6, [r4, #100]	; 0x64
  409922:	f016 0601 	ands.w	r6, r6, #1
  409926:	d1b1      	bne.n	40988c <_fclose_r+0x1c>
  409928:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40992a:	f7fe ffab 	bl	408884 <__retarget_lock_release_recursive>
  40992e:	4630      	mov	r0, r6
  409930:	bd70      	pop	{r4, r5, r6, pc}
  409932:	bf00      	nop

00409934 <_fstat_r>:
  409934:	b538      	push	{r3, r4, r5, lr}
  409936:	460b      	mov	r3, r1
  409938:	4c07      	ldr	r4, [pc, #28]	; (409958 <_fstat_r+0x24>)
  40993a:	4605      	mov	r5, r0
  40993c:	4611      	mov	r1, r2
  40993e:	4618      	mov	r0, r3
  409940:	2300      	movs	r3, #0
  409942:	6023      	str	r3, [r4, #0]
  409944:	f7fa f8b7 	bl	403ab6 <_fstat>
  409948:	1c43      	adds	r3, r0, #1
  40994a:	d000      	beq.n	40994e <_fstat_r+0x1a>
  40994c:	bd38      	pop	{r3, r4, r5, pc}
  40994e:	6823      	ldr	r3, [r4, #0]
  409950:	2b00      	cmp	r3, #0
  409952:	d0fb      	beq.n	40994c <_fstat_r+0x18>
  409954:	602b      	str	r3, [r5, #0]
  409956:	bd38      	pop	{r3, r4, r5, pc}
  409958:	2040c898 	.word	0x2040c898

0040995c <_isatty_r>:
  40995c:	b538      	push	{r3, r4, r5, lr}
  40995e:	4c07      	ldr	r4, [pc, #28]	; (40997c <_isatty_r+0x20>)
  409960:	2300      	movs	r3, #0
  409962:	4605      	mov	r5, r0
  409964:	4608      	mov	r0, r1
  409966:	6023      	str	r3, [r4, #0]
  409968:	f7fa f8aa 	bl	403ac0 <_isatty>
  40996c:	1c43      	adds	r3, r0, #1
  40996e:	d000      	beq.n	409972 <_isatty_r+0x16>
  409970:	bd38      	pop	{r3, r4, r5, pc}
  409972:	6823      	ldr	r3, [r4, #0]
  409974:	2b00      	cmp	r3, #0
  409976:	d0fb      	beq.n	409970 <_isatty_r+0x14>
  409978:	602b      	str	r3, [r5, #0]
  40997a:	bd38      	pop	{r3, r4, r5, pc}
  40997c:	2040c898 	.word	0x2040c898

00409980 <_lseek_r>:
  409980:	b570      	push	{r4, r5, r6, lr}
  409982:	460d      	mov	r5, r1
  409984:	4c08      	ldr	r4, [pc, #32]	; (4099a8 <_lseek_r+0x28>)
  409986:	4611      	mov	r1, r2
  409988:	4606      	mov	r6, r0
  40998a:	461a      	mov	r2, r3
  40998c:	4628      	mov	r0, r5
  40998e:	2300      	movs	r3, #0
  409990:	6023      	str	r3, [r4, #0]
  409992:	f7fa f897 	bl	403ac4 <_lseek>
  409996:	1c43      	adds	r3, r0, #1
  409998:	d000      	beq.n	40999c <_lseek_r+0x1c>
  40999a:	bd70      	pop	{r4, r5, r6, pc}
  40999c:	6823      	ldr	r3, [r4, #0]
  40999e:	2b00      	cmp	r3, #0
  4099a0:	d0fb      	beq.n	40999a <_lseek_r+0x1a>
  4099a2:	6033      	str	r3, [r6, #0]
  4099a4:	bd70      	pop	{r4, r5, r6, pc}
  4099a6:	bf00      	nop
  4099a8:	2040c898 	.word	0x2040c898

004099ac <_read_r>:
  4099ac:	b570      	push	{r4, r5, r6, lr}
  4099ae:	460d      	mov	r5, r1
  4099b0:	4c08      	ldr	r4, [pc, #32]	; (4099d4 <_read_r+0x28>)
  4099b2:	4611      	mov	r1, r2
  4099b4:	4606      	mov	r6, r0
  4099b6:	461a      	mov	r2, r3
  4099b8:	4628      	mov	r0, r5
  4099ba:	2300      	movs	r3, #0
  4099bc:	6023      	str	r3, [r4, #0]
  4099be:	f7f8 fe09 	bl	4025d4 <_read>
  4099c2:	1c43      	adds	r3, r0, #1
  4099c4:	d000      	beq.n	4099c8 <_read_r+0x1c>
  4099c6:	bd70      	pop	{r4, r5, r6, pc}
  4099c8:	6823      	ldr	r3, [r4, #0]
  4099ca:	2b00      	cmp	r3, #0
  4099cc:	d0fb      	beq.n	4099c6 <_read_r+0x1a>
  4099ce:	6033      	str	r3, [r6, #0]
  4099d0:	bd70      	pop	{r4, r5, r6, pc}
  4099d2:	bf00      	nop
  4099d4:	2040c898 	.word	0x2040c898

004099d8 <__aeabi_drsub>:
  4099d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4099dc:	e002      	b.n	4099e4 <__adddf3>
  4099de:	bf00      	nop

004099e0 <__aeabi_dsub>:
  4099e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004099e4 <__adddf3>:
  4099e4:	b530      	push	{r4, r5, lr}
  4099e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4099ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4099ee:	ea94 0f05 	teq	r4, r5
  4099f2:	bf08      	it	eq
  4099f4:	ea90 0f02 	teqeq	r0, r2
  4099f8:	bf1f      	itttt	ne
  4099fa:	ea54 0c00 	orrsne.w	ip, r4, r0
  4099fe:	ea55 0c02 	orrsne.w	ip, r5, r2
  409a02:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  409a06:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  409a0a:	f000 80e2 	beq.w	409bd2 <__adddf3+0x1ee>
  409a0e:	ea4f 5454 	mov.w	r4, r4, lsr #21
  409a12:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  409a16:	bfb8      	it	lt
  409a18:	426d      	neglt	r5, r5
  409a1a:	dd0c      	ble.n	409a36 <__adddf3+0x52>
  409a1c:	442c      	add	r4, r5
  409a1e:	ea80 0202 	eor.w	r2, r0, r2
  409a22:	ea81 0303 	eor.w	r3, r1, r3
  409a26:	ea82 0000 	eor.w	r0, r2, r0
  409a2a:	ea83 0101 	eor.w	r1, r3, r1
  409a2e:	ea80 0202 	eor.w	r2, r0, r2
  409a32:	ea81 0303 	eor.w	r3, r1, r3
  409a36:	2d36      	cmp	r5, #54	; 0x36
  409a38:	bf88      	it	hi
  409a3a:	bd30      	pophi	{r4, r5, pc}
  409a3c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  409a40:	ea4f 3101 	mov.w	r1, r1, lsl #12
  409a44:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  409a48:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  409a4c:	d002      	beq.n	409a54 <__adddf3+0x70>
  409a4e:	4240      	negs	r0, r0
  409a50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  409a54:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  409a58:	ea4f 3303 	mov.w	r3, r3, lsl #12
  409a5c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  409a60:	d002      	beq.n	409a68 <__adddf3+0x84>
  409a62:	4252      	negs	r2, r2
  409a64:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  409a68:	ea94 0f05 	teq	r4, r5
  409a6c:	f000 80a7 	beq.w	409bbe <__adddf3+0x1da>
  409a70:	f1a4 0401 	sub.w	r4, r4, #1
  409a74:	f1d5 0e20 	rsbs	lr, r5, #32
  409a78:	db0d      	blt.n	409a96 <__adddf3+0xb2>
  409a7a:	fa02 fc0e 	lsl.w	ip, r2, lr
  409a7e:	fa22 f205 	lsr.w	r2, r2, r5
  409a82:	1880      	adds	r0, r0, r2
  409a84:	f141 0100 	adc.w	r1, r1, #0
  409a88:	fa03 f20e 	lsl.w	r2, r3, lr
  409a8c:	1880      	adds	r0, r0, r2
  409a8e:	fa43 f305 	asr.w	r3, r3, r5
  409a92:	4159      	adcs	r1, r3
  409a94:	e00e      	b.n	409ab4 <__adddf3+0xd0>
  409a96:	f1a5 0520 	sub.w	r5, r5, #32
  409a9a:	f10e 0e20 	add.w	lr, lr, #32
  409a9e:	2a01      	cmp	r2, #1
  409aa0:	fa03 fc0e 	lsl.w	ip, r3, lr
  409aa4:	bf28      	it	cs
  409aa6:	f04c 0c02 	orrcs.w	ip, ip, #2
  409aaa:	fa43 f305 	asr.w	r3, r3, r5
  409aae:	18c0      	adds	r0, r0, r3
  409ab0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  409ab4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  409ab8:	d507      	bpl.n	409aca <__adddf3+0xe6>
  409aba:	f04f 0e00 	mov.w	lr, #0
  409abe:	f1dc 0c00 	rsbs	ip, ip, #0
  409ac2:	eb7e 0000 	sbcs.w	r0, lr, r0
  409ac6:	eb6e 0101 	sbc.w	r1, lr, r1
  409aca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  409ace:	d31b      	bcc.n	409b08 <__adddf3+0x124>
  409ad0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  409ad4:	d30c      	bcc.n	409af0 <__adddf3+0x10c>
  409ad6:	0849      	lsrs	r1, r1, #1
  409ad8:	ea5f 0030 	movs.w	r0, r0, rrx
  409adc:	ea4f 0c3c 	mov.w	ip, ip, rrx
  409ae0:	f104 0401 	add.w	r4, r4, #1
  409ae4:	ea4f 5244 	mov.w	r2, r4, lsl #21
  409ae8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  409aec:	f080 809a 	bcs.w	409c24 <__adddf3+0x240>
  409af0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  409af4:	bf08      	it	eq
  409af6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  409afa:	f150 0000 	adcs.w	r0, r0, #0
  409afe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  409b02:	ea41 0105 	orr.w	r1, r1, r5
  409b06:	bd30      	pop	{r4, r5, pc}
  409b08:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  409b0c:	4140      	adcs	r0, r0
  409b0e:	eb41 0101 	adc.w	r1, r1, r1
  409b12:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  409b16:	f1a4 0401 	sub.w	r4, r4, #1
  409b1a:	d1e9      	bne.n	409af0 <__adddf3+0x10c>
  409b1c:	f091 0f00 	teq	r1, #0
  409b20:	bf04      	itt	eq
  409b22:	4601      	moveq	r1, r0
  409b24:	2000      	moveq	r0, #0
  409b26:	fab1 f381 	clz	r3, r1
  409b2a:	bf08      	it	eq
  409b2c:	3320      	addeq	r3, #32
  409b2e:	f1a3 030b 	sub.w	r3, r3, #11
  409b32:	f1b3 0220 	subs.w	r2, r3, #32
  409b36:	da0c      	bge.n	409b52 <__adddf3+0x16e>
  409b38:	320c      	adds	r2, #12
  409b3a:	dd08      	ble.n	409b4e <__adddf3+0x16a>
  409b3c:	f102 0c14 	add.w	ip, r2, #20
  409b40:	f1c2 020c 	rsb	r2, r2, #12
  409b44:	fa01 f00c 	lsl.w	r0, r1, ip
  409b48:	fa21 f102 	lsr.w	r1, r1, r2
  409b4c:	e00c      	b.n	409b68 <__adddf3+0x184>
  409b4e:	f102 0214 	add.w	r2, r2, #20
  409b52:	bfd8      	it	le
  409b54:	f1c2 0c20 	rsble	ip, r2, #32
  409b58:	fa01 f102 	lsl.w	r1, r1, r2
  409b5c:	fa20 fc0c 	lsr.w	ip, r0, ip
  409b60:	bfdc      	itt	le
  409b62:	ea41 010c 	orrle.w	r1, r1, ip
  409b66:	4090      	lslle	r0, r2
  409b68:	1ae4      	subs	r4, r4, r3
  409b6a:	bfa2      	ittt	ge
  409b6c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  409b70:	4329      	orrge	r1, r5
  409b72:	bd30      	popge	{r4, r5, pc}
  409b74:	ea6f 0404 	mvn.w	r4, r4
  409b78:	3c1f      	subs	r4, #31
  409b7a:	da1c      	bge.n	409bb6 <__adddf3+0x1d2>
  409b7c:	340c      	adds	r4, #12
  409b7e:	dc0e      	bgt.n	409b9e <__adddf3+0x1ba>
  409b80:	f104 0414 	add.w	r4, r4, #20
  409b84:	f1c4 0220 	rsb	r2, r4, #32
  409b88:	fa20 f004 	lsr.w	r0, r0, r4
  409b8c:	fa01 f302 	lsl.w	r3, r1, r2
  409b90:	ea40 0003 	orr.w	r0, r0, r3
  409b94:	fa21 f304 	lsr.w	r3, r1, r4
  409b98:	ea45 0103 	orr.w	r1, r5, r3
  409b9c:	bd30      	pop	{r4, r5, pc}
  409b9e:	f1c4 040c 	rsb	r4, r4, #12
  409ba2:	f1c4 0220 	rsb	r2, r4, #32
  409ba6:	fa20 f002 	lsr.w	r0, r0, r2
  409baa:	fa01 f304 	lsl.w	r3, r1, r4
  409bae:	ea40 0003 	orr.w	r0, r0, r3
  409bb2:	4629      	mov	r1, r5
  409bb4:	bd30      	pop	{r4, r5, pc}
  409bb6:	fa21 f004 	lsr.w	r0, r1, r4
  409bba:	4629      	mov	r1, r5
  409bbc:	bd30      	pop	{r4, r5, pc}
  409bbe:	f094 0f00 	teq	r4, #0
  409bc2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  409bc6:	bf06      	itte	eq
  409bc8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  409bcc:	3401      	addeq	r4, #1
  409bce:	3d01      	subne	r5, #1
  409bd0:	e74e      	b.n	409a70 <__adddf3+0x8c>
  409bd2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  409bd6:	bf18      	it	ne
  409bd8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  409bdc:	d029      	beq.n	409c32 <__adddf3+0x24e>
  409bde:	ea94 0f05 	teq	r4, r5
  409be2:	bf08      	it	eq
  409be4:	ea90 0f02 	teqeq	r0, r2
  409be8:	d005      	beq.n	409bf6 <__adddf3+0x212>
  409bea:	ea54 0c00 	orrs.w	ip, r4, r0
  409bee:	bf04      	itt	eq
  409bf0:	4619      	moveq	r1, r3
  409bf2:	4610      	moveq	r0, r2
  409bf4:	bd30      	pop	{r4, r5, pc}
  409bf6:	ea91 0f03 	teq	r1, r3
  409bfa:	bf1e      	ittt	ne
  409bfc:	2100      	movne	r1, #0
  409bfe:	2000      	movne	r0, #0
  409c00:	bd30      	popne	{r4, r5, pc}
  409c02:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  409c06:	d105      	bne.n	409c14 <__adddf3+0x230>
  409c08:	0040      	lsls	r0, r0, #1
  409c0a:	4149      	adcs	r1, r1
  409c0c:	bf28      	it	cs
  409c0e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  409c12:	bd30      	pop	{r4, r5, pc}
  409c14:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  409c18:	bf3c      	itt	cc
  409c1a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  409c1e:	bd30      	popcc	{r4, r5, pc}
  409c20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  409c24:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  409c28:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  409c2c:	f04f 0000 	mov.w	r0, #0
  409c30:	bd30      	pop	{r4, r5, pc}
  409c32:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  409c36:	bf1a      	itte	ne
  409c38:	4619      	movne	r1, r3
  409c3a:	4610      	movne	r0, r2
  409c3c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  409c40:	bf1c      	itt	ne
  409c42:	460b      	movne	r3, r1
  409c44:	4602      	movne	r2, r0
  409c46:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  409c4a:	bf06      	itte	eq
  409c4c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  409c50:	ea91 0f03 	teqeq	r1, r3
  409c54:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  409c58:	bd30      	pop	{r4, r5, pc}
  409c5a:	bf00      	nop

00409c5c <__aeabi_ui2d>:
  409c5c:	f090 0f00 	teq	r0, #0
  409c60:	bf04      	itt	eq
  409c62:	2100      	moveq	r1, #0
  409c64:	4770      	bxeq	lr
  409c66:	b530      	push	{r4, r5, lr}
  409c68:	f44f 6480 	mov.w	r4, #1024	; 0x400
  409c6c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  409c70:	f04f 0500 	mov.w	r5, #0
  409c74:	f04f 0100 	mov.w	r1, #0
  409c78:	e750      	b.n	409b1c <__adddf3+0x138>
  409c7a:	bf00      	nop

00409c7c <__aeabi_i2d>:
  409c7c:	f090 0f00 	teq	r0, #0
  409c80:	bf04      	itt	eq
  409c82:	2100      	moveq	r1, #0
  409c84:	4770      	bxeq	lr
  409c86:	b530      	push	{r4, r5, lr}
  409c88:	f44f 6480 	mov.w	r4, #1024	; 0x400
  409c8c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  409c90:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  409c94:	bf48      	it	mi
  409c96:	4240      	negmi	r0, r0
  409c98:	f04f 0100 	mov.w	r1, #0
  409c9c:	e73e      	b.n	409b1c <__adddf3+0x138>
  409c9e:	bf00      	nop

00409ca0 <__aeabi_f2d>:
  409ca0:	0042      	lsls	r2, r0, #1
  409ca2:	ea4f 01e2 	mov.w	r1, r2, asr #3
  409ca6:	ea4f 0131 	mov.w	r1, r1, rrx
  409caa:	ea4f 7002 	mov.w	r0, r2, lsl #28
  409cae:	bf1f      	itttt	ne
  409cb0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  409cb4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  409cb8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  409cbc:	4770      	bxne	lr
  409cbe:	f092 0f00 	teq	r2, #0
  409cc2:	bf14      	ite	ne
  409cc4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  409cc8:	4770      	bxeq	lr
  409cca:	b530      	push	{r4, r5, lr}
  409ccc:	f44f 7460 	mov.w	r4, #896	; 0x380
  409cd0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  409cd4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  409cd8:	e720      	b.n	409b1c <__adddf3+0x138>
  409cda:	bf00      	nop

00409cdc <__aeabi_ul2d>:
  409cdc:	ea50 0201 	orrs.w	r2, r0, r1
  409ce0:	bf08      	it	eq
  409ce2:	4770      	bxeq	lr
  409ce4:	b530      	push	{r4, r5, lr}
  409ce6:	f04f 0500 	mov.w	r5, #0
  409cea:	e00a      	b.n	409d02 <__aeabi_l2d+0x16>

00409cec <__aeabi_l2d>:
  409cec:	ea50 0201 	orrs.w	r2, r0, r1
  409cf0:	bf08      	it	eq
  409cf2:	4770      	bxeq	lr
  409cf4:	b530      	push	{r4, r5, lr}
  409cf6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  409cfa:	d502      	bpl.n	409d02 <__aeabi_l2d+0x16>
  409cfc:	4240      	negs	r0, r0
  409cfe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  409d02:	f44f 6480 	mov.w	r4, #1024	; 0x400
  409d06:	f104 0432 	add.w	r4, r4, #50	; 0x32
  409d0a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  409d0e:	f43f aedc 	beq.w	409aca <__adddf3+0xe6>
  409d12:	f04f 0203 	mov.w	r2, #3
  409d16:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  409d1a:	bf18      	it	ne
  409d1c:	3203      	addne	r2, #3
  409d1e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  409d22:	bf18      	it	ne
  409d24:	3203      	addne	r2, #3
  409d26:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  409d2a:	f1c2 0320 	rsb	r3, r2, #32
  409d2e:	fa00 fc03 	lsl.w	ip, r0, r3
  409d32:	fa20 f002 	lsr.w	r0, r0, r2
  409d36:	fa01 fe03 	lsl.w	lr, r1, r3
  409d3a:	ea40 000e 	orr.w	r0, r0, lr
  409d3e:	fa21 f102 	lsr.w	r1, r1, r2
  409d42:	4414      	add	r4, r2
  409d44:	e6c1      	b.n	409aca <__adddf3+0xe6>
  409d46:	bf00      	nop

00409d48 <__aeabi_dmul>:
  409d48:	b570      	push	{r4, r5, r6, lr}
  409d4a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  409d4e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  409d52:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  409d56:	bf1d      	ittte	ne
  409d58:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  409d5c:	ea94 0f0c 	teqne	r4, ip
  409d60:	ea95 0f0c 	teqne	r5, ip
  409d64:	f000 f8de 	bleq	409f24 <__aeabi_dmul+0x1dc>
  409d68:	442c      	add	r4, r5
  409d6a:	ea81 0603 	eor.w	r6, r1, r3
  409d6e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  409d72:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  409d76:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  409d7a:	bf18      	it	ne
  409d7c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  409d80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  409d84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  409d88:	d038      	beq.n	409dfc <__aeabi_dmul+0xb4>
  409d8a:	fba0 ce02 	umull	ip, lr, r0, r2
  409d8e:	f04f 0500 	mov.w	r5, #0
  409d92:	fbe1 e502 	umlal	lr, r5, r1, r2
  409d96:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  409d9a:	fbe0 e503 	umlal	lr, r5, r0, r3
  409d9e:	f04f 0600 	mov.w	r6, #0
  409da2:	fbe1 5603 	umlal	r5, r6, r1, r3
  409da6:	f09c 0f00 	teq	ip, #0
  409daa:	bf18      	it	ne
  409dac:	f04e 0e01 	orrne.w	lr, lr, #1
  409db0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  409db4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  409db8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  409dbc:	d204      	bcs.n	409dc8 <__aeabi_dmul+0x80>
  409dbe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  409dc2:	416d      	adcs	r5, r5
  409dc4:	eb46 0606 	adc.w	r6, r6, r6
  409dc8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  409dcc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  409dd0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  409dd4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  409dd8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  409ddc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  409de0:	bf88      	it	hi
  409de2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  409de6:	d81e      	bhi.n	409e26 <__aeabi_dmul+0xde>
  409de8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  409dec:	bf08      	it	eq
  409dee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  409df2:	f150 0000 	adcs.w	r0, r0, #0
  409df6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  409dfa:	bd70      	pop	{r4, r5, r6, pc}
  409dfc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  409e00:	ea46 0101 	orr.w	r1, r6, r1
  409e04:	ea40 0002 	orr.w	r0, r0, r2
  409e08:	ea81 0103 	eor.w	r1, r1, r3
  409e0c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  409e10:	bfc2      	ittt	gt
  409e12:	ebd4 050c 	rsbsgt	r5, r4, ip
  409e16:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  409e1a:	bd70      	popgt	{r4, r5, r6, pc}
  409e1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  409e20:	f04f 0e00 	mov.w	lr, #0
  409e24:	3c01      	subs	r4, #1
  409e26:	f300 80ab 	bgt.w	409f80 <__aeabi_dmul+0x238>
  409e2a:	f114 0f36 	cmn.w	r4, #54	; 0x36
  409e2e:	bfde      	ittt	le
  409e30:	2000      	movle	r0, #0
  409e32:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  409e36:	bd70      	pople	{r4, r5, r6, pc}
  409e38:	f1c4 0400 	rsb	r4, r4, #0
  409e3c:	3c20      	subs	r4, #32
  409e3e:	da35      	bge.n	409eac <__aeabi_dmul+0x164>
  409e40:	340c      	adds	r4, #12
  409e42:	dc1b      	bgt.n	409e7c <__aeabi_dmul+0x134>
  409e44:	f104 0414 	add.w	r4, r4, #20
  409e48:	f1c4 0520 	rsb	r5, r4, #32
  409e4c:	fa00 f305 	lsl.w	r3, r0, r5
  409e50:	fa20 f004 	lsr.w	r0, r0, r4
  409e54:	fa01 f205 	lsl.w	r2, r1, r5
  409e58:	ea40 0002 	orr.w	r0, r0, r2
  409e5c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  409e60:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  409e64:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  409e68:	fa21 f604 	lsr.w	r6, r1, r4
  409e6c:	eb42 0106 	adc.w	r1, r2, r6
  409e70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  409e74:	bf08      	it	eq
  409e76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  409e7a:	bd70      	pop	{r4, r5, r6, pc}
  409e7c:	f1c4 040c 	rsb	r4, r4, #12
  409e80:	f1c4 0520 	rsb	r5, r4, #32
  409e84:	fa00 f304 	lsl.w	r3, r0, r4
  409e88:	fa20 f005 	lsr.w	r0, r0, r5
  409e8c:	fa01 f204 	lsl.w	r2, r1, r4
  409e90:	ea40 0002 	orr.w	r0, r0, r2
  409e94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  409e98:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  409e9c:	f141 0100 	adc.w	r1, r1, #0
  409ea0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  409ea4:	bf08      	it	eq
  409ea6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  409eaa:	bd70      	pop	{r4, r5, r6, pc}
  409eac:	f1c4 0520 	rsb	r5, r4, #32
  409eb0:	fa00 f205 	lsl.w	r2, r0, r5
  409eb4:	ea4e 0e02 	orr.w	lr, lr, r2
  409eb8:	fa20 f304 	lsr.w	r3, r0, r4
  409ebc:	fa01 f205 	lsl.w	r2, r1, r5
  409ec0:	ea43 0302 	orr.w	r3, r3, r2
  409ec4:	fa21 f004 	lsr.w	r0, r1, r4
  409ec8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  409ecc:	fa21 f204 	lsr.w	r2, r1, r4
  409ed0:	ea20 0002 	bic.w	r0, r0, r2
  409ed4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  409ed8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  409edc:	bf08      	it	eq
  409ede:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  409ee2:	bd70      	pop	{r4, r5, r6, pc}
  409ee4:	f094 0f00 	teq	r4, #0
  409ee8:	d10f      	bne.n	409f0a <__aeabi_dmul+0x1c2>
  409eea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  409eee:	0040      	lsls	r0, r0, #1
  409ef0:	eb41 0101 	adc.w	r1, r1, r1
  409ef4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  409ef8:	bf08      	it	eq
  409efa:	3c01      	subeq	r4, #1
  409efc:	d0f7      	beq.n	409eee <__aeabi_dmul+0x1a6>
  409efe:	ea41 0106 	orr.w	r1, r1, r6
  409f02:	f095 0f00 	teq	r5, #0
  409f06:	bf18      	it	ne
  409f08:	4770      	bxne	lr
  409f0a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  409f0e:	0052      	lsls	r2, r2, #1
  409f10:	eb43 0303 	adc.w	r3, r3, r3
  409f14:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  409f18:	bf08      	it	eq
  409f1a:	3d01      	subeq	r5, #1
  409f1c:	d0f7      	beq.n	409f0e <__aeabi_dmul+0x1c6>
  409f1e:	ea43 0306 	orr.w	r3, r3, r6
  409f22:	4770      	bx	lr
  409f24:	ea94 0f0c 	teq	r4, ip
  409f28:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  409f2c:	bf18      	it	ne
  409f2e:	ea95 0f0c 	teqne	r5, ip
  409f32:	d00c      	beq.n	409f4e <__aeabi_dmul+0x206>
  409f34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  409f38:	bf18      	it	ne
  409f3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  409f3e:	d1d1      	bne.n	409ee4 <__aeabi_dmul+0x19c>
  409f40:	ea81 0103 	eor.w	r1, r1, r3
  409f44:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  409f48:	f04f 0000 	mov.w	r0, #0
  409f4c:	bd70      	pop	{r4, r5, r6, pc}
  409f4e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  409f52:	bf06      	itte	eq
  409f54:	4610      	moveq	r0, r2
  409f56:	4619      	moveq	r1, r3
  409f58:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  409f5c:	d019      	beq.n	409f92 <__aeabi_dmul+0x24a>
  409f5e:	ea94 0f0c 	teq	r4, ip
  409f62:	d102      	bne.n	409f6a <__aeabi_dmul+0x222>
  409f64:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  409f68:	d113      	bne.n	409f92 <__aeabi_dmul+0x24a>
  409f6a:	ea95 0f0c 	teq	r5, ip
  409f6e:	d105      	bne.n	409f7c <__aeabi_dmul+0x234>
  409f70:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  409f74:	bf1c      	itt	ne
  409f76:	4610      	movne	r0, r2
  409f78:	4619      	movne	r1, r3
  409f7a:	d10a      	bne.n	409f92 <__aeabi_dmul+0x24a>
  409f7c:	ea81 0103 	eor.w	r1, r1, r3
  409f80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  409f84:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  409f88:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  409f8c:	f04f 0000 	mov.w	r0, #0
  409f90:	bd70      	pop	{r4, r5, r6, pc}
  409f92:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  409f96:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  409f9a:	bd70      	pop	{r4, r5, r6, pc}

00409f9c <__aeabi_ddiv>:
  409f9c:	b570      	push	{r4, r5, r6, lr}
  409f9e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  409fa2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  409fa6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  409faa:	bf1d      	ittte	ne
  409fac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  409fb0:	ea94 0f0c 	teqne	r4, ip
  409fb4:	ea95 0f0c 	teqne	r5, ip
  409fb8:	f000 f8a7 	bleq	40a10a <__aeabi_ddiv+0x16e>
  409fbc:	eba4 0405 	sub.w	r4, r4, r5
  409fc0:	ea81 0e03 	eor.w	lr, r1, r3
  409fc4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  409fc8:	ea4f 3101 	mov.w	r1, r1, lsl #12
  409fcc:	f000 8088 	beq.w	40a0e0 <__aeabi_ddiv+0x144>
  409fd0:	ea4f 3303 	mov.w	r3, r3, lsl #12
  409fd4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  409fd8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  409fdc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  409fe0:	ea4f 2202 	mov.w	r2, r2, lsl #8
  409fe4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  409fe8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  409fec:	ea4f 2600 	mov.w	r6, r0, lsl #8
  409ff0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  409ff4:	429d      	cmp	r5, r3
  409ff6:	bf08      	it	eq
  409ff8:	4296      	cmpeq	r6, r2
  409ffa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  409ffe:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40a002:	d202      	bcs.n	40a00a <__aeabi_ddiv+0x6e>
  40a004:	085b      	lsrs	r3, r3, #1
  40a006:	ea4f 0232 	mov.w	r2, r2, rrx
  40a00a:	1ab6      	subs	r6, r6, r2
  40a00c:	eb65 0503 	sbc.w	r5, r5, r3
  40a010:	085b      	lsrs	r3, r3, #1
  40a012:	ea4f 0232 	mov.w	r2, r2, rrx
  40a016:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40a01a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40a01e:	ebb6 0e02 	subs.w	lr, r6, r2
  40a022:	eb75 0e03 	sbcs.w	lr, r5, r3
  40a026:	bf22      	ittt	cs
  40a028:	1ab6      	subcs	r6, r6, r2
  40a02a:	4675      	movcs	r5, lr
  40a02c:	ea40 000c 	orrcs.w	r0, r0, ip
  40a030:	085b      	lsrs	r3, r3, #1
  40a032:	ea4f 0232 	mov.w	r2, r2, rrx
  40a036:	ebb6 0e02 	subs.w	lr, r6, r2
  40a03a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40a03e:	bf22      	ittt	cs
  40a040:	1ab6      	subcs	r6, r6, r2
  40a042:	4675      	movcs	r5, lr
  40a044:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40a048:	085b      	lsrs	r3, r3, #1
  40a04a:	ea4f 0232 	mov.w	r2, r2, rrx
  40a04e:	ebb6 0e02 	subs.w	lr, r6, r2
  40a052:	eb75 0e03 	sbcs.w	lr, r5, r3
  40a056:	bf22      	ittt	cs
  40a058:	1ab6      	subcs	r6, r6, r2
  40a05a:	4675      	movcs	r5, lr
  40a05c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40a060:	085b      	lsrs	r3, r3, #1
  40a062:	ea4f 0232 	mov.w	r2, r2, rrx
  40a066:	ebb6 0e02 	subs.w	lr, r6, r2
  40a06a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40a06e:	bf22      	ittt	cs
  40a070:	1ab6      	subcs	r6, r6, r2
  40a072:	4675      	movcs	r5, lr
  40a074:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40a078:	ea55 0e06 	orrs.w	lr, r5, r6
  40a07c:	d018      	beq.n	40a0b0 <__aeabi_ddiv+0x114>
  40a07e:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40a082:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40a086:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40a08a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40a08e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40a092:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40a096:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40a09a:	d1c0      	bne.n	40a01e <__aeabi_ddiv+0x82>
  40a09c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a0a0:	d10b      	bne.n	40a0ba <__aeabi_ddiv+0x11e>
  40a0a2:	ea41 0100 	orr.w	r1, r1, r0
  40a0a6:	f04f 0000 	mov.w	r0, #0
  40a0aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40a0ae:	e7b6      	b.n	40a01e <__aeabi_ddiv+0x82>
  40a0b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a0b4:	bf04      	itt	eq
  40a0b6:	4301      	orreq	r1, r0
  40a0b8:	2000      	moveq	r0, #0
  40a0ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40a0be:	bf88      	it	hi
  40a0c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40a0c4:	f63f aeaf 	bhi.w	409e26 <__aeabi_dmul+0xde>
  40a0c8:	ebb5 0c03 	subs.w	ip, r5, r3
  40a0cc:	bf04      	itt	eq
  40a0ce:	ebb6 0c02 	subseq.w	ip, r6, r2
  40a0d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40a0d6:	f150 0000 	adcs.w	r0, r0, #0
  40a0da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40a0de:	bd70      	pop	{r4, r5, r6, pc}
  40a0e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40a0e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40a0e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40a0ec:	bfc2      	ittt	gt
  40a0ee:	ebd4 050c 	rsbsgt	r5, r4, ip
  40a0f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40a0f6:	bd70      	popgt	{r4, r5, r6, pc}
  40a0f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40a0fc:	f04f 0e00 	mov.w	lr, #0
  40a100:	3c01      	subs	r4, #1
  40a102:	e690      	b.n	409e26 <__aeabi_dmul+0xde>
  40a104:	ea45 0e06 	orr.w	lr, r5, r6
  40a108:	e68d      	b.n	409e26 <__aeabi_dmul+0xde>
  40a10a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40a10e:	ea94 0f0c 	teq	r4, ip
  40a112:	bf08      	it	eq
  40a114:	ea95 0f0c 	teqeq	r5, ip
  40a118:	f43f af3b 	beq.w	409f92 <__aeabi_dmul+0x24a>
  40a11c:	ea94 0f0c 	teq	r4, ip
  40a120:	d10a      	bne.n	40a138 <__aeabi_ddiv+0x19c>
  40a122:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40a126:	f47f af34 	bne.w	409f92 <__aeabi_dmul+0x24a>
  40a12a:	ea95 0f0c 	teq	r5, ip
  40a12e:	f47f af25 	bne.w	409f7c <__aeabi_dmul+0x234>
  40a132:	4610      	mov	r0, r2
  40a134:	4619      	mov	r1, r3
  40a136:	e72c      	b.n	409f92 <__aeabi_dmul+0x24a>
  40a138:	ea95 0f0c 	teq	r5, ip
  40a13c:	d106      	bne.n	40a14c <__aeabi_ddiv+0x1b0>
  40a13e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40a142:	f43f aefd 	beq.w	409f40 <__aeabi_dmul+0x1f8>
  40a146:	4610      	mov	r0, r2
  40a148:	4619      	mov	r1, r3
  40a14a:	e722      	b.n	409f92 <__aeabi_dmul+0x24a>
  40a14c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40a150:	bf18      	it	ne
  40a152:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40a156:	f47f aec5 	bne.w	409ee4 <__aeabi_dmul+0x19c>
  40a15a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40a15e:	f47f af0d 	bne.w	409f7c <__aeabi_dmul+0x234>
  40a162:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40a166:	f47f aeeb 	bne.w	409f40 <__aeabi_dmul+0x1f8>
  40a16a:	e712      	b.n	409f92 <__aeabi_dmul+0x24a>

0040a16c <__gedf2>:
  40a16c:	f04f 3cff 	mov.w	ip, #4294967295
  40a170:	e006      	b.n	40a180 <__cmpdf2+0x4>
  40a172:	bf00      	nop

0040a174 <__ledf2>:
  40a174:	f04f 0c01 	mov.w	ip, #1
  40a178:	e002      	b.n	40a180 <__cmpdf2+0x4>
  40a17a:	bf00      	nop

0040a17c <__cmpdf2>:
  40a17c:	f04f 0c01 	mov.w	ip, #1
  40a180:	f84d cd04 	str.w	ip, [sp, #-4]!
  40a184:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40a188:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a18c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40a190:	bf18      	it	ne
  40a192:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40a196:	d01b      	beq.n	40a1d0 <__cmpdf2+0x54>
  40a198:	b001      	add	sp, #4
  40a19a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40a19e:	bf0c      	ite	eq
  40a1a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40a1a4:	ea91 0f03 	teqne	r1, r3
  40a1a8:	bf02      	ittt	eq
  40a1aa:	ea90 0f02 	teqeq	r0, r2
  40a1ae:	2000      	moveq	r0, #0
  40a1b0:	4770      	bxeq	lr
  40a1b2:	f110 0f00 	cmn.w	r0, #0
  40a1b6:	ea91 0f03 	teq	r1, r3
  40a1ba:	bf58      	it	pl
  40a1bc:	4299      	cmppl	r1, r3
  40a1be:	bf08      	it	eq
  40a1c0:	4290      	cmpeq	r0, r2
  40a1c2:	bf2c      	ite	cs
  40a1c4:	17d8      	asrcs	r0, r3, #31
  40a1c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40a1ca:	f040 0001 	orr.w	r0, r0, #1
  40a1ce:	4770      	bx	lr
  40a1d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40a1d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a1d8:	d102      	bne.n	40a1e0 <__cmpdf2+0x64>
  40a1da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40a1de:	d107      	bne.n	40a1f0 <__cmpdf2+0x74>
  40a1e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40a1e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a1e8:	d1d6      	bne.n	40a198 <__cmpdf2+0x1c>
  40a1ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40a1ee:	d0d3      	beq.n	40a198 <__cmpdf2+0x1c>
  40a1f0:	f85d 0b04 	ldr.w	r0, [sp], #4
  40a1f4:	4770      	bx	lr
  40a1f6:	bf00      	nop

0040a1f8 <__aeabi_cdrcmple>:
  40a1f8:	4684      	mov	ip, r0
  40a1fa:	4610      	mov	r0, r2
  40a1fc:	4662      	mov	r2, ip
  40a1fe:	468c      	mov	ip, r1
  40a200:	4619      	mov	r1, r3
  40a202:	4663      	mov	r3, ip
  40a204:	e000      	b.n	40a208 <__aeabi_cdcmpeq>
  40a206:	bf00      	nop

0040a208 <__aeabi_cdcmpeq>:
  40a208:	b501      	push	{r0, lr}
  40a20a:	f7ff ffb7 	bl	40a17c <__cmpdf2>
  40a20e:	2800      	cmp	r0, #0
  40a210:	bf48      	it	mi
  40a212:	f110 0f00 	cmnmi.w	r0, #0
  40a216:	bd01      	pop	{r0, pc}

0040a218 <__aeabi_dcmpeq>:
  40a218:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a21c:	f7ff fff4 	bl	40a208 <__aeabi_cdcmpeq>
  40a220:	bf0c      	ite	eq
  40a222:	2001      	moveq	r0, #1
  40a224:	2000      	movne	r0, #0
  40a226:	f85d fb08 	ldr.w	pc, [sp], #8
  40a22a:	bf00      	nop

0040a22c <__aeabi_dcmplt>:
  40a22c:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a230:	f7ff ffea 	bl	40a208 <__aeabi_cdcmpeq>
  40a234:	bf34      	ite	cc
  40a236:	2001      	movcc	r0, #1
  40a238:	2000      	movcs	r0, #0
  40a23a:	f85d fb08 	ldr.w	pc, [sp], #8
  40a23e:	bf00      	nop

0040a240 <__aeabi_dcmple>:
  40a240:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a244:	f7ff ffe0 	bl	40a208 <__aeabi_cdcmpeq>
  40a248:	bf94      	ite	ls
  40a24a:	2001      	movls	r0, #1
  40a24c:	2000      	movhi	r0, #0
  40a24e:	f85d fb08 	ldr.w	pc, [sp], #8
  40a252:	bf00      	nop

0040a254 <__aeabi_dcmpge>:
  40a254:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a258:	f7ff ffce 	bl	40a1f8 <__aeabi_cdrcmple>
  40a25c:	bf94      	ite	ls
  40a25e:	2001      	movls	r0, #1
  40a260:	2000      	movhi	r0, #0
  40a262:	f85d fb08 	ldr.w	pc, [sp], #8
  40a266:	bf00      	nop

0040a268 <__aeabi_dcmpgt>:
  40a268:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a26c:	f7ff ffc4 	bl	40a1f8 <__aeabi_cdrcmple>
  40a270:	bf34      	ite	cc
  40a272:	2001      	movcc	r0, #1
  40a274:	2000      	movcs	r0, #0
  40a276:	f85d fb08 	ldr.w	pc, [sp], #8
  40a27a:	bf00      	nop

0040a27c <__aeabi_dcmpun>:
  40a27c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40a280:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a284:	d102      	bne.n	40a28c <__aeabi_dcmpun+0x10>
  40a286:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40a28a:	d10a      	bne.n	40a2a2 <__aeabi_dcmpun+0x26>
  40a28c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40a290:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a294:	d102      	bne.n	40a29c <__aeabi_dcmpun+0x20>
  40a296:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40a29a:	d102      	bne.n	40a2a2 <__aeabi_dcmpun+0x26>
  40a29c:	f04f 0000 	mov.w	r0, #0
  40a2a0:	4770      	bx	lr
  40a2a2:	f04f 0001 	mov.w	r0, #1
  40a2a6:	4770      	bx	lr

0040a2a8 <__aeabi_d2iz>:
  40a2a8:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40a2ac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40a2b0:	d215      	bcs.n	40a2de <__aeabi_d2iz+0x36>
  40a2b2:	d511      	bpl.n	40a2d8 <__aeabi_d2iz+0x30>
  40a2b4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40a2b8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40a2bc:	d912      	bls.n	40a2e4 <__aeabi_d2iz+0x3c>
  40a2be:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40a2c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40a2c6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40a2ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40a2ce:	fa23 f002 	lsr.w	r0, r3, r2
  40a2d2:	bf18      	it	ne
  40a2d4:	4240      	negne	r0, r0
  40a2d6:	4770      	bx	lr
  40a2d8:	f04f 0000 	mov.w	r0, #0
  40a2dc:	4770      	bx	lr
  40a2de:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40a2e2:	d105      	bne.n	40a2f0 <__aeabi_d2iz+0x48>
  40a2e4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40a2e8:	bf08      	it	eq
  40a2ea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40a2ee:	4770      	bx	lr
  40a2f0:	f04f 0000 	mov.w	r0, #0
  40a2f4:	4770      	bx	lr
  40a2f6:	bf00      	nop

0040a2f8 <__aeabi_uldivmod>:
  40a2f8:	b953      	cbnz	r3, 40a310 <__aeabi_uldivmod+0x18>
  40a2fa:	b94a      	cbnz	r2, 40a310 <__aeabi_uldivmod+0x18>
  40a2fc:	2900      	cmp	r1, #0
  40a2fe:	bf08      	it	eq
  40a300:	2800      	cmpeq	r0, #0
  40a302:	bf1c      	itt	ne
  40a304:	f04f 31ff 	movne.w	r1, #4294967295
  40a308:	f04f 30ff 	movne.w	r0, #4294967295
  40a30c:	f000 b97a 	b.w	40a604 <__aeabi_idiv0>
  40a310:	f1ad 0c08 	sub.w	ip, sp, #8
  40a314:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40a318:	f000 f806 	bl	40a328 <__udivmoddi4>
  40a31c:	f8dd e004 	ldr.w	lr, [sp, #4]
  40a320:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40a324:	b004      	add	sp, #16
  40a326:	4770      	bx	lr

0040a328 <__udivmoddi4>:
  40a328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a32c:	468c      	mov	ip, r1
  40a32e:	460d      	mov	r5, r1
  40a330:	4604      	mov	r4, r0
  40a332:	9e08      	ldr	r6, [sp, #32]
  40a334:	2b00      	cmp	r3, #0
  40a336:	d151      	bne.n	40a3dc <__udivmoddi4+0xb4>
  40a338:	428a      	cmp	r2, r1
  40a33a:	4617      	mov	r7, r2
  40a33c:	d96d      	bls.n	40a41a <__udivmoddi4+0xf2>
  40a33e:	fab2 fe82 	clz	lr, r2
  40a342:	f1be 0f00 	cmp.w	lr, #0
  40a346:	d00b      	beq.n	40a360 <__udivmoddi4+0x38>
  40a348:	f1ce 0c20 	rsb	ip, lr, #32
  40a34c:	fa01 f50e 	lsl.w	r5, r1, lr
  40a350:	fa20 fc0c 	lsr.w	ip, r0, ip
  40a354:	fa02 f70e 	lsl.w	r7, r2, lr
  40a358:	ea4c 0c05 	orr.w	ip, ip, r5
  40a35c:	fa00 f40e 	lsl.w	r4, r0, lr
  40a360:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40a364:	0c25      	lsrs	r5, r4, #16
  40a366:	fbbc f8fa 	udiv	r8, ip, sl
  40a36a:	fa1f f987 	uxth.w	r9, r7
  40a36e:	fb0a cc18 	mls	ip, sl, r8, ip
  40a372:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40a376:	fb08 f309 	mul.w	r3, r8, r9
  40a37a:	42ab      	cmp	r3, r5
  40a37c:	d90a      	bls.n	40a394 <__udivmoddi4+0x6c>
  40a37e:	19ed      	adds	r5, r5, r7
  40a380:	f108 32ff 	add.w	r2, r8, #4294967295
  40a384:	f080 8123 	bcs.w	40a5ce <__udivmoddi4+0x2a6>
  40a388:	42ab      	cmp	r3, r5
  40a38a:	f240 8120 	bls.w	40a5ce <__udivmoddi4+0x2a6>
  40a38e:	f1a8 0802 	sub.w	r8, r8, #2
  40a392:	443d      	add	r5, r7
  40a394:	1aed      	subs	r5, r5, r3
  40a396:	b2a4      	uxth	r4, r4
  40a398:	fbb5 f0fa 	udiv	r0, r5, sl
  40a39c:	fb0a 5510 	mls	r5, sl, r0, r5
  40a3a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40a3a4:	fb00 f909 	mul.w	r9, r0, r9
  40a3a8:	45a1      	cmp	r9, r4
  40a3aa:	d909      	bls.n	40a3c0 <__udivmoddi4+0x98>
  40a3ac:	19e4      	adds	r4, r4, r7
  40a3ae:	f100 33ff 	add.w	r3, r0, #4294967295
  40a3b2:	f080 810a 	bcs.w	40a5ca <__udivmoddi4+0x2a2>
  40a3b6:	45a1      	cmp	r9, r4
  40a3b8:	f240 8107 	bls.w	40a5ca <__udivmoddi4+0x2a2>
  40a3bc:	3802      	subs	r0, #2
  40a3be:	443c      	add	r4, r7
  40a3c0:	eba4 0409 	sub.w	r4, r4, r9
  40a3c4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40a3c8:	2100      	movs	r1, #0
  40a3ca:	2e00      	cmp	r6, #0
  40a3cc:	d061      	beq.n	40a492 <__udivmoddi4+0x16a>
  40a3ce:	fa24 f40e 	lsr.w	r4, r4, lr
  40a3d2:	2300      	movs	r3, #0
  40a3d4:	6034      	str	r4, [r6, #0]
  40a3d6:	6073      	str	r3, [r6, #4]
  40a3d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a3dc:	428b      	cmp	r3, r1
  40a3de:	d907      	bls.n	40a3f0 <__udivmoddi4+0xc8>
  40a3e0:	2e00      	cmp	r6, #0
  40a3e2:	d054      	beq.n	40a48e <__udivmoddi4+0x166>
  40a3e4:	2100      	movs	r1, #0
  40a3e6:	e886 0021 	stmia.w	r6, {r0, r5}
  40a3ea:	4608      	mov	r0, r1
  40a3ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a3f0:	fab3 f183 	clz	r1, r3
  40a3f4:	2900      	cmp	r1, #0
  40a3f6:	f040 808e 	bne.w	40a516 <__udivmoddi4+0x1ee>
  40a3fa:	42ab      	cmp	r3, r5
  40a3fc:	d302      	bcc.n	40a404 <__udivmoddi4+0xdc>
  40a3fe:	4282      	cmp	r2, r0
  40a400:	f200 80fa 	bhi.w	40a5f8 <__udivmoddi4+0x2d0>
  40a404:	1a84      	subs	r4, r0, r2
  40a406:	eb65 0503 	sbc.w	r5, r5, r3
  40a40a:	2001      	movs	r0, #1
  40a40c:	46ac      	mov	ip, r5
  40a40e:	2e00      	cmp	r6, #0
  40a410:	d03f      	beq.n	40a492 <__udivmoddi4+0x16a>
  40a412:	e886 1010 	stmia.w	r6, {r4, ip}
  40a416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a41a:	b912      	cbnz	r2, 40a422 <__udivmoddi4+0xfa>
  40a41c:	2701      	movs	r7, #1
  40a41e:	fbb7 f7f2 	udiv	r7, r7, r2
  40a422:	fab7 fe87 	clz	lr, r7
  40a426:	f1be 0f00 	cmp.w	lr, #0
  40a42a:	d134      	bne.n	40a496 <__udivmoddi4+0x16e>
  40a42c:	1beb      	subs	r3, r5, r7
  40a42e:	0c3a      	lsrs	r2, r7, #16
  40a430:	fa1f fc87 	uxth.w	ip, r7
  40a434:	2101      	movs	r1, #1
  40a436:	fbb3 f8f2 	udiv	r8, r3, r2
  40a43a:	0c25      	lsrs	r5, r4, #16
  40a43c:	fb02 3318 	mls	r3, r2, r8, r3
  40a440:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40a444:	fb0c f308 	mul.w	r3, ip, r8
  40a448:	42ab      	cmp	r3, r5
  40a44a:	d907      	bls.n	40a45c <__udivmoddi4+0x134>
  40a44c:	19ed      	adds	r5, r5, r7
  40a44e:	f108 30ff 	add.w	r0, r8, #4294967295
  40a452:	d202      	bcs.n	40a45a <__udivmoddi4+0x132>
  40a454:	42ab      	cmp	r3, r5
  40a456:	f200 80d1 	bhi.w	40a5fc <__udivmoddi4+0x2d4>
  40a45a:	4680      	mov	r8, r0
  40a45c:	1aed      	subs	r5, r5, r3
  40a45e:	b2a3      	uxth	r3, r4
  40a460:	fbb5 f0f2 	udiv	r0, r5, r2
  40a464:	fb02 5510 	mls	r5, r2, r0, r5
  40a468:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40a46c:	fb0c fc00 	mul.w	ip, ip, r0
  40a470:	45a4      	cmp	ip, r4
  40a472:	d907      	bls.n	40a484 <__udivmoddi4+0x15c>
  40a474:	19e4      	adds	r4, r4, r7
  40a476:	f100 33ff 	add.w	r3, r0, #4294967295
  40a47a:	d202      	bcs.n	40a482 <__udivmoddi4+0x15a>
  40a47c:	45a4      	cmp	ip, r4
  40a47e:	f200 80b8 	bhi.w	40a5f2 <__udivmoddi4+0x2ca>
  40a482:	4618      	mov	r0, r3
  40a484:	eba4 040c 	sub.w	r4, r4, ip
  40a488:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40a48c:	e79d      	b.n	40a3ca <__udivmoddi4+0xa2>
  40a48e:	4631      	mov	r1, r6
  40a490:	4630      	mov	r0, r6
  40a492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a496:	f1ce 0420 	rsb	r4, lr, #32
  40a49a:	fa05 f30e 	lsl.w	r3, r5, lr
  40a49e:	fa07 f70e 	lsl.w	r7, r7, lr
  40a4a2:	fa20 f804 	lsr.w	r8, r0, r4
  40a4a6:	0c3a      	lsrs	r2, r7, #16
  40a4a8:	fa25 f404 	lsr.w	r4, r5, r4
  40a4ac:	ea48 0803 	orr.w	r8, r8, r3
  40a4b0:	fbb4 f1f2 	udiv	r1, r4, r2
  40a4b4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40a4b8:	fb02 4411 	mls	r4, r2, r1, r4
  40a4bc:	fa1f fc87 	uxth.w	ip, r7
  40a4c0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40a4c4:	fb01 f30c 	mul.w	r3, r1, ip
  40a4c8:	42ab      	cmp	r3, r5
  40a4ca:	fa00 f40e 	lsl.w	r4, r0, lr
  40a4ce:	d909      	bls.n	40a4e4 <__udivmoddi4+0x1bc>
  40a4d0:	19ed      	adds	r5, r5, r7
  40a4d2:	f101 30ff 	add.w	r0, r1, #4294967295
  40a4d6:	f080 808a 	bcs.w	40a5ee <__udivmoddi4+0x2c6>
  40a4da:	42ab      	cmp	r3, r5
  40a4dc:	f240 8087 	bls.w	40a5ee <__udivmoddi4+0x2c6>
  40a4e0:	3902      	subs	r1, #2
  40a4e2:	443d      	add	r5, r7
  40a4e4:	1aeb      	subs	r3, r5, r3
  40a4e6:	fa1f f588 	uxth.w	r5, r8
  40a4ea:	fbb3 f0f2 	udiv	r0, r3, r2
  40a4ee:	fb02 3310 	mls	r3, r2, r0, r3
  40a4f2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40a4f6:	fb00 f30c 	mul.w	r3, r0, ip
  40a4fa:	42ab      	cmp	r3, r5
  40a4fc:	d907      	bls.n	40a50e <__udivmoddi4+0x1e6>
  40a4fe:	19ed      	adds	r5, r5, r7
  40a500:	f100 38ff 	add.w	r8, r0, #4294967295
  40a504:	d26f      	bcs.n	40a5e6 <__udivmoddi4+0x2be>
  40a506:	42ab      	cmp	r3, r5
  40a508:	d96d      	bls.n	40a5e6 <__udivmoddi4+0x2be>
  40a50a:	3802      	subs	r0, #2
  40a50c:	443d      	add	r5, r7
  40a50e:	1aeb      	subs	r3, r5, r3
  40a510:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40a514:	e78f      	b.n	40a436 <__udivmoddi4+0x10e>
  40a516:	f1c1 0720 	rsb	r7, r1, #32
  40a51a:	fa22 f807 	lsr.w	r8, r2, r7
  40a51e:	408b      	lsls	r3, r1
  40a520:	fa05 f401 	lsl.w	r4, r5, r1
  40a524:	ea48 0303 	orr.w	r3, r8, r3
  40a528:	fa20 fe07 	lsr.w	lr, r0, r7
  40a52c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40a530:	40fd      	lsrs	r5, r7
  40a532:	ea4e 0e04 	orr.w	lr, lr, r4
  40a536:	fbb5 f9fc 	udiv	r9, r5, ip
  40a53a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40a53e:	fb0c 5519 	mls	r5, ip, r9, r5
  40a542:	fa1f f883 	uxth.w	r8, r3
  40a546:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40a54a:	fb09 f408 	mul.w	r4, r9, r8
  40a54e:	42ac      	cmp	r4, r5
  40a550:	fa02 f201 	lsl.w	r2, r2, r1
  40a554:	fa00 fa01 	lsl.w	sl, r0, r1
  40a558:	d908      	bls.n	40a56c <__udivmoddi4+0x244>
  40a55a:	18ed      	adds	r5, r5, r3
  40a55c:	f109 30ff 	add.w	r0, r9, #4294967295
  40a560:	d243      	bcs.n	40a5ea <__udivmoddi4+0x2c2>
  40a562:	42ac      	cmp	r4, r5
  40a564:	d941      	bls.n	40a5ea <__udivmoddi4+0x2c2>
  40a566:	f1a9 0902 	sub.w	r9, r9, #2
  40a56a:	441d      	add	r5, r3
  40a56c:	1b2d      	subs	r5, r5, r4
  40a56e:	fa1f fe8e 	uxth.w	lr, lr
  40a572:	fbb5 f0fc 	udiv	r0, r5, ip
  40a576:	fb0c 5510 	mls	r5, ip, r0, r5
  40a57a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40a57e:	fb00 f808 	mul.w	r8, r0, r8
  40a582:	45a0      	cmp	r8, r4
  40a584:	d907      	bls.n	40a596 <__udivmoddi4+0x26e>
  40a586:	18e4      	adds	r4, r4, r3
  40a588:	f100 35ff 	add.w	r5, r0, #4294967295
  40a58c:	d229      	bcs.n	40a5e2 <__udivmoddi4+0x2ba>
  40a58e:	45a0      	cmp	r8, r4
  40a590:	d927      	bls.n	40a5e2 <__udivmoddi4+0x2ba>
  40a592:	3802      	subs	r0, #2
  40a594:	441c      	add	r4, r3
  40a596:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40a59a:	eba4 0408 	sub.w	r4, r4, r8
  40a59e:	fba0 8902 	umull	r8, r9, r0, r2
  40a5a2:	454c      	cmp	r4, r9
  40a5a4:	46c6      	mov	lr, r8
  40a5a6:	464d      	mov	r5, r9
  40a5a8:	d315      	bcc.n	40a5d6 <__udivmoddi4+0x2ae>
  40a5aa:	d012      	beq.n	40a5d2 <__udivmoddi4+0x2aa>
  40a5ac:	b156      	cbz	r6, 40a5c4 <__udivmoddi4+0x29c>
  40a5ae:	ebba 030e 	subs.w	r3, sl, lr
  40a5b2:	eb64 0405 	sbc.w	r4, r4, r5
  40a5b6:	fa04 f707 	lsl.w	r7, r4, r7
  40a5ba:	40cb      	lsrs	r3, r1
  40a5bc:	431f      	orrs	r7, r3
  40a5be:	40cc      	lsrs	r4, r1
  40a5c0:	6037      	str	r7, [r6, #0]
  40a5c2:	6074      	str	r4, [r6, #4]
  40a5c4:	2100      	movs	r1, #0
  40a5c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a5ca:	4618      	mov	r0, r3
  40a5cc:	e6f8      	b.n	40a3c0 <__udivmoddi4+0x98>
  40a5ce:	4690      	mov	r8, r2
  40a5d0:	e6e0      	b.n	40a394 <__udivmoddi4+0x6c>
  40a5d2:	45c2      	cmp	sl, r8
  40a5d4:	d2ea      	bcs.n	40a5ac <__udivmoddi4+0x284>
  40a5d6:	ebb8 0e02 	subs.w	lr, r8, r2
  40a5da:	eb69 0503 	sbc.w	r5, r9, r3
  40a5de:	3801      	subs	r0, #1
  40a5e0:	e7e4      	b.n	40a5ac <__udivmoddi4+0x284>
  40a5e2:	4628      	mov	r0, r5
  40a5e4:	e7d7      	b.n	40a596 <__udivmoddi4+0x26e>
  40a5e6:	4640      	mov	r0, r8
  40a5e8:	e791      	b.n	40a50e <__udivmoddi4+0x1e6>
  40a5ea:	4681      	mov	r9, r0
  40a5ec:	e7be      	b.n	40a56c <__udivmoddi4+0x244>
  40a5ee:	4601      	mov	r1, r0
  40a5f0:	e778      	b.n	40a4e4 <__udivmoddi4+0x1bc>
  40a5f2:	3802      	subs	r0, #2
  40a5f4:	443c      	add	r4, r7
  40a5f6:	e745      	b.n	40a484 <__udivmoddi4+0x15c>
  40a5f8:	4608      	mov	r0, r1
  40a5fa:	e708      	b.n	40a40e <__udivmoddi4+0xe6>
  40a5fc:	f1a8 0802 	sub.w	r8, r8, #2
  40a600:	443d      	add	r5, r7
  40a602:	e72b      	b.n	40a45c <__udivmoddi4+0x134>

0040a604 <__aeabi_idiv0>:
  40a604:	4770      	bx	lr
  40a606:	bf00      	nop
  40a608:	454c4449 	.word	0x454c4449
  40a60c:	00000000 	.word	0x00000000
  40a610:	51726d54 	.word	0x51726d54
  40a614:	00000000 	.word	0x00000000
  40a618:	20726d54 	.word	0x20726d54
  40a61c:	00637653 	.word	0x00637653
  40a620:	0a05000d 	.word	0x0a05000d
  40a624:	0000004b 	.word	0x0000004b
  40a628:	00001932 	.word	0x00001932
  40a62c:	0e00008b 	.word	0x0e00008b
  40a630:	32800008 	.word	0x32800008
  40a634:	030a0205 	.word	0x030a0205
  40a638:	0f022003 	.word	0x0f022003
  40a63c:	00000a0f 	.word	0x00000a0f
  40a640:	18180000 	.word	0x18180000
  40a644:	00002020 	.word	0x00002020
  40a648:	0a000000 	.word	0x0a000000
  40a64c:	02020000 	.word	0x02020000
  40a650:	18180000 	.word	0x18180000
  40a654:	00030000 	.word	0x00030000
  40a658:	00000000 	.word	0x00000000
  40a65c:	18010002 	.word	0x18010002
  40a660:	1e1e1e1e 	.word	0x1e1e1e1e
  40a664:	1e1e1e1e 	.word	0x1e1e1e1e
  40a668:	1e1e1e1e 	.word	0x1e1e1e1e
  40a66c:	00001e1e 	.word	0x00001e1e
	...
  40a680:	616d0d0a 	.word	0x616d0d0a
  40a684:	756f5458 	.word	0x756f5458
  40a688:	64206863 	.word	0x64206863
  40a68c:	20617461 	.word	0x20617461
  40a690:	52415355 	.word	0x52415355
  40a694:	72742054 	.word	0x72742054
  40a698:	6d736e61 	.word	0x6d736e61
  40a69c:	65747469 	.word	0x65747469
  40a6a0:	000d0a72 	.word	0x000d0a72
  40a6a4:	0074786d 	.word	0x0074786d
  40a6a8:	6c696146 	.word	0x6c696146
  40a6ac:	74206465 	.word	0x74206465
  40a6b0:	7263206f 	.word	0x7263206f
  40a6b4:	65746165 	.word	0x65746165
  40a6b8:	73657420 	.word	0x73657420
  40a6bc:	656c2074 	.word	0x656c2074
  40a6c0:	61742064 	.word	0x61742064
  40a6c4:	0a0d6b73 	.word	0x0a0d6b73
  40a6c8:	00000000 	.word	0x00000000
  40a6cc:	203a724e 	.word	0x203a724e
  40a6d0:	2c643125 	.word	0x2c643125
  40a6d4:	253a5820 	.word	0x253a5820
  40a6d8:	202c6434 	.word	0x202c6434
  40a6dc:	34253a59 	.word	0x34253a59
  40a6e0:	53202c64 	.word	0x53202c64
  40a6e4:	75746174 	.word	0x75746174
  40a6e8:	78303a73 	.word	0x78303a73
  40a6ec:	20783225 	.word	0x20783225
  40a6f0:	766e6f63 	.word	0x766e6f63
  40a6f4:	253a5820 	.word	0x253a5820
  40a6f8:	59206433 	.word	0x59206433
  40a6fc:	6433253a 	.word	0x6433253a
  40a700:	00000d0a 	.word	0x00000d0a
  40a704:	63617473 	.word	0x63617473
  40a708:	766f206b 	.word	0x766f206b
  40a70c:	6c667265 	.word	0x6c667265
  40a710:	2520776f 	.word	0x2520776f
  40a714:	73252078 	.word	0x73252078
  40a718:	00000a0d 	.word	0x00000a0d

0040a71c <_global_impure_ptr>:
  40a71c:	20400020 00464e49 00666e69 004e414e      .@ INF.inf.NAN.
  40a72c:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  40a73c:	46454443 00000000 33323130 37363534     CDEF....01234567
  40a74c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  40a75c:	0000296c 00000030                       l)..0...

0040a764 <blanks.7223>:
  40a764:	20202020 20202020 20202020 20202020                     

0040a774 <zeroes.7224>:
  40a774:	30303030 30303030 30303030 30303030     0000000000000000

0040a784 <blanks.7217>:
  40a784:	20202020 20202020 20202020 20202020                     

0040a794 <zeroes.7218>:
  40a794:	30303030 30303030 30303030 30303030     0000000000000000
  40a7a4:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  40a7b4:	00000043 49534f50 00000058 0000002e     C...POSIX.......
  40a7c4:	00000000                                ....

0040a7c8 <__mprec_bigtens>:
  40a7c8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  40a7d8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  40a7e8:	7f73bf3c 75154fdd                       <.s..O.u

0040a7f0 <__mprec_tens>:
  40a7f0:	00000000 3ff00000 00000000 40240000     .......?......$@
  40a800:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  40a810:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  40a820:	00000000 412e8480 00000000 416312d0     .......A......cA
  40a830:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  40a840:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  40a850:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  40a860:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  40a870:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  40a880:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  40a890:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  40a8a0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  40a8b0:	79d99db4 44ea7843                       ...yCx.D

0040a8b8 <p05.6055>:
  40a8b8:	00000005 00000019 0000007d              ........}...

0040a8c4 <_ctype_>:
  40a8c4:	20202000 20202020 28282020 20282828     .         ((((( 
  40a8d4:	20202020 20202020 20202020 20202020                     
  40a8e4:	10108820 10101010 10101010 10101010      ...............
  40a8f4:	04040410 04040404 10040404 10101010     ................
  40a904:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40a914:	01010101 01010101 01010101 10101010     ................
  40a924:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40a934:	02020202 02020202 02020202 10101010     ................
  40a944:	00000020 00000000 00000000 00000000      ...............
	...

0040a9c8 <_init>:
  40a9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a9ca:	bf00      	nop
  40a9cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40a9ce:	bc08      	pop	{r3}
  40a9d0:	469e      	mov	lr, r3
  40a9d2:	4770      	bx	lr

0040a9d4 <__init_array_start>:
  40a9d4:	00406f55 	.word	0x00406f55

0040a9d8 <__frame_dummy_init_array_entry>:
  40a9d8:	0040018d                                ..@.

0040a9dc <_fini>:
  40a9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a9de:	bf00      	nop
  40a9e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40a9e2:	bc08      	pop	{r3}
  40a9e4:	469e      	mov	lr, r3
  40a9e6:	4770      	bx	lr

0040a9e8 <__fini_array_start>:
  40a9e8:	00400169 	.word	0x00400169

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <uxCriticalNesting>:
2040000c:	aaaa aaaa                                   ....

20400010 <g_interrupt_enabled>:
20400010:	0001 0000                                   ....

20400014 <SystemCoreClock>:
20400014:	0900 003d                                   ..=.

20400018 <last_state.11920>:
20400018:	00ff 0000                                   ....

2040001c <_impure_ptr>:
2040001c:	0020 2040                                    .@ 

20400020 <impure_data>:
20400020:	0000 0000 030c 2040 0374 2040 03dc 2040     ......@ t.@ ..@ 
	...
204000c8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400448 <__malloc_av_>:
	...
20400450:	0448 2040 0448 2040 0450 2040 0450 2040     H.@ H.@ P.@ P.@ 
20400460:	0458 2040 0458 2040 0460 2040 0460 2040     X.@ X.@ `.@ `.@ 
20400470:	0468 2040 0468 2040 0470 2040 0470 2040     h.@ h.@ p.@ p.@ 
20400480:	0478 2040 0478 2040 0480 2040 0480 2040     x.@ x.@ ..@ ..@ 
20400490:	0488 2040 0488 2040 0490 2040 0490 2040     ..@ ..@ ..@ ..@ 
204004a0:	0498 2040 0498 2040 04a0 2040 04a0 2040     ..@ ..@ ..@ ..@ 
204004b0:	04a8 2040 04a8 2040 04b0 2040 04b0 2040     ..@ ..@ ..@ ..@ 
204004c0:	04b8 2040 04b8 2040 04c0 2040 04c0 2040     ..@ ..@ ..@ ..@ 
204004d0:	04c8 2040 04c8 2040 04d0 2040 04d0 2040     ..@ ..@ ..@ ..@ 
204004e0:	04d8 2040 04d8 2040 04e0 2040 04e0 2040     ..@ ..@ ..@ ..@ 
204004f0:	04e8 2040 04e8 2040 04f0 2040 04f0 2040     ..@ ..@ ..@ ..@ 
20400500:	04f8 2040 04f8 2040 0500 2040 0500 2040     ..@ ..@ ..@ ..@ 
20400510:	0508 2040 0508 2040 0510 2040 0510 2040     ..@ ..@ ..@ ..@ 
20400520:	0518 2040 0518 2040 0520 2040 0520 2040     ..@ ..@  .@  .@ 
20400530:	0528 2040 0528 2040 0530 2040 0530 2040     (.@ (.@ 0.@ 0.@ 
20400540:	0538 2040 0538 2040 0540 2040 0540 2040     8.@ 8.@ @.@ @.@ 
20400550:	0548 2040 0548 2040 0550 2040 0550 2040     H.@ H.@ P.@ P.@ 
20400560:	0558 2040 0558 2040 0560 2040 0560 2040     X.@ X.@ `.@ `.@ 
20400570:	0568 2040 0568 2040 0570 2040 0570 2040     h.@ h.@ p.@ p.@ 
20400580:	0578 2040 0578 2040 0580 2040 0580 2040     x.@ x.@ ..@ ..@ 
20400590:	0588 2040 0588 2040 0590 2040 0590 2040     ..@ ..@ ..@ ..@ 
204005a0:	0598 2040 0598 2040 05a0 2040 05a0 2040     ..@ ..@ ..@ ..@ 
204005b0:	05a8 2040 05a8 2040 05b0 2040 05b0 2040     ..@ ..@ ..@ ..@ 
204005c0:	05b8 2040 05b8 2040 05c0 2040 05c0 2040     ..@ ..@ ..@ ..@ 
204005d0:	05c8 2040 05c8 2040 05d0 2040 05d0 2040     ..@ ..@ ..@ ..@ 
204005e0:	05d8 2040 05d8 2040 05e0 2040 05e0 2040     ..@ ..@ ..@ ..@ 
204005f0:	05e8 2040 05e8 2040 05f0 2040 05f0 2040     ..@ ..@ ..@ ..@ 
20400600:	05f8 2040 05f8 2040 0600 2040 0600 2040     ..@ ..@ ..@ ..@ 
20400610:	0608 2040 0608 2040 0610 2040 0610 2040     ..@ ..@ ..@ ..@ 
20400620:	0618 2040 0618 2040 0620 2040 0620 2040     ..@ ..@  .@  .@ 
20400630:	0628 2040 0628 2040 0630 2040 0630 2040     (.@ (.@ 0.@ 0.@ 
20400640:	0638 2040 0638 2040 0640 2040 0640 2040     8.@ 8.@ @.@ @.@ 
20400650:	0648 2040 0648 2040 0650 2040 0650 2040     H.@ H.@ P.@ P.@ 
20400660:	0658 2040 0658 2040 0660 2040 0660 2040     X.@ X.@ `.@ `.@ 
20400670:	0668 2040 0668 2040 0670 2040 0670 2040     h.@ h.@ p.@ p.@ 
20400680:	0678 2040 0678 2040 0680 2040 0680 2040     x.@ x.@ ..@ ..@ 
20400690:	0688 2040 0688 2040 0690 2040 0690 2040     ..@ ..@ ..@ ..@ 
204006a0:	0698 2040 0698 2040 06a0 2040 06a0 2040     ..@ ..@ ..@ ..@ 
204006b0:	06a8 2040 06a8 2040 06b0 2040 06b0 2040     ..@ ..@ ..@ ..@ 
204006c0:	06b8 2040 06b8 2040 06c0 2040 06c0 2040     ..@ ..@ ..@ ..@ 
204006d0:	06c8 2040 06c8 2040 06d0 2040 06d0 2040     ..@ ..@ ..@ ..@ 
204006e0:	06d8 2040 06d8 2040 06e0 2040 06e0 2040     ..@ ..@ ..@ ..@ 
204006f0:	06e8 2040 06e8 2040 06f0 2040 06f0 2040     ..@ ..@ ..@ ..@ 
20400700:	06f8 2040 06f8 2040 0700 2040 0700 2040     ..@ ..@ ..@ ..@ 
20400710:	0708 2040 0708 2040 0710 2040 0710 2040     ..@ ..@ ..@ ..@ 
20400720:	0718 2040 0718 2040 0720 2040 0720 2040     ..@ ..@  .@  .@ 
20400730:	0728 2040 0728 2040 0730 2040 0730 2040     (.@ (.@ 0.@ 0.@ 
20400740:	0738 2040 0738 2040 0740 2040 0740 2040     8.@ 8.@ @.@ @.@ 
20400750:	0748 2040 0748 2040 0750 2040 0750 2040     H.@ H.@ P.@ P.@ 
20400760:	0758 2040 0758 2040 0760 2040 0760 2040     X.@ X.@ `.@ `.@ 
20400770:	0768 2040 0768 2040 0770 2040 0770 2040     h.@ h.@ p.@ p.@ 
20400780:	0778 2040 0778 2040 0780 2040 0780 2040     x.@ x.@ ..@ ..@ 
20400790:	0788 2040 0788 2040 0790 2040 0790 2040     ..@ ..@ ..@ ..@ 
204007a0:	0798 2040 0798 2040 07a0 2040 07a0 2040     ..@ ..@ ..@ ..@ 
204007b0:	07a8 2040 07a8 2040 07b0 2040 07b0 2040     ..@ ..@ ..@ ..@ 
204007c0:	07b8 2040 07b8 2040 07c0 2040 07c0 2040     ..@ ..@ ..@ ..@ 
204007d0:	07c8 2040 07c8 2040 07d0 2040 07d0 2040     ..@ ..@ ..@ ..@ 
204007e0:	07d8 2040 07d8 2040 07e0 2040 07e0 2040     ..@ ..@ ..@ ..@ 
204007f0:	07e8 2040 07e8 2040 07f0 2040 07f0 2040     ..@ ..@ ..@ ..@ 
20400800:	07f8 2040 07f8 2040 0800 2040 0800 2040     ..@ ..@ ..@ ..@ 
20400810:	0808 2040 0808 2040 0810 2040 0810 2040     ..@ ..@ ..@ ..@ 
20400820:	0818 2040 0818 2040 0820 2040 0820 2040     ..@ ..@  .@  .@ 
20400830:	0828 2040 0828 2040 0830 2040 0830 2040     (.@ (.@ 0.@ 0.@ 
20400840:	0838 2040 0838 2040 0840 2040 0840 2040     8.@ 8.@ @.@ @.@ 

20400850 <__malloc_sbrk_base>:
20400850:	ffff ffff                                   ....

20400854 <__malloc_trim_threshold>:
20400854:	0000 0002                                   ....

20400858 <__atexit_recursive_mutex>:
20400858:	c874 2040                                   t.@ 

2040085c <__global_locale>:
2040085c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040087c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040089c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008bc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008dc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008fc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040091c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040093c:	96e1 0040 8979 0040 0000 0000 a8c4 0040     ..@.y.@.......@.
2040094c:	a7c0 0040 a6c8 0040 a6c8 0040 a6c8 0040     ..@...@...@...@.
2040095c:	a6c8 0040 a6c8 0040 a6c8 0040 a6c8 0040     ..@...@...@...@.
2040096c:	a6c8 0040 a6c8 0040 ffff ffff ffff ffff     ..@...@.........
2040097c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204009a4:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
